// Generated from /Users/lisa/Desktop/app_inventor/venbrace/Venbrace.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var grammarFileName = "Venbrace.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003k\u02d9\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002t\n\u0002\f\u0002\u000e\u0002w\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u008c\n\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u009a\n\u0006",
    "\f\u0006\u000e\u0006\u009d\u000b\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0007\u0007\u00a8\n\u0007\f\u0007\u000e\u0007\u00ab\u000b\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00c2\n\t\u0003\n",
    "\u0003\n\u0003\n\u0007\n\u00c7\n\n\f\n\u000e\n\u00ca\u000b\n\u0003\n",
    "\u0003\n\u0005\n\u00ce\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00df\n\f\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00e7\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0007\u000e\u00f7\n\u000e\f\u000e\u000e\u000e\u00fa\u000b\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0100\n",
    "\u000e\u0005\u000e\u0102\n\u000e\u0003\u000e\u0003\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u0118\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0005\u0014\u0123",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u012b\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u0135\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u013b\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0006\u0017\u0148\n\u0017\r\u0017\u000e\u0017\u0149",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0173\n\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0177\n\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u017f\n",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u019b\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u01a9\n \u0003 \u0003 \u0003",
    " \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u01bb\n!\u0003!\u0003!\u0003!\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u01d8\n\"\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0006#\u01e0\n#\r#\u000e#\u01e1",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0006#\u01ea\n#\r#\u000e",
    "#\u01eb\u0003#\u0003#\u0005#\u01f0\n#\u0003#\u0003#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0005$\u01fb\n$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u0204\n$\u0003%\u0003%\u0003%\u0003%\u0005",
    "%\u020a\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0006%\u0211\n%\r%\u000e",
    "%\u0212\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005",
    "&\u0227\n&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u024a\n*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u0259\n,\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0006.\u0265\n.\r.\u000e.\u0266\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u00050\u0273\n0\u0003",
    "0\u00030\u00030\u00030\u00050\u0279\n0\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00061\u0282\n1\r1\u000e1\u0283\u00031\u00031\u0003",
    "1\u00031\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u02a8\n3\u00033\u00033\u00034\u00034\u00034\u00034\u0003",
    "5\u00035\u00035\u00035\u00075\u02b4\n5\f5\u000e5\u02b7\u000b5\u0003",
    "5\u00035\u00036\u00056\u02bc\n6\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02c6\n6\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u02d7\n8\u00038\u0002\u00029\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjln\u0002\u0003\u0003\u0002ef\u0002\u02fd\u0002u\u0003\u0002",
    "\u0002\u0002\u0004z\u0003\u0002\u0002\u0002\u0006\u008b\u0003\u0002",
    "\u0002\u0002\b\u008d\u0003\u0002\u0002\u0002\n\u0094\u0003\u0002\u0002",
    "\u0002\f\u00a2\u0003\u0002\u0002\u0002\u000e\u00b0\u0003\u0002\u0002",
    "\u0002\u0010\u00c1\u0003\u0002\u0002\u0002\u0012\u00cd\u0003\u0002\u0002",
    "\u0002\u0014\u00cf\u0003\u0002\u0002\u0002\u0016\u00de\u0003\u0002\u0002",
    "\u0002\u0018\u00e6\u0003\u0002\u0002\u0002\u001a\u00e8\u0003\u0002\u0002",
    "\u0002\u001c\u0105\u0003\u0002\u0002\u0002\u001e\u010d\u0003\u0002\u0002",
    "\u0002 \u0111\u0003\u0002\u0002\u0002\"\u011b\u0003\u0002\u0002\u0002",
    "$\u011e\u0003\u0002\u0002\u0002&\u0122\u0003\u0002\u0002\u0002(\u012e",
    "\u0003\u0002\u0002\u0002*\u0131\u0003\u0002\u0002\u0002,\u0140\u0003",
    "\u0002\u0002\u0002.\u0176\u0003\u0002\u0002\u00020\u017e\u0003\u0002",
    "\u0002\u00022\u0180\u0003\u0002\u0002\u00024\u0188\u0003\u0002\u0002",
    "\u00026\u018f\u0003\u0002\u0002\u00028\u0192\u0003\u0002\u0002\u0002",
    ":\u0195\u0003\u0002\u0002\u0002<\u019f\u0003\u0002\u0002\u0002>\u01a3",
    "\u0003\u0002\u0002\u0002@\u01ad\u0003\u0002\u0002\u0002B\u01d7\u0003",
    "\u0002\u0002\u0002D\u01d9\u0003\u0002\u0002\u0002F\u0203\u0003\u0002",
    "\u0002\u0002H\u0209\u0003\u0002\u0002\u0002J\u0226\u0003\u0002\u0002",
    "\u0002L\u022b\u0003\u0002\u0002\u0002N\u0231\u0003\u0002\u0002\u0002",
    "P\u0237\u0003\u0002\u0002\u0002R\u0249\u0003\u0002\u0002\u0002T\u024e",
    "\u0003\u0002\u0002\u0002V\u0258\u0003\u0002\u0002\u0002X\u025a\u0003",
    "\u0002\u0002\u0002Z\u025e\u0003\u0002\u0002\u0002\\\u026a\u0003\u0002",
    "\u0002\u0002^\u0278\u0003\u0002\u0002\u0002`\u027a\u0003\u0002\u0002",
    "\u0002b\u028a\u0003\u0002\u0002\u0002d\u02a7\u0003\u0002\u0002\u0002",
    "f\u02ab\u0003\u0002\u0002\u0002h\u02af\u0003\u0002\u0002\u0002j\u02bb",
    "\u0003\u0002\u0002\u0002l\u02c7\u0003\u0002\u0002\u0002n\u02d6\u0003",
    "\u0002\u0002\u0002pq\u0005\u0004\u0003\u0002qr\b\u0002\u0001\u0002r",
    "t\u0003\u0002\u0002\u0002sp\u0003\u0002\u0002\u0002tw\u0003\u0002\u0002",
    "\u0002us\u0003\u0002\u0002\u0002uv\u0003\u0002\u0002\u0002vx\u0003\u0002",
    "\u0002\u0002wu\u0003\u0002\u0002\u0002xy\u0007\u0002\u0002\u0003y\u0003",
    "\u0003\u0002\u0002\u0002z{\u0007\b\u0002\u0002{|\u0005\u0006\u0004\u0002",
    "|}\u0007\t\u0002\u0002}~\b\u0003\u0001\u0002~\u0005\u0003\u0002\u0002",
    "\u0002\u007f\u0080\u0005\b\u0005\u0002\u0080\u0081\b\u0004\u0001\u0002",
    "\u0081\u008c\u0003\u0002\u0002\u0002\u0082\u0083\u0005\n\u0006\u0002",
    "\u0083\u0084\b\u0004\u0001\u0002\u0084\u008c\u0003\u0002\u0002\u0002",
    "\u0085\u0086\u0005\f\u0007\u0002\u0086\u0087\b\u0004\u0001\u0002\u0087",
    "\u008c\u0003\u0002\u0002\u0002\u0088\u0089\u0005\u000e\b\u0002\u0089",
    "\u008a\b\u0004\u0001\u0002\u008a\u008c\u0003\u0002\u0002\u0002\u008b",
    "\u007f\u0003\u0002\u0002\u0002\u008b\u0082\u0003\u0002\u0002\u0002\u008b",
    "\u0085\u0003\u0002\u0002\u0002\u008b\u0088\u0003\u0002\u0002\u0002\u008c",
    "\u0007\u0003\u0002\u0002\u0002\u008d\u008e\u0007\'\u0002\u0002\u008e",
    "\u008f\u0007\u001d\u0002\u0002\u008f\u0090\u0007j\u0002\u0002\u0090",
    "\u0091\u0007\u0019\u0002\u0002\u0091\u0092\u0005\u0010\t\u0002\u0092",
    "\u0093\b\u0005\u0001\u0002\u0093\t\u0003\u0002\u0002\u0002\u0094\u0095",
    "\u0007\u0019\u0002\u0002\u0095\u0096\u0007j\u0002\u0002\u0096\u009b",
    "\b\u0006\u0001\u0002\u0097\u0098\u0007j\u0002\u0002\u0098\u009a\b\u0006",
    "\u0001\u0002\u0099\u0097\u0003\u0002\u0002\u0002\u009a\u009d\u0003\u0002",
    "\u0002\u0002\u009b\u0099\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002",
    "\u0002\u0002\u009c\u009e\u0003\u0002\u0002\u0002\u009d\u009b\u0003\u0002",
    "\u0002\u0002\u009e\u009f\u0007\u0017\u0002\u0002\u009f\u00a0\u0005\u0012",
    "\n\u0002\u00a0\u00a1\b\u0006\u0001\u0002\u00a1\u000b\u0003\u0002\u0002",
    "\u0002\u00a2\u00a3\u0007\u0019\u0002\u0002\u00a3\u00a4\u0007j\u0002",
    "\u0002\u00a4\u00a9\b\u0007\u0001\u0002\u00a5\u00a6\u0007j\u0002\u0002",
    "\u00a6\u00a8\b\u0007\u0001\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002",
    "\u00a8\u00ab\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002\u0002",
    "\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u00ac\u0003\u0002\u0002\u0002",
    "\u00ab\u00a9\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007\u0018\u0002\u0002",
    "\u00ad\u00ae\u0005\u0010\t\u0002\u00ae\u00af\b\u0007\u0001\u0002\u00af",
    "\r\u0003\u0002\u0002\u0002\u00b0\u00b1\u0007\u0011\u0002\u0002\u00b1",
    "\u00b2\u0007i\u0002\u0002\u00b2\u00b3\b\b\u0001\u0002\u00b3\u00b4\u0007",
    "\u0017\u0002\u0002\u00b4\u00b5\u0005\u0012\n\u0002\u00b5\u00b6\b\b\u0001",
    "\u0002\u00b6\u000f\u0003\u0002\u0002\u0002\u00b7\u00b8\u0007\u0006\u0002",
    "\u0002\u00b8\u00b9\u0007\u0007\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002",
    "\u0002\u00ba\u00c2\b\t\u0001\u0002\u00bb\u00bc\u0005n8\u0002\u00bc\u00bd",
    "\b\t\u0001\u0002\u00bd\u00c2\u0003\u0002\u0002\u0002\u00be\u00bf\u0005",
    ".\u0018\u0002\u00bf\u00c0\b\t\u0001\u0002\u00c0\u00c2\u0003\u0002\u0002",
    "\u0002\u00c1\u00b7\u0003\u0002\u0002\u0002\u00c1\u00bb\u0003\u0002\u0002",
    "\u0002\u00c1\u00be\u0003\u0002\u0002\u0002\u00c2\u0011\u0003\u0002\u0002",
    "\u0002\u00c3\u00c4\u0005\u0014\u000b\u0002\u00c4\u00c5\b\n\u0001\u0002",
    "\u00c5\u00c7\u0003\u0002\u0002\u0002\u00c6\u00c3\u0003\u0002\u0002\u0002",
    "\u00c7\u00ca\u0003\u0002\u0002\u0002\u00c8\u00c6\u0003\u0002\u0002\u0002",
    "\u00c8\u00c9\u0003\u0002\u0002\u0002\u00c9\u00ce\u0003\u0002\u0002\u0002",
    "\u00ca\u00c8\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007\u0004\u0002\u0002",
    "\u00cc\u00ce\u0007\u0005\u0002\u0002\u00cd\u00c8\u0003\u0002\u0002\u0002",
    "\u00cd\u00cb\u0003\u0002\u0002\u0002\u00ce\u0013\u0003\u0002\u0002\u0002",
    "\u00cf\u00d0\u0007\u0004\u0002\u0002\u00d0\u00d1\u0005\u0016\f\u0002",
    "\u00d1\u00d2\b\u000b\u0001\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002",
    "\u00d3\u00d4\u0007\u0005\u0002\u0002\u00d4\u0015\u0003\u0002\u0002\u0002",
    "\u00d5\u00d6\u0005\u0018\r\u0002\u00d6\u00d7\b\f\u0001\u0002\u00d7\u00df",
    "\u0003\u0002\u0002\u0002\u00d8\u00d9\u0005&\u0014\u0002\u00d9\u00da",
    "\b\f\u0001\u0002\u00da\u00df\u0003\u0002\u0002\u0002\u00db\u00dc\u0005",
    "(\u0015\u0002\u00dc\u00dd\b\f\u0001\u0002\u00dd\u00df\u0003\u0002\u0002",
    "\u0002\u00de\u00d5\u0003\u0002\u0002\u0002\u00de\u00d8\u0003\u0002\u0002",
    "\u0002\u00de\u00db\u0003\u0002\u0002\u0002\u00df\u0017\u0003\u0002\u0002",
    "\u0002\u00e0\u00e1\u0005\u001a\u000e\u0002\u00e1\u00e2\b\r\u0001\u0002",
    "\u00e2\u00e7\u0003\u0002\u0002\u0002\u00e3\u00e4\u0005\u001c\u000f\u0002",
    "\u00e4\u00e5\b\r\u0001\u0002\u00e5\u00e7\u0003\u0002\u0002\u0002\u00e6",
    "\u00e0\u0003\u0002\u0002\u0002\u00e6\u00e3\u0003\u0002\u0002\u0002\u00e7",
    "\u0019\u0003\u0002\u0002\u0002\u00e8\u00e9\u0007\u0012\u0002\u0002\u00e9",
    "\u00ea\u0005\u0010\t\u0002\u00ea\u00eb\b\u000e\u0001\u0002\u00eb\u00ec",
    "\u0007\u0013\u0002\u0002\u00ec\u00ed\u0005\u0012\n\u0002\u00ed\u0101",
    "\b\u000e\u0001\u0002\u00ee\u00ef\u0007\u0015\u0002\u0002\u00ef\u00f0",
    "\b\u000e\u0001\u0002\u00f0\u00f1\u0005\u0010\t\u0002\u00f1\u00f2\b\u000e",
    "\u0001\u0002\u00f2\u00f3\u0007\u0013\u0002\u0002\u00f3\u00f4\u0005\u0012",
    "\n\u0002\u00f4\u00f5\b\u000e\u0001\u0002\u00f5\u00f7\u0003\u0002\u0002",
    "\u0002\u00f6\u00ee\u0003\u0002\u0002\u0002\u00f7\u00fa\u0003\u0002\u0002",
    "\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002",
    "\u0002\u00f9\u00ff\u0003\u0002\u0002\u0002\u00fa\u00f8\u0003\u0002\u0002",
    "\u0002\u00fb\u00fc\u0007\u0014\u0002\u0002\u00fc\u00fd\u0005\u0012\n",
    "\u0002\u00fd\u00fe\b\u000e\u0001\u0002\u00fe\u0100\u0003\u0002\u0002",
    "\u0002\u00ff\u00fb\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002",
    "\u0002\u0100\u0102\u0003\u0002\u0002\u0002\u0101\u00f8\u0003\u0002\u0002",
    "\u0002\u0101\u0102\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002",
    "\u0002\u0103\u0104\b\u000e\u0001\u0002\u0104\u001b\u0003\u0002\u0002",
    "\u0002\u0105\u0106\u0007!\u0002\u0002\u0106\u0107\u0007\"\u0002\u0002",
    "\u0107\u0108\u0005\u0010\t\u0002\u0108\u0109\b\u000f\u0001\u0002\u0109",
    "\u010a\u0007\u0017\u0002\u0002\u010a\u010b\u0005\u0012\n\u0002\u010b",
    "\u010c\b\u000f\u0001\u0002\u010c\u001d\u0003\u0002\u0002\u0002\u010d",
    "\u010e\u0007#\u0002\u0002\u010e\u010f\u0005\u0010\t\u0002\u010f\u0110",
    "\b\u0010\u0001\u0002\u0110\u001f\u0003\u0002\u0002\u0002\u0111\u0112",
    "\u0007$\u0002\u0002\u0112\u0113\u0005\u0010\t\u0002\u0113\u0117\b\u0011",
    "\u0001\u0002\u0114\u0115\u0005\u0010\t\u0002\u0115\u0116\b\u0011\u0001",
    "\u0002\u0116\u0118\u0003\u0002\u0002\u0002\u0117\u0114\u0003\u0002\u0002",
    "\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002",
    "\u0002\u0119\u011a\b\u0011\u0001\u0002\u011a!\u0003\u0002\u0002\u0002",
    "\u011b\u011c\u0007%\u0002\u0002\u011c\u011d\b\u0012\u0001\u0002\u011d",
    "#\u0003\u0002\u0002\u0002\u011e\u011f\u0007&\u0002\u0002\u011f\u0120",
    "\b\u0013\u0001\u0002\u0120%\u0003\u0002\u0002\u0002\u0121\u0123\u0007",
    "\u001a\u0002\u0002\u0122\u0121\u0003\u0002\u0002\u0002\u0122\u0123\u0003",
    "\u0002\u0002\u0002\u0123\u012a\u0003\u0002\u0002\u0002\u0124\u0125\u0007",
    "j\u0002\u0002\u0125\u012b\b\u0014\u0001\u0002\u0126\u0127\u0007j\u0002",
    "\u0002\u0127\u0128\u0007\f\u0002\u0002\u0128\u0129\u0007j\u0002\u0002",
    "\u0129\u012b\b\u0014\u0001\u0002\u012a\u0124\u0003\u0002\u0002\u0002",
    "\u012a\u0126\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002",
    "\u012c\u012d\b\u0014\u0001\u0002\u012d\'\u0003\u0002\u0002\u0002\u012e",
    "\u012f\u0005*\u0016\u0002\u012f\u0130\b\u0015\u0001\u0002\u0130)\u0003",
    "\u0002\u0002\u0002\u0131\u013a\u0007\u001c\u0002\u0002\u0132\u0133\u0007",
    "\u001d\u0002\u0002\u0133\u0135\b\u0016\u0001\u0002\u0134\u0132\u0003",
    "\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0003",
    "\u0002\u0002\u0002\u0136\u0137\u0007j\u0002\u0002\u0137\u013b\b\u0016",
    "\u0001\u0002\u0138\u0139\u0007i\u0002\u0002\u0139\u013b\b\u0016\u0001",
    "\u0002\u013a\u0134\u0003\u0002\u0002\u0002\u013a\u0138\u0003\u0002\u0002",
    "\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013d\u0007\u0019\u0002",
    "\u0002\u013d\u013e\u0005\u0010\t\u0002\u013e\u013f\b\u0016\u0001\u0002",
    "\u013f+\u0003\u0002\u0002\u0002\u0140\u0141\u0007\'\u0002\u0002\u0141",
    "\u0147\u0007(\u0002\u0002\u0142\u0143\u0007j\u0002\u0002\u0143\u0144",
    "\u0007\u0019\u0002\u0002\u0144\u0145\u0005\u0010\t\u0002\u0145\u0146",
    "\b\u0017\u0001\u0002\u0146\u0148\u0003\u0002\u0002\u0002\u0147\u0142",
    "\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u0147",
    "\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u014c\b\u0017\u0001\u0002\u014c\u014d",
    "\u0007\u001e\u0002\u0002\u014d\u014e\u0005\u0012\n\u0002\u014e\u014f",
    "\b\u0017\u0001\u0002\u014f-\u0003\u0002\u0002\u0002\u0150\u0151\u0005",
    "\\/\u0002\u0151\u0152\b\u0018\u0001\u0002\u0152\u0177\u0003\u0002\u0002",
    "\u0002\u0153\u0172\u0007\u0006\u0002\u0002\u0154\u0155\u00050\u0019",
    "\u0002\u0155\u0156\b\u0018\u0001\u0002\u0156\u0173\u0003\u0002\u0002",
    "\u0002\u0157\u0158\u0005:\u001e\u0002\u0158\u0159\b\u0018\u0001\u0002",
    "\u0159\u0173\u0003\u0002\u0002\u0002\u015a\u015b\u0005<\u001f\u0002",
    "\u015b\u015c\b\u0018\u0001\u0002\u015c\u0173\u0003\u0002\u0002\u0002",
    "\u015d\u015e\u0005> \u0002\u015e\u015f\b\u0018\u0001\u0002\u015f\u0173",
    "\u0003\u0002\u0002\u0002\u0160\u0161\u0005@!\u0002\u0161\u0162\b\u0018",
    "\u0001\u0002\u0162\u0173\u0003\u0002\u0002\u0002\u0163\u0164\u0005B",
    "\"\u0002\u0164\u0165\b\u0018\u0001\u0002\u0165\u0173\u0003\u0002\u0002",
    "\u0002\u0166\u0167\u0005V,\u0002\u0167\u0168\b\u0018\u0001\u0002\u0168",
    "\u0173\u0003\u0002\u0002\u0002\u0169\u016a\u0005b2\u0002\u016a\u016b",
    "\b\u0018\u0001\u0002\u016b\u0173\u0003\u0002\u0002\u0002\u016c\u016d",
    "\u0005j6\u0002\u016d\u016e\b\u0018\u0001\u0002\u016e\u0173\u0003\u0002",
    "\u0002\u0002\u016f\u0170\u0005n8\u0002\u0170\u0171\b\u0018\u0001\u0002",
    "\u0171\u0173\u0003\u0002\u0002\u0002\u0172\u0154\u0003\u0002\u0002\u0002",
    "\u0172\u0157\u0003\u0002\u0002\u0002\u0172\u015a\u0003\u0002\u0002\u0002",
    "\u0172\u015d\u0003\u0002\u0002\u0002\u0172\u0160\u0003\u0002\u0002\u0002",
    "\u0172\u0163\u0003\u0002\u0002\u0002\u0172\u0166\u0003\u0002\u0002\u0002",
    "\u0172\u0169\u0003\u0002\u0002\u0002\u0172\u016c\u0003\u0002\u0002\u0002",
    "\u0172\u016f\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u0007\u0007\u0002\u0002\u0175\u0177\u0003\u0002\u0002\u0002",
    "\u0176\u0150\u0003\u0002\u0002\u0002\u0176\u0153\u0003\u0002\u0002\u0002",
    "\u0177/\u0003\u0002\u0002\u0002\u0178\u0179\u00052\u001a\u0002\u0179",
    "\u017a\b\u0019\u0001\u0002\u017a\u017f\u0003\u0002\u0002\u0002\u017b",
    "\u017c\u00054\u001b\u0002\u017c\u017d\b\u0019\u0001\u0002\u017d\u017f",
    "\u0003\u0002\u0002\u0002\u017e\u0178\u0003\u0002\u0002\u0002\u017e\u017b",
    "\u0003\u0002\u0002\u0002\u017f1\u0003\u0002\u0002\u0002\u0180\u0181",
    "\u0007\u0012\u0002\u0002\u0181\u0182\u0005\u0010\t\u0002\u0182\u0183",
    "\u0007\u0013\u0002\u0002\u0183\u0184\u0005\u0010\t\u0002\u0184\u0185",
    "\u0007\u0014\u0002\u0002\u0185\u0186\u0005\u0010\t\u0002\u0186\u0187",
    "\b\u001a\u0001\u0002\u01873\u0003\u0002\u0002\u0002\u0188\u0189\u0007",
    "\u0017\u0002\u0002\u0189\u018a\u0005\u0012\n\u0002\u018a\u018b\b\u001b",
    "\u0001\u0002\u018b\u018c\u0007\u0018\u0002\u0002\u018c\u018d\u0005\u0010",
    "\t\u0002\u018d\u018e\b\u001b\u0001\u0002\u018e5\u0003\u0002\u0002\u0002",
    "\u018f\u0190\u0007)\u0002\u0002\u0190\u0191\b\u001c\u0001\u0002\u0191",
    "7\u0003\u0002\u0002\u0002\u0192\u0193\u0007*\u0002\u0002\u0193\u0194",
    "\b\u001d\u0001\u0002\u01949\u0003\u0002\u0002\u0002\u0195\u019a\u0005",
    "\u0010\t\u0002\u0196\u0197\u0007,\u0002\u0002\u0197\u019b\b\u001e\u0001",
    "\u0002\u0198\u0199\u0007-\u0002\u0002\u0199\u019b\b\u001e\u0001\u0002",
    "\u019a\u0196\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019d\u0005\u0010\t\u0002",
    "\u019d\u019e\b\u001e\u0001\u0002\u019e;\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0007+\u0002\u0002\u01a0\u01a1\u0005\u0010\t\u0002\u01a1\u01a2",
    "\b\u001f\u0001\u0002\u01a2=\u0003\u0002\u0002\u0002\u01a3\u01a8\u0005",
    "\u0010\t\u0002\u01a4\u01a5\u00072\u0002\u0002\u01a5\u01a9\b \u0001\u0002",
    "\u01a6\u01a7\u00073\u0002\u0002\u01a7\u01a9\b \u0001\u0002\u01a8\u01a4",
    "\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0005\u0010\t\u0002\u01ab\u01ac",
    "\b \u0001\u0002\u01ac?\u0003\u0002\u0002\u0002\u01ad\u01ba\u0005\u0010",
    "\t\u0002\u01ae\u01af\u00074\u0002\u0002\u01af\u01bb\b!\u0001\u0002\u01b0",
    "\u01b1\u00075\u0002\u0002\u01b1\u01bb\b!\u0001\u0002\u01b2\u01b3\u0007",
    "/\u0002\u0002\u01b3\u01bb\b!\u0001\u0002\u01b4\u01b5\u00071\u0002\u0002",
    "\u01b5\u01bb\b!\u0001\u0002\u01b6\u01b7\u0007.\u0002\u0002\u01b7\u01bb",
    "\b!\u0001\u0002\u01b8\u01b9\u00070\u0002\u0002\u01b9\u01bb\b!\u0001",
    "\u0002\u01ba\u01ae\u0003\u0002\u0002\u0002\u01ba\u01b0\u0003\u0002\u0002",
    "\u0002\u01ba\u01b2\u0003\u0002\u0002\u0002\u01ba\u01b4\u0003\u0002\u0002",
    "\u0002\u01ba\u01b6\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002",
    "\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0005\u0010\t",
    "\u0002\u01bd\u01be\b!\u0001\u0002\u01beA\u0003\u0002\u0002\u0002\u01bf",
    "\u01c0\u0005D#\u0002\u01c0\u01c1\b\"\u0001\u0002\u01c1\u01d8\u0003\u0002",
    "\u0002\u0002\u01c2\u01c3\u0005F$\u0002\u01c3\u01c4\b\"\u0001\u0002\u01c4",
    "\u01d8\u0003\u0002\u0002\u0002\u01c5\u01c6\u0005H%\u0002\u01c6\u01c7",
    "\b\"\u0001\u0002\u01c7\u01d8\u0003\u0002\u0002\u0002\u01c8\u01c9\u0005",
    "J&\u0002\u01c9\u01ca\b\"\u0001\u0002\u01ca\u01d8\u0003\u0002\u0002\u0002",
    "\u01cb\u01cc\u0005L\'\u0002\u01cc\u01cd\b\"\u0001\u0002\u01cd\u01d8",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0005N(\u0002\u01cf\u01d0\b\"\u0001",
    "\u0002\u01d0\u01d8\u0003\u0002\u0002\u0002\u01d1\u01d2\u0005P)\u0002",
    "\u01d2\u01d3\b\"\u0001\u0002\u01d3\u01d8\u0003\u0002\u0002\u0002\u01d4",
    "\u01d5\u0005R*\u0002\u01d5\u01d6\b\"\u0001\u0002\u01d6\u01d8\u0003\u0002",
    "\u0002\u0002\u01d7\u01bf\u0003\u0002\u0002\u0002\u01d7\u01c2\u0003\u0002",
    "\u0002\u0002\u01d7\u01c5\u0003\u0002\u0002\u0002\u01d7\u01c8\u0003\u0002",
    "\u0002\u0002\u01d7\u01cb\u0003\u0002\u0002\u0002\u01d7\u01ce\u0003\u0002",
    "\u0002\u0002\u01d7\u01d1\u0003\u0002\u0002\u0002\u01d7\u01d4\u0003\u0002",
    "\u0002\u0002\u01d8C\u0003\u0002\u0002\u0002\u01d9\u01da\u0005\u0010",
    "\t\u0002\u01da\u01ef\b#\u0001\u0002\u01db\u01dc\u00076\u0002\u0002\u01dc",
    "\u01dd\u0005\u0010\t\u0002\u01dd\u01de\b#\u0001\u0002\u01de\u01e0\u0003",
    "\u0002\u0002\u0002\u01df\u01db\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003",
    "\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\b",
    "#\u0001\u0002\u01e4\u01f0\u0003\u0002\u0002\u0002\u01e5\u01e6\u0007",
    "8\u0002\u0002\u01e6\u01e7\u0005\u0010\t\u0002\u01e7\u01e8\b#\u0001\u0002",
    "\u01e8\u01ea\u0003\u0002\u0002\u0002\u01e9\u01e5\u0003\u0002\u0002\u0002",
    "\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002",
    "\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\b#\u0001\u0002\u01ee\u01f0\u0003\u0002\u0002\u0002\u01ef",
    "\u01df\u0003\u0002\u0002\u0002\u01ef\u01e9\u0003\u0002\u0002\u0002\u01f0",
    "\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2\b#\u0001\u0002\u01f2E\u0003",
    "\u0002\u0002\u0002\u01f3\u01fa\u0005\u0010\t\u0002\u01f4\u01f5\u0007",
    "7\u0002\u0002\u01f5\u01fb\b$\u0001\u0002\u01f6\u01f7\u00079\u0002\u0002",
    "\u01f7\u01fb\b$\u0001\u0002\u01f8\u01f9\u0007:\u0002\u0002\u01f9\u01fb",
    "\b$\u0001\u0002\u01fa\u01f4\u0003\u0002\u0002\u0002\u01fa\u01f6\u0003",
    "\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003",
    "\u0002\u0002\u0002\u01fc\u01fd\u0005\u0010\t\u0002\u01fd\u01fe\b$\u0001",
    "\u0002\u01fe\u0204\u0003\u0002\u0002\u0002\u01ff\u0200\u0005\u0010\t",
    "\u0002\u0200\u0201\u0007h\u0002\u0002\u0201\u0202\b$\u0001\u0002\u0202",
    "\u0204\u0003\u0002\u0002\u0002\u0203\u01f3\u0003\u0002\u0002\u0002\u0203",
    "\u01ff\u0003\u0002\u0002\u0002\u0204G\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0007G\u0002\u0002\u0206\u020a\b%\u0001\u0002\u0207\u0208\u0007",
    "H\u0002\u0002\u0208\u020a\b%\u0001\u0002\u0209\u0205\u0003\u0002\u0002",
    "\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002",
    "\u0002\u020b\u020c\u0005\u0010\t\u0002\u020c\u0210\b%\u0001\u0002\u020d",
    "\u020e\u0005\u0010\t\u0002\u020e\u020f\b%\u0001\u0002\u020f\u0211\u0003",
    "\u0002\u0002\u0002\u0210\u020d\u0003\u0002\u0002\u0002\u0211\u0212\u0003",
    "\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0213\u0003",
    "\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0215\b",
    "%\u0001\u0002\u0215I\u0003\u0002\u0002\u0002\u0216\u0217\u0007;\u0002",
    "\u0002\u0217\u0227\b&\u0001\u0002\u0218\u0219\u0007<\u0002\u0002\u0219",
    "\u0227\b&\u0001\u0002\u021a\u021b\u0007=\u0002\u0002\u021b\u0227\b&",
    "\u0001\u0002\u021c\u021d\u0007>\u0002\u0002\u021d\u0227\b&\u0001\u0002",
    "\u021e\u021f\u0007?\u0002\u0002\u021f\u0227\b&\u0001\u0002\u0220\u0221",
    "\u0007@\u0002\u0002\u0221\u0227\b&\u0001\u0002\u0222\u0223\u0007A\u0002",
    "\u0002\u0223\u0227\b&\u0001\u0002\u0224\u0225\u0007B\u0002\u0002\u0225",
    "\u0227\b&\u0001\u0002\u0226\u0216\u0003\u0002\u0002\u0002\u0226\u0218",
    "\u0003\u0002\u0002\u0002\u0226\u021a\u0003\u0002\u0002\u0002\u0226\u021c",
    "\u0003\u0002\u0002\u0002\u0226\u021e\u0003\u0002\u0002\u0002\u0226\u0220",
    "\u0003\u0002\u0002\u0002\u0226\u0222\u0003\u0002\u0002\u0002\u0226\u0224",
    "\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u0229",
    "\u0005\u0010\t\u0002\u0229\u022a\b&\u0001\u0002\u022aK\u0003\u0002\u0002",
    "\u0002\u022b\u022c\u0007I\u0002\u0002\u022c\u022d\u0005\u0010\t\u0002",
    "\u022d\u022e\u00079\u0002\u0002\u022e\u022f\u0005\u0010\t\u0002\u022f",
    "\u0230\b\'\u0001\u0002\u0230M\u0003\u0002\u0002\u0002\u0231\u0232\u0007",
    "J\u0002\u0002\u0232\u0233\u0005\u0010\t\u0002\u0233\u0234\u00079\u0002",
    "\u0002\u0234\u0235\u0005\u0010\t\u0002\u0235\u0236\b(\u0001\u0002\u0236",
    "O\u0003\u0002\u0002\u0002\u0237\u0238\u0007K\u0002\u0002\u0238\u0239",
    "\u0005\u0010\t\u0002\u0239\u023a\u00079\u0002\u0002\u023a\u023b\u0005",
    "\u0010\t\u0002\u023b\u023c\b)\u0001\u0002\u023cQ\u0003\u0002\u0002\u0002",
    "\u023d\u023e\u0007P\u0002\u0002\u023e\u024a\b*\u0001\u0002\u023f\u0240",
    "\u0007Q\u0002\u0002\u0240\u024a\b*\u0001\u0002\u0241\u0242\u0007R\u0002",
    "\u0002\u0242\u024a\b*\u0001\u0002\u0243\u0244\u0007S\u0002\u0002\u0244",
    "\u024a\b*\u0001\u0002\u0245\u0246\u0007T\u0002\u0002\u0246\u024a\b*",
    "\u0001\u0002\u0247\u0248\u0007U\u0002\u0002\u0248\u024a\b*\u0001\u0002",
    "\u0249\u023d\u0003\u0002\u0002\u0002\u0249\u023f\u0003\u0002\u0002\u0002",
    "\u0249\u0241\u0003\u0002\u0002\u0002\u0249\u0243\u0003\u0002\u0002\u0002",
    "\u0249\u0245\u0003\u0002\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0005\u0010\t\u0002",
    "\u024c\u024d\b*\u0001\u0002\u024dS\u0003\u0002\u0002\u0002\u024e\u024f",
    "\u0007O\u0002\u0002\u024f\u0250\u0005\u0010\t\u0002\u0250\u0251\b+\u0001",
    "\u0002\u0251U\u0003\u0002\u0002\u0002\u0252\u0253\u0005Z.\u0002\u0253",
    "\u0254\b,\u0001\u0002\u0254\u0259\u0003\u0002\u0002\u0002\u0255\u0256",
    "\u0005X-\u0002\u0256\u0257\b,\u0001\u0002\u0257\u0259\u0003\u0002\u0002",
    "\u0002\u0258\u0252\u0003\u0002\u0002\u0002\u0258\u0255\u0003\u0002\u0002",
    "\u0002\u0259W\u0003\u0002\u0002\u0002\u025a\u025b\u0007D\u0002\u0002",
    "\u025b\u025c\u0005\u0010\t\u0002\u025c\u025d\b-\u0001\u0002\u025dY\u0003",
    "\u0002\u0002\u0002\u025e\u025f\u0007C\u0002\u0002\u025f\u0260\u0005",
    "\u0010\t\u0002\u0260\u0264\b.\u0001\u0002\u0261\u0262\u0005\u0010\t",
    "\u0002\u0262\u0263\b.\u0001\u0002\u0263\u0265\u0003\u0002\u0002\u0002",
    "\u0264\u0261\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266\u0264\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002",
    "\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u0269\b.\u0001\u0002\u0269",
    "[\u0003\u0002\u0002\u0002\u026a\u026b\u0005^0\u0002\u026b\u026c\b/\u0001",
    "\u0002\u026c]\u0003\u0002\u0002\u0002\u026d\u0279\u0007j\u0002\u0002",
    "\u026e\u026f\u0007\u0006\u0002\u0002\u026f\u0272\u0007\u001b\u0002\u0002",
    "\u0270\u0271\u0007\u001d\u0002\u0002\u0271\u0273\b0\u0001\u0002\u0272",
    "\u0270\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0003\u0002\u0002\u0002\u0274\u0275\u0007j\u0002\u0002\u0275",
    "\u0276\u0007\u0007\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277",
    "\u0279\b0\u0001\u0002\u0278\u026d\u0003\u0002\u0002\u0002\u0278\u026e",
    "\u0003\u0002\u0002\u0002\u0279_\u0003\u0002\u0002\u0002\u027a\u0281",
    "\u0007\'\u0002\u0002\u027b\u027c\u0007(\u0002\u0002\u027c\u027d\u0007",
    "j\u0002\u0002\u027d\u027e\u0007\u0019\u0002\u0002\u027e\u027f\u0005",
    "\u0010\t\u0002\u027f\u0280\b1\u0001\u0002\u0280\u0282\u0003\u0002\u0002",
    "\u0002\u0281\u027b\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002",
    "\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002",
    "\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0286\b1\u0001\u0002",
    "\u0286\u0287\u0007\u001e\u0002\u0002\u0287\u0288\u0005\u0010\t\u0002",
    "\u0288\u0289\b1\u0001\u0002\u0289a\u0003\u0002\u0002\u0002\u028a\u028b",
    "\u0005d3\u0002\u028b\u028c\b2\u0001\u0002\u028cc\u0003\u0002\u0002\u0002",
    "\u028d\u028e\u0007X\u0002\u0002\u028e\u02a8\b3\u0001\u0002\u028f\u0290",
    "\u0007Y\u0002\u0002\u0290\u02a8\b3\u0001\u0002\u0291\u0292\u0007Z\u0002",
    "\u0002\u0292\u02a8\b3\u0001\u0002\u0293\u0294\u0007[\u0002\u0002\u0294",
    "\u02a8\b3\u0001\u0002\u0295\u0296\u0007\\\u0002\u0002\u0296\u02a8\b",
    "3\u0001\u0002\u0297\u0298\u0007]\u0002\u0002\u0298\u02a8\b3\u0001\u0002",
    "\u0299\u029a\u0007^\u0002\u0002\u029a\u02a8\b3\u0001\u0002\u029b\u029c",
    "\u0007_\u0002\u0002\u029c\u02a8\b3\u0001\u0002\u029d\u029e\u0007`\u0002",
    "\u0002\u029e\u02a8\b3\u0001\u0002\u029f\u02a0\u0007a\u0002\u0002\u02a0",
    "\u02a8\b3\u0001\u0002\u02a1\u02a2\u0007b\u0002\u0002\u02a2\u02a8\b3",
    "\u0001\u0002\u02a3\u02a4\u0007c\u0002\u0002\u02a4\u02a8\b3\u0001\u0002",
    "\u02a5\u02a6\u0007d\u0002\u0002\u02a6\u02a8\b3\u0001\u0002\u02a7\u028d",
    "\u0003\u0002\u0002\u0002\u02a7\u028f\u0003\u0002\u0002\u0002\u02a7\u0291",
    "\u0003\u0002\u0002\u0002\u02a7\u0293\u0003\u0002\u0002\u0002\u02a7\u0295",
    "\u0003\u0002\u0002\u0002\u02a7\u0297\u0003\u0002\u0002\u0002\u02a7\u0299",
    "\u0003\u0002\u0002\u0002\u02a7\u029b\u0003\u0002\u0002\u0002\u02a7\u029d",
    "\u0003\u0002\u0002\u0002\u02a7\u029f\u0003\u0002\u0002\u0002\u02a7\u02a1",
    "\u0003\u0002\u0002\u0002\u02a7\u02a3\u0003\u0002\u0002\u0002\u02a7\u02a5",
    "\u0003\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02aa",
    "\b3\u0001\u0002\u02aae\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007W\u0002",
    "\u0002\u02ac\u02ad\u0005\u0010\t\u0002\u02ad\u02ae\b4\u0001\u0002\u02ae",
    "g\u0003\u0002\u0002\u0002\u02af\u02b5\t\u0002\u0002\u0002\u02b0\u02b1",
    "\u0005\u0010\t\u0002\u02b1\u02b2\b5\u0001\u0002\u02b2\u02b4\u0003\u0002",
    "\u0002\u0002\u02b3\u02b0\u0003\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002",
    "\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002",
    "\u0002\u0002\u02b6\u02b8\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002",
    "\u0002\u0002\u02b8\u02b9\b5\u0001\u0002\u02b9i\u0003\u0002\u0002\u0002",
    "\u02ba\u02bc\u0007\u001a\u0002\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002",
    "\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02c5\u0003\u0002\u0002\u0002",
    "\u02bd\u02be\u0007j\u0002\u0002\u02be\u02c6\b6\u0001\u0002\u02bf\u02c0",
    "\u0007j\u0002\u0002\u02c0\u02c1\u0007\f\u0002\u0002\u02c1\u02c2\u0007",
    "j\u0002\u0002\u02c2\u02c3\b6\u0001\u0002\u02c3\u02c4\u0003\u0002\u0002",
    "\u0002\u02c4\u02c6\b6\u0001\u0002\u02c5\u02bd\u0003\u0002\u0002\u0002",
    "\u02c5\u02bf\u0003\u0002\u0002\u0002\u02c6k\u0003\u0002\u0002\u0002",
    "\u02c7\u02c8\u0007j\u0002\u0002\u02c8\u02c9\b7\u0001\u0002\u02c9m\u0003",
    "\u0002\u0002\u0002\u02ca\u02cb\u0007g\u0002\u0002\u02cb\u02d7\b8\u0001",
    "\u0002\u02cc\u02cd\u0007h\u0002\u0002\u02cd\u02d7\b8\u0001\u0002\u02ce",
    "\u02cf\u0007k\u0002\u0002\u02cf\u02d7\b8\u0001\u0002\u02d0\u02d1\u0007",
    "\u000f\u0002\u0002\u02d1\u02d7\b8\u0001\u0002\u02d2\u02d3\u0007\u0010",
    "\u0002\u0002\u02d3\u02d7\b8\u0001\u0002\u02d4\u02d5\u0007i\u0002\u0002",
    "\u02d5\u02d7\b8\u0001\u0002\u02d6\u02ca\u0003\u0002\u0002\u0002\u02d6",
    "\u02cc\u0003\u0002\u0002\u0002\u02d6\u02ce\u0003\u0002\u0002\u0002\u02d6",
    "\u02d0\u0003\u0002\u0002\u0002\u02d6\u02d2\u0003\u0002\u0002\u0002\u02d6",
    "\u02d4\u0003\u0002\u0002\u0002\u02d7o\u0003\u0002\u0002\u0002.u\u008b",
    "\u009b\u00a9\u00c1\u00c8\u00cd\u00de\u00e6\u00f8\u00ff\u0101\u0117\u0122",
    "\u012a\u0134\u013a\u0149\u0172\u0176\u017e\u019a\u01a8\u01ba\u01d7\u01e1",
    "\u01eb\u01ef\u01fa\u0203\u0209\u0212\u0226\u0249\u0258\u0266\u0272\u0278",
    "\u0283\u02a7\u02b5\u02bb\u02c5\u02d6"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "','", "'==='", "'.'", "'<-'", "':'", "'true'", "'false'", 
                     "'when'", "'if'", "'then'", "'else'", "'else if'", 
                     "'forEach'", "'do'", "'result'", "'to'", "'call'", 
                     "'get'", "'set'", "'global'", "'in'", "'by'", "'from'", 
                     "'while'", "'test'", "'evaluateButIgnoreResult'", "'openAnotherScreen'", 
                     "'closeScreen'", "'closeApplication'", "'initialize'", 
                     "'local'", "'getStartValue'", "'getPlainStartText'", 
                     "'not'", "'and'", "'or'", "'<'", "'>'", "'<='", "'>='", 
                     "'equals'", "'not_equals'", "'='", "'!='", "'+'", "'-'", 
                     "'*'", "'/'", "'^'", "'sqrt'", "'absolute'", "'neg'", 
                     "'log'", "'e^'", "'round'", "'ceiling'", "'floor'", 
                     "'join'", "'length'", "'randomInteger'", "'randomFraction'", 
                     "'min'", "'max'", "'moduloOf'", "'remainderOf'", "'quotientOf'", 
                     "'radiansToDegrees'", "'degreesToRadians'", "'formatAsDecimal'", 
                     "'isNumber'", "'sin'", "'cos'", "'tan'", "'asin'", 
                     "'acos'", "'atan'", "'color'", "'make_color'", "'black'", 
                     "'blue'", "'white'", "'magenta'", "'red'", "'light_gray'", 
                     "'pink'", "'gray'", "'orange'", "'dark_gray'", "'yellow'", 
                     "'green'", "'cyan'", "'make_a_list'", "'list'" ];

var symbolicNames = [ null, "WS", "LCURLY", "RCURLY", "LPAREN", "RPAREN", 
                      "LSQR", "RSQR", "COMMA", "DIVIDER", "DOT", "ASSIGN", 
                      "COLON", "TRUE", "FALSE", "WHEN", "IF", "THEN", "ELSE", 
                      "ELSE_IF", "FOREACH", "DO", "RESULT", "TO", "CALL", 
                      "GET", "SET", "GLOBAL", "IN", "BY", "FROM", "WHILE", 
                      "TEST", "EVAL_BUT_IGNORE_RESULT", "OPEN_ANOTHER_SCREEN", 
                      "CLOSE_SCREEN", "CLOSE_APPLICATION", "INITIALIZE", 
                      "LOCAL", "GET_START_VALUE", "GET_PLAIN_START_TEXT", 
                      "NOT", "AND", "OR", "LT", "GT", "LE", "GE", "LOGIC_EQ", 
                      "LOGIC_NOT_EQ", "EQ", "NEQ", "PLUS", "MINUS", "MUL", 
                      "DIV", "POW", "SQRT", "ABS", "NEG", "LOG", "EULER", 
                      "ROUND", "CEILING", "FLOOR", "JOIN", "LENGTH", "RANDOM_INTEGER", 
                      "RANDOM_FRACTION", "MIN", "MAX", "MOD_OF", "REMAINDER_OF", 
                      "QUOTIENT_OF", "RAD_TO_DEG", "DEG_TO_RAD", "FORMAT_AS_DEC", 
                      "IS_NUM", "SIN", "COS", "TAN", "ASIN", "ACOS", "ATAN", 
                      "COLOR", "MAKE_COLOR", "BLACK", "BLUE", "WHITE", "MAGENTA", 
                      "RED", "LIGHT_GRAY", "PINK", "GRAY", "ORANGE", "DARK_GRAY", 
                      "YELLOW", "GREEN", "CYAN", "MAKE_LIST", "LIST", "NUMBER", 
                      "NEG_NUM", "COMPONENT_PROPERTY", "ID", "STRING" ];

var ruleNames =  [ "program", "decl_block", "decl", "global_decl", "procedure_do", 
                   "procedure_result", "event_handler", "expr_block", "suite", 
                   "stat_block", "stat", "control_stat", "if_stat", "while_stat", 
                   "evaluate_but_ignore", "open_screen", "close_screen", 
                   "close_application", "call_procedure_stat", "var_stat", 
                   "setter", "local_init_stat", "expr", "control_expr", 
                   "if_expr", "do_expr", "get_screen_val", "get_screen_text", 
                   "logic_expr", "not_expr", "compare_eq_expr", "compare_math_expr", 
                   "math_expr", "mutable_op", "immutable_op", "min_max", 
                   "unary_op", "mod", "remainder", "quotient", "trig", "is_num", 
                   "str_expr", "str_length", "str_join", "var_expr", "getter", 
                   "local_init_expr", "color_block", "color", "make_color", 
                   "list_expr", "call_procedure_expr", "variable", "atom" ];

function VenbraceParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


		var errors = [];
	  // var tokens = [];

	  // VenbraceParser.prototype.match = function(ttype) {
	  //   tokens.push(antlr4.Parser.prototype.getCurrentToken());
	  //   //antlr4.Parser.prototype.match(ttype);
	  // }

	  // VenbraceParser.prototype.getAllTokens = function() {
	  //   return tokens;
	  // }

	  VenbraceParser.prototype.emitErrorMessage = function(error) {
	        //var hdr = getErrorHeader(e);
	        //var msg = getErrorMessage(e, tokenNames);
	        errors.push(error);
	    };
	  VenbraceParser.prototype.getErrors = function() {
	        return errors;
	    };
	  VenbraceParser.prototype.recoverFromMismatchedToken = function(input, ttype, follow){
	  	throw new antlr4.runtime.MismatchedTokenException(ttype, input);
	  }

	  document.createVenbraceElement = function (tagName) {
	        var element = document.createElement(tagName);
	        element.appendChildReal = element.appendChild; // save original appendChild method
	        element.appendChild = function (child) { 
	          if (child) {
	            element.appendChildReal(child); // Only append child if not null
	          } 
	        };
	        return element;
	    }


	  // VenbraceException = function(msg) {
	  //   VenbraceException.superclass.constructor.call(this, msg);
	  //   this.message = msg;
	  // };
	  // antlr4.error.extend(VenbraceException, Error, {
	  //   name: "antlr4.runtime.VenbraceException"
	  // });  

	  // VenbraceParser.prototype.isValidComponentName = function(componentName){
	  // 	var componentInstance = Blockly.ComponentInstances[componentName];
	  // 	//from appinventor/blocklyeditor/src/component.js
	  // 	return (typeof componentInstance == "object" && componentInstance.uid != null);
	  // };
	  // VenbraceParser.prototype.isValidComponentFieldName = function(fields, componentType, fieldName){
	  // 	//I am using "field" as a general name for event, property or method
	  // 	//fields should be of the form "events", "properties", or "methods"
	  // 	var componentInfo = Blockly.ComponentTypes[componentType].componentInfo;
		// 	var componentFields = componentInfo[fields];
		// 	for (var i = 0; i<componentFields.length; i++){
		// 		if(componentFields[i].name === fieldName){
		// 			return true;
		// 		}
		// 	}
		// 	return false;
	  // };

    return this;
}

VenbraceParser.prototype = Object.create(antlr4.Parser.prototype);
VenbraceParser.prototype.constructor = VenbraceParser;

Object.defineProperty(VenbraceParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

VenbraceParser.EOF = antlr4.Token.EOF;
VenbraceParser.WS = 1;
VenbraceParser.LCURLY = 2;
VenbraceParser.RCURLY = 3;
VenbraceParser.LPAREN = 4;
VenbraceParser.RPAREN = 5;
VenbraceParser.LSQR = 6;
VenbraceParser.RSQR = 7;
VenbraceParser.COMMA = 8;
VenbraceParser.DIVIDER = 9;
VenbraceParser.DOT = 10;
VenbraceParser.ASSIGN = 11;
VenbraceParser.COLON = 12;
VenbraceParser.TRUE = 13;
VenbraceParser.FALSE = 14;
VenbraceParser.WHEN = 15;
VenbraceParser.IF = 16;
VenbraceParser.THEN = 17;
VenbraceParser.ELSE = 18;
VenbraceParser.ELSE_IF = 19;
VenbraceParser.FOREACH = 20;
VenbraceParser.DO = 21;
VenbraceParser.RESULT = 22;
VenbraceParser.TO = 23;
VenbraceParser.CALL = 24;
VenbraceParser.GET = 25;
VenbraceParser.SET = 26;
VenbraceParser.GLOBAL = 27;
VenbraceParser.IN = 28;
VenbraceParser.BY = 29;
VenbraceParser.FROM = 30;
VenbraceParser.WHILE = 31;
VenbraceParser.TEST = 32;
VenbraceParser.EVAL_BUT_IGNORE_RESULT = 33;
VenbraceParser.OPEN_ANOTHER_SCREEN = 34;
VenbraceParser.CLOSE_SCREEN = 35;
VenbraceParser.CLOSE_APPLICATION = 36;
VenbraceParser.INITIALIZE = 37;
VenbraceParser.LOCAL = 38;
VenbraceParser.GET_START_VALUE = 39;
VenbraceParser.GET_PLAIN_START_TEXT = 40;
VenbraceParser.NOT = 41;
VenbraceParser.AND = 42;
VenbraceParser.OR = 43;
VenbraceParser.LT = 44;
VenbraceParser.GT = 45;
VenbraceParser.LE = 46;
VenbraceParser.GE = 47;
VenbraceParser.LOGIC_EQ = 48;
VenbraceParser.LOGIC_NOT_EQ = 49;
VenbraceParser.EQ = 50;
VenbraceParser.NEQ = 51;
VenbraceParser.PLUS = 52;
VenbraceParser.MINUS = 53;
VenbraceParser.MUL = 54;
VenbraceParser.DIV = 55;
VenbraceParser.POW = 56;
VenbraceParser.SQRT = 57;
VenbraceParser.ABS = 58;
VenbraceParser.NEG = 59;
VenbraceParser.LOG = 60;
VenbraceParser.EULER = 61;
VenbraceParser.ROUND = 62;
VenbraceParser.CEILING = 63;
VenbraceParser.FLOOR = 64;
VenbraceParser.JOIN = 65;
VenbraceParser.LENGTH = 66;
VenbraceParser.RANDOM_INTEGER = 67;
VenbraceParser.RANDOM_FRACTION = 68;
VenbraceParser.MIN = 69;
VenbraceParser.MAX = 70;
VenbraceParser.MOD_OF = 71;
VenbraceParser.REMAINDER_OF = 72;
VenbraceParser.QUOTIENT_OF = 73;
VenbraceParser.RAD_TO_DEG = 74;
VenbraceParser.DEG_TO_RAD = 75;
VenbraceParser.FORMAT_AS_DEC = 76;
VenbraceParser.IS_NUM = 77;
VenbraceParser.SIN = 78;
VenbraceParser.COS = 79;
VenbraceParser.TAN = 80;
VenbraceParser.ASIN = 81;
VenbraceParser.ACOS = 82;
VenbraceParser.ATAN = 83;
VenbraceParser.COLOR = 84;
VenbraceParser.MAKE_COLOR = 85;
VenbraceParser.BLACK = 86;
VenbraceParser.BLUE = 87;
VenbraceParser.WHITE = 88;
VenbraceParser.MAGENTA = 89;
VenbraceParser.RED = 90;
VenbraceParser.LIGHT_GRAY = 91;
VenbraceParser.PINK = 92;
VenbraceParser.GRAY = 93;
VenbraceParser.ORANGE = 94;
VenbraceParser.DARK_GRAY = 95;
VenbraceParser.YELLOW = 96;
VenbraceParser.GREEN = 97;
VenbraceParser.CYAN = 98;
VenbraceParser.MAKE_LIST = 99;
VenbraceParser.LIST = 100;
VenbraceParser.NUMBER = 101;
VenbraceParser.NEG_NUM = 102;
VenbraceParser.COMPONENT_PROPERTY = 103;
VenbraceParser.ID = 104;
VenbraceParser.STRING = 105;

VenbraceParser.RULE_program = 0;
VenbraceParser.RULE_decl_block = 1;
VenbraceParser.RULE_decl = 2;
VenbraceParser.RULE_global_decl = 3;
VenbraceParser.RULE_procedure_do = 4;
VenbraceParser.RULE_procedure_result = 5;
VenbraceParser.RULE_event_handler = 6;
VenbraceParser.RULE_expr_block = 7;
VenbraceParser.RULE_suite = 8;
VenbraceParser.RULE_stat_block = 9;
VenbraceParser.RULE_stat = 10;
VenbraceParser.RULE_control_stat = 11;
VenbraceParser.RULE_if_stat = 12;
VenbraceParser.RULE_while_stat = 13;
VenbraceParser.RULE_evaluate_but_ignore = 14;
VenbraceParser.RULE_open_screen = 15;
VenbraceParser.RULE_close_screen = 16;
VenbraceParser.RULE_close_application = 17;
VenbraceParser.RULE_call_procedure_stat = 18;
VenbraceParser.RULE_var_stat = 19;
VenbraceParser.RULE_setter = 20;
VenbraceParser.RULE_local_init_stat = 21;
VenbraceParser.RULE_expr = 22;
VenbraceParser.RULE_control_expr = 23;
VenbraceParser.RULE_if_expr = 24;
VenbraceParser.RULE_do_expr = 25;
VenbraceParser.RULE_get_screen_val = 26;
VenbraceParser.RULE_get_screen_text = 27;
VenbraceParser.RULE_logic_expr = 28;
VenbraceParser.RULE_not_expr = 29;
VenbraceParser.RULE_compare_eq_expr = 30;
VenbraceParser.RULE_compare_math_expr = 31;
VenbraceParser.RULE_math_expr = 32;
VenbraceParser.RULE_mutable_op = 33;
VenbraceParser.RULE_immutable_op = 34;
VenbraceParser.RULE_min_max = 35;
VenbraceParser.RULE_unary_op = 36;
VenbraceParser.RULE_mod = 37;
VenbraceParser.RULE_remainder = 38;
VenbraceParser.RULE_quotient = 39;
VenbraceParser.RULE_trig = 40;
VenbraceParser.RULE_is_num = 41;
VenbraceParser.RULE_str_expr = 42;
VenbraceParser.RULE_str_length = 43;
VenbraceParser.RULE_str_join = 44;
VenbraceParser.RULE_var_expr = 45;
VenbraceParser.RULE_getter = 46;
VenbraceParser.RULE_local_init_expr = 47;
VenbraceParser.RULE_color_block = 48;
VenbraceParser.RULE_color = 49;
VenbraceParser.RULE_make_color = 50;
VenbraceParser.RULE_list_expr = 51;
VenbraceParser.RULE_call_procedure_expr = 52;
VenbraceParser.RULE_variable = 53;
VenbraceParser.RULE_atom = 54;

function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_program;
    this.elt = null
    this._decl_block = null; // Decl_blockContext
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(VenbraceParser.EOF, 0);
};

ProgramContext.prototype.decl_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Decl_blockContext);
    } else {
        return this.getTypedRuleContext(Decl_blockContext,i);
    }
};




VenbraceParser.ProgramContext = ProgramContext;

VenbraceParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, VenbraceParser.RULE_program);

      localctx.elt =  document.createVenbraceElement("xml")

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.LSQR) {
            this.state = 110;
            localctx._decl_block = this.decl_block();
            localctx.elt.appendChild(localctx._decl_block.elt);
            this.state = 117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 118;
        this.match(VenbraceParser.EOF);
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Decl_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_decl_block;
    this.elt = null
    this._decl = null; // DeclContext
    return this;
}

Decl_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Decl_blockContext.prototype.constructor = Decl_blockContext;

Decl_blockContext.prototype.LSQR = function() {
    return this.getToken(VenbraceParser.LSQR, 0);
};

Decl_blockContext.prototype.decl = function() {
    return this.getTypedRuleContext(DeclContext,0);
};

Decl_blockContext.prototype.RSQR = function() {
    return this.getToken(VenbraceParser.RSQR, 0);
};




VenbraceParser.Decl_blockContext = Decl_blockContext;

VenbraceParser.prototype.decl_block = function() {

    var localctx = new Decl_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, VenbraceParser.RULE_decl_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 120;
        this.match(VenbraceParser.LSQR);
        this.state = 121;
        localctx._decl = this.decl();
        this.state = 122;
        this.match(VenbraceParser.RSQR);
        localctx.elt =  localctx._decl.elt
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function DeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_decl;
    this.elt = null
    this._global_decl = null; // Global_declContext
    this._procedure_do = null; // Procedure_doContext
    this._procedure_result = null; // Procedure_resultContext
    this._event_handler = null; // Event_handlerContext
    return this;
}

DeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclContext.prototype.constructor = DeclContext;

DeclContext.prototype.global_decl = function() {
    return this.getTypedRuleContext(Global_declContext,0);
};

DeclContext.prototype.procedure_do = function() {
    return this.getTypedRuleContext(Procedure_doContext,0);
};

DeclContext.prototype.procedure_result = function() {
    return this.getTypedRuleContext(Procedure_resultContext,0);
};

DeclContext.prototype.event_handler = function() {
    return this.getTypedRuleContext(Event_handlerContext,0);
};




VenbraceParser.DeclContext = DeclContext;

VenbraceParser.prototype.decl = function() {

    var localctx = new DeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, VenbraceParser.RULE_decl);
    try {
        this.state = 137;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 125;
            localctx._global_decl = this.global_decl();
            localctx.elt =  localctx._global_decl.elt
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 128;
            localctx._procedure_do = this.procedure_do();
            localctx.elt =  localctx._procedure_do.elt
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 131;
            localctx._procedure_result = this.procedure_result();
            localctx.elt =  localctx._procedure_result.elt
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 134;
            localctx._event_handler = this.event_handler();
            localctx.elt =  localctx._event_handler.elt
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Global_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_global_decl;
    this.elt = null
    this._ID = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

Global_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_declContext.prototype.constructor = Global_declContext;

Global_declContext.prototype.INITIALIZE = function() {
    return this.getToken(VenbraceParser.INITIALIZE, 0);
};

Global_declContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};

Global_declContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

Global_declContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Global_declContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Global_declContext = Global_declContext;

VenbraceParser.prototype.global_decl = function() {

    var localctx = new Global_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, VenbraceParser.RULE_global_decl);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","global_declaration");
    	localctx.elt.setAttribute("inline","false");

    	var field = document.createVenbraceElement("field");
    	field.setAttribute("name","NAME");
    	var value = document.createVenbraceElement("value");
    	value.setAttribute("name","VALUE");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 139;
        this.match(VenbraceParser.INITIALIZE);
        this.state = 140;
        this.match(VenbraceParser.GLOBAL);
        this.state = 141;
        localctx._ID = this.match(VenbraceParser.ID);
        this.state = 142;
        this.match(VenbraceParser.TO);
        this.state = 143;
        localctx._expr_block = this.expr_block();

        		field.innerHTML = (localctx._ID===null ? null : localctx._ID.text);
        		value.appendChild(localctx._expr_block.elt);
        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(value);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_doContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_procedure_do;
    this.elt = null
    this.proc_name = null; // Token
    this.arg_name = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

Procedure_doContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_doContext.prototype.constructor = Procedure_doContext;

Procedure_doContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Procedure_doContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Procedure_doContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Procedure_doContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};





VenbraceParser.Procedure_doContext = Procedure_doContext;

VenbraceParser.prototype.procedure_do = function() {

    var localctx = new Procedure_doContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, VenbraceParser.RULE_procedure_do);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","procedures_defnoreturn");

    	var hasMutations = false;
    	var mutation = document.createVenbraceElement("mutation");
    	var argsCount = 0;

    	var name = document.createVenbraceElement("field");
    	name.setAttribute("name","NAME");

    	var var_field_arr = [];

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 146;
        this.match(VenbraceParser.TO);
        this.state = 147;
        localctx.proc_name = this.match(VenbraceParser.ID);
        name.innerHTML = (localctx.proc_name===null ? null : localctx.proc_name.text);
        this.state = 153;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.ID) {
            this.state = 149;
            localctx.arg_name = this.match(VenbraceParser.ID);

                    hasMutations = true;
                    var arg = document.createVenbraceElement("arg");
                    arg.setAttribute("name",(localctx.arg_name===null ? null : localctx.arg_name.text));
                    mutation.appendChild(arg);
                    var var_field = document.createVenbraceElement("field");
                    var_field.setAttribute("name","VAR"+argsCount);
                    var_field.innerHTML = (localctx.arg_name===null ? null : localctx.arg_name.text);
                    var_field_arr.push(var_field);
                    argsCount++;
                  
            this.state = 155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 156;
        this.match(VenbraceParser.DO);
        this.state = 157;
        localctx._suite = this.suite();

              if(hasMutations){
                localctx.elt.appendChild(mutation);
              }
              localctx.elt.appendChild(name);
              for(var i=0; i<var_field_arr.length; i++){
                localctx.elt.appendChild(var_field_arr[i]);
              }
              var seq = localctx._suite.elt;
              seq.setAttribute("name","STACK");
              localctx.elt.appendChild(seq);
            
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_procedure_result;
    this.elt = null
    this.proc_name = null; // Token
    this.arg_name = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

Procedure_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_resultContext.prototype.constructor = Procedure_resultContext;

Procedure_resultContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Procedure_resultContext.prototype.RESULT = function() {
    return this.getToken(VenbraceParser.RESULT, 0);
};

Procedure_resultContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Procedure_resultContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};





VenbraceParser.Procedure_resultContext = Procedure_resultContext;

VenbraceParser.prototype.procedure_result = function() {

    var localctx = new Procedure_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, VenbraceParser.RULE_procedure_result);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","procedures_defreturn");

    	var hasMutations = false;
    	var mutation = document.createVenbraceElement("mutation");
    	var argsCount = 0;

    	var name = document.createVenbraceElement("field");
    	name.setAttribute("name","NAME");

    	var var_field_arr = [];

    	var value = document.createVenbraceElement("value");
    	value.setAttribute("name","RETURN");

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 160;
        this.match(VenbraceParser.TO);
        this.state = 161;
        localctx.proc_name = this.match(VenbraceParser.ID);
        name.innerHTML = (localctx.proc_name===null ? null : localctx.proc_name.text);
        this.state = 167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.ID) {
            this.state = 163;
            localctx.arg_name = this.match(VenbraceParser.ID);

            	 	  hasMutations = true;
            	 	  var arg = document.createVenbraceElement("arg");
            	 	  arg.setAttribute("name",(localctx.arg_name===null ? null : localctx.arg_name.text));
            	 	  mutation.appendChild(arg);
            	 	  var var_field = document.createVenbraceElement("field");
            	 	  var_field.setAttribute("name","VAR"+argsCount);
            	 	  var_field.innerHTML = (localctx.arg_name===null ? null : localctx.arg_name.text);
            	 	  var_field_arr.push(var_field);
            	 	  argsCount++;
            	 	
            this.state = 169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 170;
        this.match(VenbraceParser.RESULT);
        this.state = 171;
        localctx._expr_block = this.expr_block();

        	 	if(hasMutations){
        	 		localctx.elt.appendChild(mutation);
        	 	}
        	 	localctx.elt.appendChild(name);
        	 	for(var i=0; i<var_field_arr.length; i++){
        	 		localctx.elt.appendChild(var_field_arr[i]);
        	 	}
        	 	value.appendChild(localctx._expr_block.elt);
        	 	localctx.elt.appendChild(value);
        	 
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Event_handlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_event_handler;
    this.elt = null
    this._COMPONENT_PROPERTY = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

Event_handlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_handlerContext.prototype.constructor = Event_handlerContext;

Event_handlerContext.prototype.WHEN = function() {
    return this.getToken(VenbraceParser.WHEN, 0);
};

Event_handlerContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};

Event_handlerContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Event_handlerContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};




VenbraceParser.Event_handlerContext = Event_handlerContext;

VenbraceParser.prototype.event_handler = function() {

    var localctx = new Event_handlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, VenbraceParser.RULE_event_handler);

      localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","component_event");
    	var mutation = document.createVenbraceElement("mutation");
    	//mutation.setAttribute("component_type",)
    	//mutation attributes will be set inside the body of the rule
    	//dotted names allow spaces...which we don't want allowed...
    	var field = document.createVenbraceElement("field");
    	field.setAttribute("name","COMPONENT_SELECTOR");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 174;
        this.match(VenbraceParser.WHEN);
        this.state = 175;
        localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);

        		var componentName = (localctx._COMPONENT_PROPERTY===null ? null : localctx._COMPONENT_PROPERTY.text).split(".")[0];
        		var eventName = (localctx._COMPONENT_PROPERTY===null ? null : localctx._COMPONENT_PROPERTY.text).split(".")[1];
        		//var componentInstance = Blockly.ComponentInstances[componentName];
        		//var componentType;
        		//if (this.isValidComponentName(componentName)){
        			//componentType = Blockly.Component.instanceNameToTypeName(componentName);
        			//mutation.setAttribute("component_type", componentType);
              mutation.setAttribute("component_type", "Button"); //hard-coded
        			mutation.setAttribute("instance_name", componentName);
        			field.innerHTML = componentName;
        		//} else {
        			//throw new TAILException("Invalid component name: " + componentName);
        			//this.emitErrorMessage("Invalid component name: " + componentName);
        			//the parser will continue even after this error because syntactically this is still correct...
        		//}
        		//if(this.isValidComponentFieldName("events", componentType, eventName)){
        			mutation.setAttribute("event_name", eventName);
        		//}else{
        		//	throw new VenbraceException("Invalid event name: " + eventName);
        			//this.emitErrorMessage("Invalid event name: " + eventName);
        		//} //no need for else case, we've already added an error to the errors array above

        	
        this.state = 177;
        this.match(VenbraceParser.DO);
        this.state = 178;
        localctx._suite = this.suite();

            var statements = localctx._suite.elt;
            statements.setAttribute("name","DO");

            localctx.elt.appendChild(mutation);
            localctx.elt.appendChild(field);
            localctx.elt.appendChild(statements);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Expr_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_expr_block;
    this.elt = null
    this._atom = null; // AtomContext
    this._expr = null; // ExprContext
    return this;
}

Expr_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_blockContext.prototype.constructor = Expr_blockContext;

Expr_blockContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Expr_blockContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Expr_blockContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Expr_blockContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};




VenbraceParser.Expr_blockContext = Expr_blockContext;

VenbraceParser.prototype.expr_block = function() {

    var localctx = new Expr_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, VenbraceParser.RULE_expr_block);
    try {
        this.state = 191;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 181;
            this.match(VenbraceParser.LPAREN);
            this.state = 182;
            this.match(VenbraceParser.RPAREN);
            localctx.elt =  document.createVenbraceElement("empty_expr")
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 185;
            localctx._atom = this.atom();
            localctx.elt =  localctx._atom.elt
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 188;
            localctx._expr = this.expr();
            localctx.elt =  localctx._expr.elt
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_suite;
    this.elt = null
    this._stat_block = null; // Stat_blockContext
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.stat_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Stat_blockContext);
    } else {
        return this.getTypedRuleContext(Stat_blockContext,i);
    }
};

SuiteContext.prototype.LCURLY = function() {
    return this.getToken(VenbraceParser.LCURLY, 0);
};

SuiteContext.prototype.RCURLY = function() {
    return this.getToken(VenbraceParser.RCURLY, 0);
};




VenbraceParser.SuiteContext = SuiteContext;

VenbraceParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, VenbraceParser.RULE_suite);

    	localctx.elt =  document.createVenbraceElement("suite_begin")
    	var count = 0;
    	var prevStatementBlock;
    	var currentStatementBlock;
    	var stmt_arr = [];

    var _la = 0; // Token type
    try {
        this.state = 203;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 198;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VenbraceParser.LCURLY) {
                this.state = 193;
                localctx._stat_block = this.stat_block();

                		  if (count === 0){ // this is the very first statement
                		  	prevStatementBlock = localctx._stat_block.elt;
                		  	localctx.elt.appendChild(prevStatementBlock);
                		  }else{ //all of the rest of the statement blocks
                		  	var next = document.createVenbraceElement("next");
                		  	var currentStmt = localctx._stat_block.elt;
                		  	next.appendChild(currentStmt);
                		  	prevStatementBlock.appendChild(next);
                		  	prevStatementBlock = currentStmt;
                		  }
                		  count++;
                		
                this.state = 200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 201;
            this.match(VenbraceParser.LCURLY);
            this.state = 202;
            this.match(VenbraceParser.RCURLY);
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Stat_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_stat_block;
    this.elt = null
    this._stat = null; // StatContext
    return this;
}

Stat_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stat_blockContext.prototype.constructor = Stat_blockContext;

Stat_blockContext.prototype.LCURLY = function() {
    return this.getToken(VenbraceParser.LCURLY, 0);
};

Stat_blockContext.prototype.RCURLY = function() {
    return this.getToken(VenbraceParser.RCURLY, 0);
};

Stat_blockContext.prototype.stat = function() {
    return this.getTypedRuleContext(StatContext,0);
};




VenbraceParser.Stat_blockContext = Stat_blockContext;

VenbraceParser.prototype.stat_block = function() {

    var localctx = new Stat_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, VenbraceParser.RULE_stat_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.match(VenbraceParser.LCURLY);

        this.state = 206;
        localctx._stat = this.stat();
        localctx.elt =  localctx._stat.elt
        this.state = 209;
        this.match(VenbraceParser.RCURLY);
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function StatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_stat;
    this.elt = null
    this._control_stat = null; // Control_statContext
    this._call_procedure_stat = null; // Call_procedure_statContext
    this._var_stat = null; // Var_statContext
    return this;
}

StatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatContext.prototype.constructor = StatContext;

StatContext.prototype.control_stat = function() {
    return this.getTypedRuleContext(Control_statContext,0);
};

StatContext.prototype.call_procedure_stat = function() {
    return this.getTypedRuleContext(Call_procedure_statContext,0);
};

StatContext.prototype.var_stat = function() {
    return this.getTypedRuleContext(Var_statContext,0);
};




VenbraceParser.StatContext = StatContext;

VenbraceParser.prototype.stat = function() {

    var localctx = new StatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, VenbraceParser.RULE_stat);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.IF:
        case VenbraceParser.WHILE:
            this.state = 211;
            localctx._control_stat = this.control_stat();
            localctx.elt =  localctx._control_stat.elt
            break;
        case VenbraceParser.CALL:
        case VenbraceParser.ID:
            this.state = 214;
            localctx._call_procedure_stat = this.call_procedure_stat();
            localctx.elt =  localctx._call_procedure_stat.elt
            break;
        case VenbraceParser.SET:
            this.state = 217;
            localctx._var_stat = this.var_stat();
            localctx.elt =  localctx._var_stat.elt
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Control_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_control_stat;
    this.elt = null
    this._if_stat = null; // If_statContext
    this._while_stat = null; // While_statContext
    return this;
}

Control_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_statContext.prototype.constructor = Control_statContext;

Control_statContext.prototype.if_stat = function() {
    return this.getTypedRuleContext(If_statContext,0);
};

Control_statContext.prototype.while_stat = function() {
    return this.getTypedRuleContext(While_statContext,0);
};




VenbraceParser.Control_statContext = Control_statContext;

VenbraceParser.prototype.control_stat = function() {

    var localctx = new Control_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, VenbraceParser.RULE_control_stat);
    try {
        this.state = 228;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 222;
            localctx._if_stat = this.if_stat();
            localctx.elt =  localctx._if_stat.elt
            break;
        case VenbraceParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 225;
            localctx._while_stat = this.while_stat();
            localctx.elt =  localctx._while_stat.elt
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function If_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_if_stat;
    this.elt = null
    this.e1 = null; // Expr_blockContext
    this.s1 = null; // SuiteContext
    this.e2 = null; // Expr_blockContext
    this.s2 = null; // SuiteContext
    this.s3 = null; // SuiteContext
    return this;
}

If_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statContext.prototype.constructor = If_statContext;

If_statContext.prototype.IF = function() {
    return this.getToken(VenbraceParser.IF, 0);
};

If_statContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.THEN);
    } else {
        return this.getToken(VenbraceParser.THEN, i);
    }
};


If_statContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

If_statContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

If_statContext.prototype.ELSE_IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ELSE_IF);
    } else {
        return this.getToken(VenbraceParser.ELSE_IF, i);
    }
};


If_statContext.prototype.ELSE = function() {
    return this.getToken(VenbraceParser.ELSE, 0);
};




VenbraceParser.If_statContext = If_statContext;

VenbraceParser.prototype.if_stat = function() {

    var localctx = new If_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, VenbraceParser.RULE_if_stat);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("inline","false");
    	localctx.elt.setAttribute("type","if_stat");

    	var mutation = document.createVenbraceElement("mutation");
    	var mutations = false;
    	var else_if_count = 0;
    	var else_count = 0;

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 230;
        this.match(VenbraceParser.IF);
        this.state = 231;
        localctx.e1 = this.expr_block();

        		var val = document.createVenbraceElement("value");
        		val.setAttribute("name","IF0");
        		val.appendChild(localctx.e1.elt);
        		localctx.elt.appendChild(val);
        	
        this.state = 233;
        this.match(VenbraceParser.THEN);
        this.state = 234;
        localctx.s1 = this.suite();

        		var then_stmts = localctx.s1.elt;
        		then_stmts.setAttribute("name", "THEN0");
        		//then_stmts.appendChild(localctx.s1.elt);
        		localctx.elt.appendChild(then_stmts);
        	
        this.state = 255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VenbraceParser.ELSE_IF) {
                this.state = 236;
                this.match(VenbraceParser.ELSE_IF);
                mutations = true; else_if_count++;
                this.state = 238;
                localctx.e2 = this.expr_block();

                		var value = document.createVenbraceElement("value");
                		value.setAttribute("name","IF"+else_if_count);
                		value.appendChild(localctx.e2.elt);
                		localctx.elt.appendChild(value);
                	
                this.state = 240;
                this.match(VenbraceParser.THEN);
                this.state = 241;
                localctx.s2 = this.suite();

                		var else_if_stmts = localctx.s2.elt;
                		else_if_stmts.setAttribute("name","THEN"+else_if_count);
                		// else_if_stmts.appendChild(localctx.s2.elt);
                		localctx.elt.appendChild(else_if_stmts);
                	
                this.state = 248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.ELSE) {
                this.state = 249;
                this.match(VenbraceParser.ELSE);
                this.state = 250;
                localctx.s3 = this.suite();

                		mutations = true;
                		else_count++;

                		var else_stmts = localctx.s3.elt;
                		else_stmts.setAttribute("name","ELSE");
                		// else_stmts.appendChild(localctx.s3.elt);
                		localctx.elt.appendChild(else_stmts);
                	
            }


        }

        		if(mutations){
        			if (else_if_count !== 0){
        				mutation.setAttribute("elseif",else_if_count);
        			}
        			if (else_count !== 0){
        				mutation.setAttribute("else",else_count);
        			}
        			localctx.elt.insertBefore(mutation, localctx.elt.firstElementChild);
        		}
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function While_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_while_stat;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    this._suite = null; // SuiteContext
    return this;
}

While_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statContext.prototype.constructor = While_statContext;

While_statContext.prototype.WHILE = function() {
    return this.getToken(VenbraceParser.WHILE, 0);
};

While_statContext.prototype.TEST = function() {
    return this.getToken(VenbraceParser.TEST, 0);
};

While_statContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

While_statContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

While_statContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};




VenbraceParser.While_statContext = While_statContext;

VenbraceParser.prototype.while_stat = function() {

    var localctx = new While_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, VenbraceParser.RULE_while_stat);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("inline","false");
    	localctx.elt.setAttribute("type","controls_while");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.match(VenbraceParser.WHILE);
        this.state = 260;
        this.match(VenbraceParser.TEST);
        this.state = 261;
        localctx._expr_block = this.expr_block();

        		var val = document.createVenbraceElement("value");
        		val.setAttribute("name","TEST_COND");
        		val.appendChild(localctx._expr_block.elt);
        		localctx.elt.appendChild(val);
        	
        this.state = 263;
        this.match(VenbraceParser.DO);
        this.state = 264;
        localctx._suite = this.suite();

        		var while_stats = localctx._suite.elt;
        		while_stats.setAttribute("name", "DO");
        		localctx.elt.appendChild(while_stats);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Evaluate_but_ignoreContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_evaluate_but_ignore;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Evaluate_but_ignoreContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Evaluate_but_ignoreContext.prototype.constructor = Evaluate_but_ignoreContext;

Evaluate_but_ignoreContext.prototype.EVAL_BUT_IGNORE_RESULT = function() {
    return this.getToken(VenbraceParser.EVAL_BUT_IGNORE_RESULT, 0);
};

Evaluate_but_ignoreContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Evaluate_but_ignoreContext = Evaluate_but_ignoreContext;

VenbraceParser.prototype.evaluate_but_ignore = function() {

    var localctx = new Evaluate_but_ignoreContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, VenbraceParser.RULE_evaluate_but_ignore);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("inline","false");
    	localctx.elt.setAttribute("type","evaluate_but_ignore");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 267;
        this.match(VenbraceParser.EVAL_BUT_IGNORE_RESULT);
        this.state = 268;
        localctx._expr_block = this.expr_block();

              var val = document.createVenbraceElement("value");
              val.appendChild(localctx._expr_block.elt);
              localctx.elt.appendChild(val);
            
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Open_screenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_open_screen;
    this.elt = null
    this.name = null; // Expr_blockContext
    this.val = null; // Expr_blockContext
    return this;
}

Open_screenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_screenContext.prototype.constructor = Open_screenContext;

Open_screenContext.prototype.OPEN_ANOTHER_SCREEN = function() {
    return this.getToken(VenbraceParser.OPEN_ANOTHER_SCREEN, 0);
};

Open_screenContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.Open_screenContext = Open_screenContext;

VenbraceParser.prototype.open_screen = function() {

    var localctx = new Open_screenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, VenbraceParser.RULE_open_screen);

        localctx.elt =  document.createVenbraceElement("block")
    	  localctx.elt.setAttribute("inline","false");
    	  localctx.elt.setAttribute("type","open_screen");
        var operation = "";
        var withValue = false;
      
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.match(VenbraceParser.OPEN_ANOTHER_SCREEN);
        this.state = 272;
        localctx.name = this.expr_block();
        localctx.elt.appendChild(localctx.name.elt);
        this.state = 277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (VenbraceParser.NUMBER - 101)) | (1 << (VenbraceParser.NEG_NUM - 101)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 101)) | (1 << (VenbraceParser.ID - 101)) | (1 << (VenbraceParser.STRING - 101)))) !== 0)) {
            this.state = 274;
            localctx.val = this.expr_block();

                withValue = true;
                localctx.elt.appendChild(localctx.name.elt);
              
        }


            operation = withValue ? "open_screen_with_value" : "open_screen"; 
            localctx.elt.setAttribute("type",operation);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Close_screenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_close_screen;
    this.elt = null
    return this;
}

Close_screenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_screenContext.prototype.constructor = Close_screenContext;

Close_screenContext.prototype.CLOSE_SCREEN = function() {
    return this.getToken(VenbraceParser.CLOSE_SCREEN, 0);
};




VenbraceParser.Close_screenContext = Close_screenContext;

VenbraceParser.prototype.close_screen = function() {

    var localctx = new Close_screenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, VenbraceParser.RULE_close_screen);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(VenbraceParser.CLOSE_SCREEN);

            localctx.elt =  document.createVenbraceElement("block")
        	  localctx.elt.setAttribute("inline","false");
        	  localctx.elt.setAttribute("type","close_screen");
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Close_applicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_close_application;
    this.elt = null
    return this;
}

Close_applicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_applicationContext.prototype.constructor = Close_applicationContext;

Close_applicationContext.prototype.CLOSE_APPLICATION = function() {
    return this.getToken(VenbraceParser.CLOSE_APPLICATION, 0);
};




VenbraceParser.Close_applicationContext = Close_applicationContext;

VenbraceParser.prototype.close_application = function() {

    var localctx = new Close_applicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, VenbraceParser.RULE_close_application);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(VenbraceParser.CLOSE_APPLICATION);

            localctx.elt =  document.createVenbraceElement("block")
        	  localctx.elt.setAttribute("inline","false");
        	  localctx.elt.setAttribute("type","close_application");
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Call_procedure_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_call_procedure_stat;
    this.elt = null
    this._ID = null; // Token
    this.component = null; // Token
    this.event = null; // Token
    return this;
}

Call_procedure_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_procedure_statContext.prototype.constructor = Call_procedure_statContext;

Call_procedure_statContext.prototype.CALL = function() {
    return this.getToken(VenbraceParser.CALL, 0);
};

Call_procedure_statContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Call_procedure_statContext.prototype.DOT = function() {
    return this.getToken(VenbraceParser.DOT, 0);
};




VenbraceParser.Call_procedure_statContext = Call_procedure_statContext;

VenbraceParser.prototype.call_procedure_stat = function() {

    var localctx = new Call_procedure_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, VenbraceParser.RULE_call_procedure_stat);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","call_procedure_stat");
      var procname = "";
        //var argLabels = [];
        //var argExps = [];
        // var pushArgLabel = function (ID) {
        //   var labelWithoutTrailingColon = ID.substring(0,ID.length - 1);
        //   argLabels.push(labelWithoutTrailingColon);
        // };
        // var pushArgExp = function (elt) {
        //   argExps.push(elt);
        // };

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.CALL) {
            this.state = 287;
            this.match(VenbraceParser.CALL);
        }

        this.state = 296;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.state = 290;
            localctx._ID = this.match(VenbraceParser.ID);
            procname = (localctx._ID===null ? null : localctx._ID.text);
            break;

        case 2:
            this.state = 292;
            localctx.component = this.match(VenbraceParser.ID);
            this.state = 293;
            this.match(VenbraceParser.DOT);
            this.state = 294;
            localctx.event = this.match(VenbraceParser.ID);
            procname = (localctx.component===null ? null : localctx.component.text) + "." + (localctx.event===null ? null : localctx.event.text);
            break;

        }

              //var mutation = document.createVenbraceElement("mutation");
              //mutation.setAttribute("name", procname);
           	  //localctx.elt.appendChild(mutation);

              var procnameField = document.createVenbraceElement("field");
              procnameField.setAttribute("name", "PROCNAME");
              procnameField.innerHTML = procname;
           	  localctx.elt.appendChild(procnameField);

              /*for (var i = 0; i < argExps.length; i++) {
                //var mutationArg = document.createVenbraceElement("arg");
                //mutationArg.setAttribute("name", argLabels[i]); 
                //mutation.appendChild(mutationArg);
                var valueArg = document.createVenbraceElement("value");
                valueArg.setAttribute("name", "ARG" + i); 
                valueArg.appendChild(argExps[i]);
                localctx.elt.appendChild(valueArg);
              }*/
            
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Var_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_var_stat;
    this.elt = null
    this._setter = null; // SetterContext
    return this;
}

Var_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_statContext.prototype.constructor = Var_statContext;

Var_statContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};




VenbraceParser.Var_statContext = Var_statContext;

VenbraceParser.prototype.var_stat = function() {

    var localctx = new Var_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, VenbraceParser.RULE_var_stat);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        localctx._setter = this.setter();
        localctx.elt =  localctx._setter.elt
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_setter;
    this.elt = null
    this._GLOBAL = null; // Token
    this._ID = null; // Token
    this._COMPONENT_PROPERTY = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(VenbraceParser.SET, 0);
};

SetterContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

SetterContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

SetterContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

SetterContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};

SetterContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};




VenbraceParser.SetterContext = SetterContext;

VenbraceParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, VenbraceParser.RULE_setter);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","var_stat");
    	localctx.elt.setAttribute("inline","false");

    	var field = document.createVenbraceElement("field");
    	field.setAttribute("name","VAR");

    	var var_name = "";

    	var value = document.createVenbraceElement("value");
    	value.setAttribute("name","VALUE");

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(VenbraceParser.SET);
        this.state = 312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.GLOBAL:
        case VenbraceParser.ID:
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.GLOBAL) {
                this.state = 304;
                localctx._GLOBAL = this.match(VenbraceParser.GLOBAL);
                var_name += (localctx._GLOBAL===null ? null : localctx._GLOBAL.text) + " ";
            }

            this.state = 308;
            localctx._ID = this.match(VenbraceParser.ID);
            var_name += (localctx._ID===null ? null : localctx._ID.text);
            break;
        case VenbraceParser.COMPONENT_PROPERTY:
            this.state = 310;
            localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);
            var_name += (localctx._COMPONENT_PROPERTY===null ? null : localctx._COMPONENT_PROPERTY.text);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 314;
        this.match(VenbraceParser.TO);
        this.state = 315;
        localctx._expr_block = this.expr_block();

            field.innerHTML = var_name;
        		localctx.elt.appendChild(field);
        		value.appendChild(localctx._expr_block.elt);
        		localctx.elt.appendChild(value);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Local_init_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_local_init_stat;
    this.elt = null
    this._ID = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._suite = null; // SuiteContext
    return this;
}

Local_init_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_init_statContext.prototype.constructor = Local_init_statContext;

Local_init_statContext.prototype.INITIALIZE = function() {
    return this.getToken(VenbraceParser.INITIALIZE, 0);
};

Local_init_statContext.prototype.LOCAL = function() {
    return this.getToken(VenbraceParser.LOCAL, 0);
};

Local_init_statContext.prototype.IN = function() {
    return this.getToken(VenbraceParser.IN, 0);
};

Local_init_statContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Local_init_statContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Local_init_statContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.TO);
    } else {
        return this.getToken(VenbraceParser.TO, i);
    }
};


Local_init_statContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.Local_init_statContext = Local_init_statContext;

VenbraceParser.prototype.local_init_stat = function() {

    var localctx = new Local_init_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, VenbraceParser.RULE_local_init_stat);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","local_init_stat");
    	var mutation = document.createVenbraceElement("mutation");
    	var localName;
    	var fieldArr = [];
    	var field;
    	var count = 0;
    	var valArr = [];
    	var value;

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(VenbraceParser.INITIALIZE);
        this.state = 319;
        this.match(VenbraceParser.LOCAL);
        this.state = 325; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 320;
            localctx._ID = this.match(VenbraceParser.ID);
            this.state = 321;
            this.match(VenbraceParser.TO);
            this.state = 322;
            localctx._expr_block = this.expr_block();

            			localName = document.createVenbraceElement("localname");
            			localName.setAttribute("name",(localctx._ID===null ? null : localctx._ID.text));
            			mutation.appendChild(localName);

            			field = document.createVenbraceElement("field");
            			field.setAttribute("name","VAR" + count);
            			field.innerHTML = (localctx._ID===null ? null : localctx._ID.text);
            			fieldArr.push(field);

            			value = document.createVenbraceElement("value");
            			value.setAttribute("name", "DECL"+count);
            			value.appendChild(localctx._expr_block.elt);
            			valArr.push(value);
            			count++;
            		
            this.state = 327; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===VenbraceParser.ID);

            localctx.elt.appendChild(mutation);
            fieldArr.forEach(function(field){
              localctx.elt.appendChild(field);
            });
            valArr.forEach(function(value){
              localctx.elt.appendChild(value);
            });
          
        this.state = 330;
        this.match(VenbraceParser.IN);
        this.state = 331;
        localctx._suite = this.suite();

          var seq = localctx._suite.elt;
          seq.setAttribute("name","STACK");
          localctx.elt.appendChild(seq);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_expr;
    this.elt = null
    this._var_expr = null; // Var_exprContext
    this._control_expr = null; // Control_exprContext
    this._logic_expr = null; // Logic_exprContext
    this._not_expr = null; // Not_exprContext
    this._compare_eq_expr = null; // Compare_eq_exprContext
    this._compare_math_expr = null; // Compare_math_exprContext
    this._math_expr = null; // Math_exprContext
    this._str_expr = null; // Str_exprContext
    this._color_block = null; // Color_blockContext
    this._call_procedure_expr = null; // Call_procedure_exprContext
    this._atom = null; // AtomContext
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.var_expr = function() {
    return this.getTypedRuleContext(Var_exprContext,0);
};

ExprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

ExprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

ExprContext.prototype.control_expr = function() {
    return this.getTypedRuleContext(Control_exprContext,0);
};

ExprContext.prototype.logic_expr = function() {
    return this.getTypedRuleContext(Logic_exprContext,0);
};

ExprContext.prototype.not_expr = function() {
    return this.getTypedRuleContext(Not_exprContext,0);
};

ExprContext.prototype.compare_eq_expr = function() {
    return this.getTypedRuleContext(Compare_eq_exprContext,0);
};

ExprContext.prototype.compare_math_expr = function() {
    return this.getTypedRuleContext(Compare_math_exprContext,0);
};

ExprContext.prototype.math_expr = function() {
    return this.getTypedRuleContext(Math_exprContext,0);
};

ExprContext.prototype.str_expr = function() {
    return this.getTypedRuleContext(Str_exprContext,0);
};

ExprContext.prototype.color_block = function() {
    return this.getTypedRuleContext(Color_blockContext,0);
};

ExprContext.prototype.call_procedure_expr = function() {
    return this.getTypedRuleContext(Call_procedure_exprContext,0);
};

ExprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};




VenbraceParser.ExprContext = ExprContext;

VenbraceParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, VenbraceParser.RULE_expr);
    try {
        this.state = 372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 334;
            localctx._var_expr = this.var_expr();
            localctx.elt =  localctx._var_expr.elt
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 337;
            this.match(VenbraceParser.LPAREN);
            this.state = 368;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
            switch(la_) {
            case 1:
                this.state = 338;
                localctx._control_expr = this.control_expr();
                localctx.elt =  localctx._control_expr.elt
                break;

            case 2:
                this.state = 341;
                localctx._logic_expr = this.logic_expr();
                localctx.elt =  localctx._logic_expr.elt
                break;

            case 3:
                this.state = 344;
                localctx._not_expr = this.not_expr();
                localctx.elt =  localctx._not_expr.elt
                break;

            case 4:
                this.state = 347;
                localctx._compare_eq_expr = this.compare_eq_expr();
                localctx.elt =  localctx._compare_eq_expr.elt
                break;

            case 5:
                this.state = 350;
                localctx._compare_math_expr = this.compare_math_expr();
                localctx.elt =  localctx._compare_math_expr.elt
                break;

            case 6:
                this.state = 353;
                localctx._math_expr = this.math_expr();
                localctx.elt =  localctx._math_expr.elt
                break;

            case 7:
                this.state = 356;
                localctx._str_expr = this.str_expr();
                localctx.elt =  localctx._str_expr.elt
                break;

            case 8:
                this.state = 359;
                localctx._color_block = this.color_block();
                localctx.elt =  localctx._color_block.elt
                break;

            case 9:
                this.state = 362;
                localctx._call_procedure_expr = this.call_procedure_expr();
                localctx.elt =  localctx._call_procedure_expr.elt
                break;

            case 10:
                this.state = 365;
                localctx._atom = this.atom();
                localctx.elt =  localctx._atom.elt
                break;

            }
            this.state = 370;
            this.match(VenbraceParser.RPAREN);
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Control_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_control_expr;
    this.elt = null
    this._if_expr = null; // If_exprContext
    this._do_expr = null; // Do_exprContext
    return this;
}

Control_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_exprContext.prototype.constructor = Control_exprContext;

Control_exprContext.prototype.if_expr = function() {
    return this.getTypedRuleContext(If_exprContext,0);
};

Control_exprContext.prototype.do_expr = function() {
    return this.getTypedRuleContext(Do_exprContext,0);
};




VenbraceParser.Control_exprContext = Control_exprContext;

VenbraceParser.prototype.control_expr = function() {

    var localctx = new Control_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, VenbraceParser.RULE_control_expr);
    try {
        this.state = 380;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 374;
            localctx._if_expr = this.if_expr();
            localctx.elt =  localctx._if_expr.elt
            break;
        case VenbraceParser.DO:
            this.enterOuterAlt(localctx, 2);
            this.state = 377;
            localctx._do_expr = this.do_expr();
            localctx.elt =  localctx._do_expr.elt
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function If_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_if_expr;
    this.elt = null
    this.c = null; // Expr_blockContext
    this.e1 = null; // Expr_blockContext
    this.e2 = null; // Expr_blockContext
    return this;
}

If_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_exprContext.prototype.constructor = If_exprContext;

If_exprContext.prototype.IF = function() {
    return this.getToken(VenbraceParser.IF, 0);
};

If_exprContext.prototype.THEN = function() {
    return this.getToken(VenbraceParser.THEN, 0);
};

If_exprContext.prototype.ELSE = function() {
    return this.getToken(VenbraceParser.ELSE, 0);
};

If_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.If_exprContext = If_exprContext;

VenbraceParser.prototype.if_expr = function() {

    var localctx = new If_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, VenbraceParser.RULE_if_expr);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","if_expr");
    	localctx.elt.setAttribute("inline","false");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 382;
        this.match(VenbraceParser.IF);
        this.state = 383;
        localctx.c = this.expr_block();
        this.state = 384;
        this.match(VenbraceParser.THEN);
        this.state = 385;
        localctx.e1 = this.expr_block();
        this.state = 386;
        this.match(VenbraceParser.ELSE);
        this.state = 387;
        localctx.e2 = this.expr_block();

        		var testVal = document.createVenbraceElement("value");
        		testVal.setAttribute("name","TEST");
        		testVal.appendChild(localctx.c.elt);

        		var thenVal = document.createVenbraceElement("value");
        		thenVal.setAttribute("name","THENRETURN");
        		thenVal.appendChild(localctx.e1.elt);

        		var elseVal = document.createVenbraceElement("value");
        		elseVal.setAttribute("name","ELSERETURN");
        		elseVal.appendChild(localctx.e2.elt);

        		localctx.elt.appendChild(testVal);
        		localctx.elt.appendChild(thenVal);
        		localctx.elt.appendChild(elseVal);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Do_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_do_expr;
    this.elt = null
    this._suite = null; // SuiteContext
    this._expr_block = null; // Expr_blockContext
    return this;
}

Do_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_exprContext.prototype.constructor = Do_exprContext;

Do_exprContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Do_exprContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Do_exprContext.prototype.RESULT = function() {
    return this.getToken(VenbraceParser.RESULT, 0);
};

Do_exprContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Do_exprContext = Do_exprContext;

VenbraceParser.prototype.do_expr = function() {

    var localctx = new Do_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, VenbraceParser.RULE_do_expr);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","do_expr");
    	localctx.elt.setAttribute("inline","false");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.match(VenbraceParser.DO);
        this.state = 391;
        localctx._suite = this.suite();

            var seq = localctx._suite.elt;
            seq.setAttribute("name","STACK");
            localctx.elt.appendChild(seq);
            
        this.state = 393;
        this.match(VenbraceParser.RESULT);
        this.state = 394;
        localctx._expr_block = this.expr_block();

              localctx.elt.appendChild(localctx._expr_block.elt);
            
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Get_screen_valContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_get_screen_val;
    this.elt = null
    return this;
}

Get_screen_valContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Get_screen_valContext.prototype.constructor = Get_screen_valContext;

Get_screen_valContext.prototype.GET_START_VALUE = function() {
    return this.getToken(VenbraceParser.GET_START_VALUE, 0);
};




VenbraceParser.Get_screen_valContext = Get_screen_valContext;

VenbraceParser.prototype.get_screen_val = function() {

    var localctx = new Get_screen_valContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, VenbraceParser.RULE_get_screen_val);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.match(VenbraceParser.GET_START_VALUE);

              localctx.elt =  document.createVenbraceElement("block")
              localctx.elt.setAttribute("type","get_screen_val");
        	    localctx.elt.setAttribute("inline","false");
            
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Get_screen_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_get_screen_text;
    this.elt = null
    return this;
}

Get_screen_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Get_screen_textContext.prototype.constructor = Get_screen_textContext;

Get_screen_textContext.prototype.GET_PLAIN_START_TEXT = function() {
    return this.getToken(VenbraceParser.GET_PLAIN_START_TEXT, 0);
};




VenbraceParser.Get_screen_textContext = Get_screen_textContext;

VenbraceParser.prototype.get_screen_text = function() {

    var localctx = new Get_screen_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, VenbraceParser.RULE_get_screen_text);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(VenbraceParser.GET_PLAIN_START_TEXT);

            localctx.elt =  document.createVenbraceElement("block")
            localctx.elt.setAttribute("type","get_screen_val");
            localctx.elt.setAttribute("inline","false");
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Logic_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_logic_expr;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Logic_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logic_exprContext.prototype.constructor = Logic_exprContext;

Logic_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Logic_exprContext.prototype.AND = function() {
    return this.getToken(VenbraceParser.AND, 0);
};

Logic_exprContext.prototype.OR = function() {
    return this.getToken(VenbraceParser.OR, 0);
};




VenbraceParser.Logic_exprContext = Logic_exprContext;

VenbraceParser.prototype.logic_expr = function() {

    var localctx = new Logic_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, VenbraceParser.RULE_logic_expr);

    	localctx.elt =  document.createVenbraceElement("block")

    	localctx.elt.setAttribute("type","logic_operation");
    	localctx.elt.setAttribute("inline","true");

    	var operation = "";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        localctx.a = this.expr_block();
        this.state = 408;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.AND:
            this.state = 404;
            this.match(VenbraceParser.AND);
            operation = "AND";
            break;
        case VenbraceParser.OR:
            this.state = 406;
            this.match(VenbraceParser.OR);
            operation="OR";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 410;
        localctx.b = this.expr_block();

            var field = document.createVenbraceElement("field");
            field.setAttribute("name","OP");
            field.innerHTML = operation;

            var valA = document.createVenbraceElement("value");
            valA.setAttribute("name","A");
            valA.appendChild(localctx.a.elt);

            var valB = document.createVenbraceElement("value");
            valB.setAttribute("name","B");
            valB.appendChild(localctx.b.elt);

            localctx.elt.appendChild(valA);
            localctx.elt.appendChild(field);
            localctx.elt.appendChild(valB);
          
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_not_expr;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Not_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_exprContext.prototype.constructor = Not_exprContext;

Not_exprContext.prototype.NOT = function() {
    return this.getToken(VenbraceParser.NOT, 0);
};

Not_exprContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Not_exprContext = Not_exprContext;

VenbraceParser.prototype.not_expr = function() {

    var localctx = new Not_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, VenbraceParser.RULE_not_expr);

    	localctx.elt =  document.createVenbraceElement("block")

    	localctx.elt.setAttribute("type","logic_negate");
    	localctx.elt.setAttribute("inline","false");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(VenbraceParser.NOT);
        this.state = 414;
        localctx._expr_block = this.expr_block();

            var field = document.createVenbraceElement("field");
            field.setAttribute("name","OP");
            field.innerHTML = "NOT";

        		var value = document.createVenbraceElement("value");
        		value.setAttribute("name","BOOL");
        		value.appendChild(localctx._expr_block.elt);

        		localctx.elt.appendChild(field);
            localctx.elt.appendChild(value);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Compare_eq_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_compare_eq_expr;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Compare_eq_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compare_eq_exprContext.prototype.constructor = Compare_eq_exprContext;

Compare_eq_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Compare_eq_exprContext.prototype.LOGIC_EQ = function() {
    return this.getToken(VenbraceParser.LOGIC_EQ, 0);
};

Compare_eq_exprContext.prototype.LOGIC_NOT_EQ = function() {
    return this.getToken(VenbraceParser.LOGIC_NOT_EQ, 0);
};




VenbraceParser.Compare_eq_exprContext = Compare_eq_exprContext;

VenbraceParser.prototype.compare_eq_expr = function() {

    var localctx = new Compare_eq_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, VenbraceParser.RULE_compare_eq_expr);

    	localctx.elt =  document.createVenbraceElement("block")

    	localctx.elt.setAttribute("type","logic_compare");
    	localctx.elt.setAttribute("inline","true");

    	var operation = "";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        localctx.a = this.expr_block();
        this.state = 422;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.LOGIC_EQ:
            this.state = 418;
            this.match(VenbraceParser.LOGIC_EQ);
            operation = "EQ";
            break;
        case VenbraceParser.LOGIC_NOT_EQ:
            this.state = 420;
            this.match(VenbraceParser.LOGIC_NOT_EQ);
            operation = "NEQ";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 424;
        localctx.b = this.expr_block();

        		var field = document.createVenbraceElement("field");
        	  field.setAttribute("name","OP");
        	  field.innerHTML = operation;

        	  var valA = document.createVenbraceElement("value");
        	  valA.setAttribute("name","A");
        	  valA.appendChild(localctx.a.elt);

        	  var valB = document.createVenbraceElement("value");
        	  valB.setAttribute("name","B");
        	  valB.appendChild(localctx.b.elt);

        	  localctx.elt.appendChild(valA);
        	  localctx.elt.appendChild(field);
        	  localctx.elt.appendChild(valB);
        	
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compare_math_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_compare_math_expr;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Compare_math_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compare_math_exprContext.prototype.constructor = Compare_math_exprContext;

Compare_math_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Compare_math_exprContext.prototype.EQ = function() {
    return this.getToken(VenbraceParser.EQ, 0);
};

Compare_math_exprContext.prototype.NEQ = function() {
    return this.getToken(VenbraceParser.NEQ, 0);
};

Compare_math_exprContext.prototype.GT = function() {
    return this.getToken(VenbraceParser.GT, 0);
};

Compare_math_exprContext.prototype.GE = function() {
    return this.getToken(VenbraceParser.GE, 0);
};

Compare_math_exprContext.prototype.LT = function() {
    return this.getToken(VenbraceParser.LT, 0);
};

Compare_math_exprContext.prototype.LE = function() {
    return this.getToken(VenbraceParser.LE, 0);
};




VenbraceParser.Compare_math_exprContext = Compare_math_exprContext;

VenbraceParser.prototype.compare_math_expr = function() {

    var localctx = new Compare_math_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, VenbraceParser.RULE_compare_math_expr);

    	localctx.elt =  document.createVenbraceElement("block")

    	localctx.elt.setAttribute("type","math_compare"); 
    	//this is the only difference between this rule and the rule above
    	localctx.elt.setAttribute("inline","true");

    	var operation = "";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        localctx.a = this.expr_block();
        this.state = 440;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.EQ:
            this.state = 428;
            this.match(VenbraceParser.EQ);
            operation = "EQ";
            break;
        case VenbraceParser.NEQ:
            this.state = 430;
            this.match(VenbraceParser.NEQ);
            operation = "NEQ";
            break;
        case VenbraceParser.GT:
            this.state = 432;
            this.match(VenbraceParser.GT);
            operation = "GT";
            break;
        case VenbraceParser.GE:
            this.state = 434;
            this.match(VenbraceParser.GE);
            operation = "GE";
            break;
        case VenbraceParser.LT:
            this.state = 436;
            this.match(VenbraceParser.LT);
            operation = "LT";
            break;
        case VenbraceParser.LE:
            this.state = 438;
            this.match(VenbraceParser.LE);
            operation = "LE";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 442;
        localctx.b = this.expr_block();

        		var field = document.createVenbraceElement("field");
        	  field.setAttribute("name","OP");
        	  field.innerHTML = operation;

        	  var valA = document.createVenbraceElement("value");
        	  valA.setAttribute("name","A");
        	  valA.appendChild(localctx.a.elt);

        	  var valB = document.createVenbraceElement("value");
        	  valB.setAttribute("name","B");
        	  valB.appendChild(localctx.b.elt);

        	  localctx.elt.appendChild(valA);
        	  localctx.elt.appendChild(field);
        	  localctx.elt.appendChild(valB);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Math_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_math_expr;
    this.elt = null
    this._mutable_op = null; // Mutable_opContext
    this._immutable_op = null; // Immutable_opContext
    this._min_max = null; // Min_maxContext
    this._unary_op = null; // Unary_opContext
    this._mod = null; // ModContext
    this._remainder = null; // RemainderContext
    this._quotient = null; // QuotientContext
    this._trig = null; // TrigContext
    return this;
}

Math_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Math_exprContext.prototype.constructor = Math_exprContext;

Math_exprContext.prototype.mutable_op = function() {
    return this.getTypedRuleContext(Mutable_opContext,0);
};

Math_exprContext.prototype.immutable_op = function() {
    return this.getTypedRuleContext(Immutable_opContext,0);
};

Math_exprContext.prototype.min_max = function() {
    return this.getTypedRuleContext(Min_maxContext,0);
};

Math_exprContext.prototype.unary_op = function() {
    return this.getTypedRuleContext(Unary_opContext,0);
};

Math_exprContext.prototype.mod = function() {
    return this.getTypedRuleContext(ModContext,0);
};

Math_exprContext.prototype.remainder = function() {
    return this.getTypedRuleContext(RemainderContext,0);
};

Math_exprContext.prototype.quotient = function() {
    return this.getTypedRuleContext(QuotientContext,0);
};

Math_exprContext.prototype.trig = function() {
    return this.getTypedRuleContext(TrigContext,0);
};




VenbraceParser.Math_exprContext = Math_exprContext;

VenbraceParser.prototype.math_expr = function() {

    var localctx = new Math_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, VenbraceParser.RULE_math_expr);
    try {
        this.state = 469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 445;
            localctx._mutable_op = this.mutable_op();
            localctx.elt =  localctx._mutable_op.elt
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 448;
            localctx._immutable_op = this.immutable_op();
            localctx.elt =  localctx._immutable_op.elt
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 451;
            localctx._min_max = this.min_max();
            localctx.elt =  localctx._min_max.elt
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 454;
            localctx._unary_op = this.unary_op();
            localctx.elt =  localctx._unary_op.elt
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 457;
            localctx._mod = this.mod();
            localctx.elt =  localctx._mod.elt
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 460;
            localctx._remainder = this.remainder();
            localctx.elt =  localctx._remainder.elt
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 463;
            localctx._quotient = this.quotient();
            localctx.elt =  localctx._quotient.elt
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 466;
            localctx._trig = this.trig();
            localctx.elt =  localctx._trig.elt
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Mutable_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_mutable_op;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    this.c = null; // Expr_blockContext
    return this;
}

Mutable_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_opContext.prototype.constructor = Mutable_opContext;

Mutable_opContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Mutable_opContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.PLUS);
    } else {
        return this.getToken(VenbraceParser.PLUS, i);
    }
};


Mutable_opContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.MUL);
    } else {
        return this.getToken(VenbraceParser.MUL, i);
    }
};





VenbraceParser.Mutable_opContext = Mutable_opContext;

VenbraceParser.prototype.mutable_op = function() {

    var localctx = new Mutable_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, VenbraceParser.RULE_mutable_op);

    	localctx.elt =  document.createVenbraceElement("block")
    	//type will get a value inside the rule
    	localctx.elt.setAttribute("inline","true");

    	//initalizing these in advance to be used later
    	var mutation = document.createVenbraceElement("mutation");
    	var itemCount = 0;
    	var valArr = [];

    	var addValue = function(element){
    		var value = document.createVenbraceElement("value");
    		value.setAttribute("name", "NUM" + itemCount);
    		value.appendChild(element);
    		valArr.push(value);
    		itemCount++;
    	}

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        localctx.a = this.expr_block();

            addValue(localctx.a.elt);
          
        this.state = 493;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.PLUS:
            this.state = 477; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 473;
                this.match(VenbraceParser.PLUS);
                this.state = 474;
                localctx.b = this.expr_block();
                addValue(localctx.b.elt);
                this.state = 479; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VenbraceParser.PLUS);
            localctx.elt.setAttribute("type", "math_add");
            break;
        case VenbraceParser.MUL:
            this.state = 487; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 483;
                this.match(VenbraceParser.MUL);
                this.state = 484;
                localctx.c = this.expr_block();
                addValue(localctx.c.elt);
                this.state = 489; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VenbraceParser.MUL);
            localctx.elt.setAttribute("type", "math_multiply");
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }

            mutation.setAttribute("items",itemCount);
            localctx.elt.appendChild(mutation);

            for (var i = 0; i<valArr.length; i++){
              localctx.elt.appendChild(valArr[i]);
            }
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Immutable_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_immutable_op;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    this._NEG_NUM = null; // Token
    return this;
}

Immutable_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Immutable_opContext.prototype.constructor = Immutable_opContext;

Immutable_opContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Immutable_opContext.prototype.MINUS = function() {
    return this.getToken(VenbraceParser.MINUS, 0);
};

Immutable_opContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

Immutable_opContext.prototype.POW = function() {
    return this.getToken(VenbraceParser.POW, 0);
};

Immutable_opContext.prototype.NEG_NUM = function() {
    return this.getToken(VenbraceParser.NEG_NUM, 0);
};




VenbraceParser.Immutable_opContext = Immutable_opContext;

VenbraceParser.prototype.immutable_op = function() {

    var localctx = new Immutable_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, VenbraceParser.RULE_immutable_op);

    	localctx.elt =  document.createVenbraceElement("block")
    	//type will get a value inside the rule
    	localctx.elt.setAttribute("inline","true");

    try {
        this.state = 513;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 497;
            localctx.a = this.expr_block();
            this.state = 504;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VenbraceParser.MINUS:
                this.state = 498;
                this.match(VenbraceParser.MINUS);
                localctx.elt.setAttribute("type", "math_subtract");
                break;
            case VenbraceParser.DIV:
                this.state = 500;
                this.match(VenbraceParser.DIV);
                localctx.elt.setAttribute("type", "math_division");
                break;
            case VenbraceParser.POW:
                this.state = 502;
                this.match(VenbraceParser.POW);
                localctx.elt.setAttribute("type", "math_power");
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 506;
            localctx.b = this.expr_block();

            		var valA = document.createVenbraceElement("value");
            	  valA.setAttribute("name","A");
            	  valA.appendChild(localctx.a.elt);

            	  var valB = document.createVenbraceElement("value");
            	  valB.setAttribute("name","B");
            	  valB.appendChild(localctx.b.elt);

            	  localctx.elt.appendChild(valA);
            	  localctx.elt.appendChild(valB);
            	
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 509;
            localctx.a = this.expr_block();
            this.state = 510;
            localctx._NEG_NUM = this.match(VenbraceParser.NEG_NUM);

                var valA = document.createVenbraceElement("value");
            	  valA.setAttribute("name","A");
            	  valA.appendChild(localctx.a.elt);

            	  var valB = document.createVenbraceElement("value");
                var field = document.createVenbraceElement("field");
                valB.setAttribute("type","math_number");
                valB.setAttribute("name", "B");
                field.innerHTML = (localctx._NEG_NUM===null ? null : localctx._NEG_NUM.text).substring(1); //excluding the neg sign
                valB.appendChild(field);

                localctx.elt.setAttribute("type", "math_subtract");
            	  localctx.elt.appendChild(valA);
            	  localctx.elt.appendChild(valB);
              
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Min_maxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_min_max;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Min_maxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Min_maxContext.prototype.constructor = Min_maxContext;

Min_maxContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Min_maxContext.prototype.MIN = function() {
    return this.getToken(VenbraceParser.MIN, 0);
};

Min_maxContext.prototype.MAX = function() {
    return this.getToken(VenbraceParser.MAX, 0);
};




VenbraceParser.Min_maxContext = Min_maxContext;

VenbraceParser.prototype.min_max = function() {

    var localctx = new Min_maxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, VenbraceParser.RULE_min_max);

    	localctx.elt =  document.createVenbraceElement("block")
    	//localctx.elt.setAttribute("type","math_minmax");
    	localctx.elt.setAttribute("inline","false");

      var operation = "";

      var mutation = document.createVenbraceElement("mutation");
    	var itemCount = 0;
    	var valArr = [];

    	var addValue = function(element){
    		var value = document.createVenbraceElement("value");
    		value.setAttribute("name", "NUM" + itemCount);
    		value.appendChild(element);
    		valArr.push(value);
    		itemCount++;
    	}

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.MIN:
            this.state = 515;
            this.match(VenbraceParser.MIN);
            operation = "math_min";
            break;
        case VenbraceParser.MAX:
            this.state = 517;
            this.match(VenbraceParser.MAX);
            operation="math_max";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 521;
        localctx.a = this.expr_block();
        addValue(localctx.a.elt);
        this.state = 526; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 523;
            localctx.b = this.expr_block();
            addValue(localctx.b.elt);
            this.state = 528; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (VenbraceParser.NUMBER - 101)) | (1 << (VenbraceParser.NEG_NUM - 101)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 101)) | (1 << (VenbraceParser.ID - 101)) | (1 << (VenbraceParser.STRING - 101)))) !== 0));

            localctx.elt.setAttribute("type",operation);
            mutation.setAttribute("items",itemCount);
            localctx.elt.appendChild(mutation);
            for (var i = 0; i<valArr.length; i++){
              localctx.elt.appendChild(valArr[i]);
            }
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_unary_op;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Unary_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_opContext.prototype.constructor = Unary_opContext;

Unary_opContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Unary_opContext.prototype.SQRT = function() {
    return this.getToken(VenbraceParser.SQRT, 0);
};

Unary_opContext.prototype.ABS = function() {
    return this.getToken(VenbraceParser.ABS, 0);
};

Unary_opContext.prototype.NEG = function() {
    return this.getToken(VenbraceParser.NEG, 0);
};

Unary_opContext.prototype.LOG = function() {
    return this.getToken(VenbraceParser.LOG, 0);
};

Unary_opContext.prototype.EULER = function() {
    return this.getToken(VenbraceParser.EULER, 0);
};

Unary_opContext.prototype.ROUND = function() {
    return this.getToken(VenbraceParser.ROUND, 0);
};

Unary_opContext.prototype.CEILING = function() {
    return this.getToken(VenbraceParser.CEILING, 0);
};

Unary_opContext.prototype.FLOOR = function() {
    return this.getToken(VenbraceParser.FLOOR, 0);
};




VenbraceParser.Unary_opContext = Unary_opContext;

VenbraceParser.prototype.unary_op = function() {

    var localctx = new Unary_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, VenbraceParser.RULE_unary_op);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_single");
    	localctx.elt.setAttribute("inline","false");

    	var operation = "";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.SQRT:
            this.state = 532;
            this.match(VenbraceParser.SQRT);
            operation = "ROOT";
            break;
        case VenbraceParser.ABS:
            this.state = 534;
            this.match(VenbraceParser.ABS);
            operation = "ABS";
            break;
        case VenbraceParser.NEG:
            this.state = 536;
            this.match(VenbraceParser.NEG);
            operation = "NEG";
            break;
        case VenbraceParser.LOG:
            this.state = 538;
            this.match(VenbraceParser.LOG);
            operation = "LN";
            break;
        case VenbraceParser.EULER:
            this.state = 540;
            this.match(VenbraceParser.EULER);
            operation = "EXP";
            break;
        case VenbraceParser.ROUND:
            this.state = 542;
            this.match(VenbraceParser.ROUND);
            operation = "ROUND";
            break;
        case VenbraceParser.CEILING:
            this.state = 544;
            this.match(VenbraceParser.CEILING);
            operation = "CEILING";
            break;
        case VenbraceParser.FLOOR:
            this.state = 546;
            this.match(VenbraceParser.FLOOR);
            operation = "FLOOR";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 550;
        localctx._expr_block = this.expr_block();

        		var field = document.createVenbraceElement("field");
        		field.setAttribute("name","OP");
        		field.innerHTML = operation;

        		var value = document.createVenbraceElement("value");
        		value.setAttribute("name","NUM");
        		value.appendChild(localctx._expr_block.elt);

        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(value);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function ModContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_mod;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

ModContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModContext.prototype.constructor = ModContext;

ModContext.prototype.MOD_OF = function() {
    return this.getToken(VenbraceParser.MOD_OF, 0);
};

ModContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

ModContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.ModContext = ModContext;

VenbraceParser.prototype.mod = function() {

    var localctx = new ModContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, VenbraceParser.RULE_mod);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_divide");
    	localctx.elt.setAttribute("inline","true");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(VenbraceParser.MOD_OF);
        this.state = 554;
        localctx.a = this.expr_block();
        this.state = 555;
        this.match(VenbraceParser.DIV);
        this.state = 556;
        localctx.b = this.expr_block();

        		var field = document.createVenbraceElement("field");
        		field.setAttribute("name","OP");
        		field.innerHTML = "MODULO";

        		var dividend = document.createVenbraceElement("value");
        		dividend.setAttribute("name","DIVIDEND");
        		dividend.appendChild(localctx.a.elt);

        		var divisor = document.createVenbraceElement("value");
        		divisor.setAttribute("name","DIVISOR");
        		divisor.appendChild(localctx.b.elt); 

        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(dividend);
        		localctx.elt.appendChild(divisor);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function RemainderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_remainder;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

RemainderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemainderContext.prototype.constructor = RemainderContext;

RemainderContext.prototype.REMAINDER_OF = function() {
    return this.getToken(VenbraceParser.REMAINDER_OF, 0);
};

RemainderContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

RemainderContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.RemainderContext = RemainderContext;

VenbraceParser.prototype.remainder = function() {

    var localctx = new RemainderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, VenbraceParser.RULE_remainder);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_divide");
    	localctx.elt.setAttribute("inline","true");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(VenbraceParser.REMAINDER_OF);
        this.state = 560;
        localctx.a = this.expr_block();
        this.state = 561;
        this.match(VenbraceParser.DIV);
        this.state = 562;
        localctx.b = this.expr_block();

        		var field = document.createVenbraceElement("field");
        		field.setAttribute("name","OP");
        		field.innerHTML = "REMAINDER";

        		var dividend = document.createVenbraceElement("value");
        		dividend.setAttribute("name","DIVIDEND");
        		dividend.appendChild(localctx.a.elt);

        		var divisor = document.createVenbraceElement("value");
        		divisor.setAttribute("name","DIVISOR");
        		divisor.appendChild(localctx.b.elt); 

        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(dividend);
        		localctx.elt.appendChild(divisor);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function QuotientContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_quotient;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

QuotientContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotientContext.prototype.constructor = QuotientContext;

QuotientContext.prototype.QUOTIENT_OF = function() {
    return this.getToken(VenbraceParser.QUOTIENT_OF, 0);
};

QuotientContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

QuotientContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.QuotientContext = QuotientContext;

VenbraceParser.prototype.quotient = function() {

    var localctx = new QuotientContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, VenbraceParser.RULE_quotient);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_divide");
    	localctx.elt.setAttribute("inline","true");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.match(VenbraceParser.QUOTIENT_OF);
        this.state = 566;
        localctx.a = this.expr_block();
        this.state = 567;
        this.match(VenbraceParser.DIV);
        this.state = 568;
        localctx.b = this.expr_block();

        		var field = document.createVenbraceElement("field");
        		field.setAttribute("name","OP");
        		field.innerHTML = "QUOTIENT";

        		var dividend = document.createVenbraceElement("value");
        		dividend.setAttribute("name","DIVIDEND");
        		dividend.appendChild(localctx.a.elt);

        		var divisor = document.createVenbraceElement("value");
        		divisor.setAttribute("name","DIVISOR");
        		divisor.appendChild(localctx.b.elt); 

        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(dividend);
        		localctx.elt.appendChild(divisor);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function TrigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_trig;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

TrigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrigContext.prototype.constructor = TrigContext;

TrigContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

TrigContext.prototype.SIN = function() {
    return this.getToken(VenbraceParser.SIN, 0);
};

TrigContext.prototype.COS = function() {
    return this.getToken(VenbraceParser.COS, 0);
};

TrigContext.prototype.TAN = function() {
    return this.getToken(VenbraceParser.TAN, 0);
};

TrigContext.prototype.ASIN = function() {
    return this.getToken(VenbraceParser.ASIN, 0);
};

TrigContext.prototype.ACOS = function() {
    return this.getToken(VenbraceParser.ACOS, 0);
};

TrigContext.prototype.ATAN = function() {
    return this.getToken(VenbraceParser.ATAN, 0);
};




VenbraceParser.TrigContext = TrigContext;

VenbraceParser.prototype.trig = function() {

    var localctx = new TrigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, VenbraceParser.RULE_trig);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_trig");
    	localctx.elt.setAttribute("inline","false");

    	var operation = "";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.SIN:
            this.state = 571;
            this.match(VenbraceParser.SIN);
            operation="SIN";
            break;
        case VenbraceParser.COS:
            this.state = 573;
            this.match(VenbraceParser.COS);
            operation="COS";
            break;
        case VenbraceParser.TAN:
            this.state = 575;
            this.match(VenbraceParser.TAN);
            operation="TAN";
            break;
        case VenbraceParser.ASIN:
            this.state = 577;
            this.match(VenbraceParser.ASIN);
            operation="ASIN";
            break;
        case VenbraceParser.ACOS:
            this.state = 579;
            this.match(VenbraceParser.ACOS);
            operation="ACOS";
            break;
        case VenbraceParser.ATAN:
            this.state = 581;
            this.match(VenbraceParser.ATAN);
            operation="ATAN";
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 585;
        localctx._expr_block = this.expr_block();

        		var field = document.createVenbraceElement("field");
        		field.setAttribute("name","OP");
        		field.innerHTML = operation;

        		var value = document.createVenbraceElement("value");
        		value.setAttribute("name","NUM");
        		value.appendChild(localctx._expr_block.elt);

        		localctx.elt.appendChild(field);
        		localctx.elt.appendChild(value);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Is_numContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_is_num;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Is_numContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_numContext.prototype.constructor = Is_numContext;

Is_numContext.prototype.IS_NUM = function() {
    return this.getToken(VenbraceParser.IS_NUM, 0);
};

Is_numContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Is_numContext = Is_numContext;

VenbraceParser.prototype.is_num = function() {

    var localctx = new Is_numContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, VenbraceParser.RULE_is_num);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","math_isNum");
    	localctx.elt.setAttribute("inline","false");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.match(VenbraceParser.IS_NUM);
        this.state = 589;
        localctx._expr_block = this.expr_block();
        localctx.elt.appendChild(localctx._expr_block.elt);
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Str_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_expr;
    this.elt = null
    this._str_join = null; // Str_joinContext
    this._str_length = null; // Str_lengthContext
    return this;
}

Str_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_exprContext.prototype.constructor = Str_exprContext;

Str_exprContext.prototype.str_join = function() {
    return this.getTypedRuleContext(Str_joinContext,0);
};

Str_exprContext.prototype.str_length = function() {
    return this.getTypedRuleContext(Str_lengthContext,0);
};




VenbraceParser.Str_exprContext = Str_exprContext;

VenbraceParser.prototype.str_expr = function() {

    var localctx = new Str_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, VenbraceParser.RULE_str_expr);
    try {
        this.state = 598;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.JOIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 592;
            localctx._str_join = this.str_join();
            localctx.elt =  localctx._str_join.elt
            break;
        case VenbraceParser.LENGTH:
            this.enterOuterAlt(localctx, 2);
            this.state = 595;
            localctx._str_length = this.str_length();
            localctx.elt =  localctx._str_length.elt
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Str_lengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_length;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Str_lengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_lengthContext.prototype.constructor = Str_lengthContext;

Str_lengthContext.prototype.LENGTH = function() {
    return this.getToken(VenbraceParser.LENGTH, 0);
};

Str_lengthContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Str_lengthContext = Str_lengthContext;

VenbraceParser.prototype.str_length = function() {

    var localctx = new Str_lengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, VenbraceParser.RULE_str_length);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","text_length");
    	localctx.elt.setAttribute("inline","false");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(VenbraceParser.LENGTH);
        this.state = 601;
        localctx._expr_block = this.expr_block();

            var value = document.createVenbraceElement("value");
        		value.setAttribute("name","STRING");
        		value.appendChild(localctx._expr_block.elt);

        		localctx.elt.appendChild(value);
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Str_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_join;
    this.elt = null
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Str_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_joinContext.prototype.constructor = Str_joinContext;

Str_joinContext.prototype.JOIN = function() {
    return this.getToken(VenbraceParser.JOIN, 0);
};

Str_joinContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.Str_joinContext = Str_joinContext;

VenbraceParser.prototype.str_join = function() {

    var localctx = new Str_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, VenbraceParser.RULE_str_join);

    	localctx.elt =  document.createVenbraceElement("block")
    	//type will get a value inside the rule
    	localctx.elt.setAttribute("inline","true");

    	//initalizing these in advance to be used later
    	var mutation = document.createVenbraceElement("mutation");
    	var itemCount = 0;
    	var valArr = [];

    	var addValue = function(element){
    		var value = document.createVenbraceElement("value");
    		value.setAttribute("name", "STRING" + itemCount);
    		value.appendChild(element);
    		valArr.push(value);
    		itemCount++;
    	}

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.match(VenbraceParser.JOIN);
        this.state = 605;
        localctx.a = this.expr_block();

            addValue(localctx.a.elt);
          
        this.state = 610; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 607;
            localctx.b = this.expr_block();
            addValue(localctx.b.elt);
            this.state = 612; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (VenbraceParser.NUMBER - 101)) | (1 << (VenbraceParser.NEG_NUM - 101)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 101)) | (1 << (VenbraceParser.ID - 101)) | (1 << (VenbraceParser.STRING - 101)))) !== 0));

            localctx.elt.setAttribute("type", "text_join");
            mutation.setAttribute("items",itemCount);
            localctx.elt.appendChild(mutation);

            for (var i = 0; i<valArr.length; i++){
              localctx.elt.appendChild(valArr[i]);
            }
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Var_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_var_expr;
    this.elt = null
    this._getter = null; // GetterContext
    return this;
}

Var_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_exprContext.prototype.constructor = Var_exprContext;

Var_exprContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};




VenbraceParser.Var_exprContext = Var_exprContext;

VenbraceParser.prototype.var_expr = function() {

    var localctx = new Var_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, VenbraceParser.RULE_var_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        localctx._getter = this.getter();
        localctx.elt =  localctx._getter.elt
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_getter;
    this.elt = null
    this._ID = null; // Token
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

GetterContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

GetterContext.prototype.GET = function() {
    return this.getToken(VenbraceParser.GET, 0);
};

GetterContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

GetterContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};




VenbraceParser.GetterContext = GetterContext;

VenbraceParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, VenbraceParser.RULE_getter);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","lexical_variable_get");

    	var variable = "";

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.ID:
            this.state = 619;
            localctx._ID = this.match(VenbraceParser.ID);
            break;
        case VenbraceParser.LPAREN:
            this.state = 620;
            this.match(VenbraceParser.LPAREN);
            this.state = 621;
            this.match(VenbraceParser.GET);
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.GLOBAL) {
                this.state = 622;
                this.match(VenbraceParser.GLOBAL);
                variable += "global ";
            }

            this.state = 626;
            localctx._ID = this.match(VenbraceParser.ID);
            this.state = 627;
            this.match(VenbraceParser.RPAREN);

                variable += (localctx._ID===null ? null : localctx._ID.text);
                var field = document.createVenbraceElement("field");
                field.setAttribute("name","VAR");
                field.innerHTML = variable;

                localctx.elt.appendChild(field);
              
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Local_init_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_local_init_expr;
    this.elt = null
    this._ID = null; // Token
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    return this;
}

Local_init_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_init_exprContext.prototype.constructor = Local_init_exprContext;

Local_init_exprContext.prototype.INITIALIZE = function() {
    return this.getToken(VenbraceParser.INITIALIZE, 0);
};

Local_init_exprContext.prototype.IN = function() {
    return this.getToken(VenbraceParser.IN, 0);
};

Local_init_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Local_init_exprContext.prototype.LOCAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.LOCAL);
    } else {
        return this.getToken(VenbraceParser.LOCAL, i);
    }
};


Local_init_exprContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Local_init_exprContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.TO);
    } else {
        return this.getToken(VenbraceParser.TO, i);
    }
};





VenbraceParser.Local_init_exprContext = Local_init_exprContext;

VenbraceParser.prototype.local_init_expr = function() {

    var localctx = new Local_init_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, VenbraceParser.RULE_local_init_expr);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","local_declaration_expression");
    	var mutation = document.createVenbraceElement("mutation");
    	var localName;
    	var fieldArr = [];
    	var field;
    	var count = 0;
    	var valArr = [];
    	var value;

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 632;
        this.match(VenbraceParser.INITIALIZE);
        this.state = 639; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 633;
            this.match(VenbraceParser.LOCAL);
            this.state = 634;
            localctx._ID = this.match(VenbraceParser.ID);
            this.state = 635;
            this.match(VenbraceParser.TO);
            this.state = 636;
            localctx.a = this.expr_block();

                localName = document.createVenbraceElement("localname");
                localName.setAttribute("name",(localctx._ID===null ? null : localctx._ID.text));
                mutation.appendChild(localName);

                field = document.createVenbraceElement("field");
                field.setAttribute("name","VAR" + count);
                field.innerHTML = (localctx._ID===null ? null : localctx._ID.text);
                fieldArr.push(field);

                value = document.createVenbraceElement("value");
                value.setAttribute("name", "DECL"+count);
                value.appendChild(localctx.a.elt);
                valArr.push(value);
                count++;
              
            this.state = 641; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===VenbraceParser.LOCAL);

            localctx.elt.appendChild(mutation);
            fieldArr.forEach(function(field){
              localctx.elt.appendChild(field);
            });
            valArr.forEach(function(value){
              localctx.elt.appendChild(value);
            });
          
        this.state = 644;
        this.match(VenbraceParser.IN);
        this.state = 645;
        localctx.b = this.expr_block();

            var returnVal = document.createVenbraceElement("value");
            returnVal.setAttribute("name","RETURN");
            returnVal.appendChild(localctx.b.elt);
            localctx.elt.appendChild(returnVal);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Color_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_color_block;
    this.elt = null
    this._color = null; // ColorContext
    return this;
}

Color_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Color_blockContext.prototype.constructor = Color_blockContext;

Color_blockContext.prototype.color = function() {
    return this.getTypedRuleContext(ColorContext,0);
};




VenbraceParser.Color_blockContext = Color_blockContext;

VenbraceParser.prototype.color_block = function() {

    var localctx = new Color_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, VenbraceParser.RULE_color_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        localctx._color = this.color();
        localctx.elt =  localctx._color.elt
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function ColorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_color;
    this.elt = null
    this._BLACK = null; // Token
    this._BLUE = null; // Token
    this._WHITE = null; // Token
    this._MAGENTA = null; // Token
    this._RED = null; // Token
    this._LIGHT_GRAY = null; // Token
    this._PINK = null; // Token
    this._GRAY = null; // Token
    this._ORANGE = null; // Token
    this._DARK_GRAY = null; // Token
    this._YELLOW = null; // Token
    this._GREEN = null; // Token
    this._CYAN = null; // Token
    return this;
}

ColorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorContext.prototype.constructor = ColorContext;

ColorContext.prototype.BLACK = function() {
    return this.getToken(VenbraceParser.BLACK, 0);
};

ColorContext.prototype.BLUE = function() {
    return this.getToken(VenbraceParser.BLUE, 0);
};

ColorContext.prototype.WHITE = function() {
    return this.getToken(VenbraceParser.WHITE, 0);
};

ColorContext.prototype.MAGENTA = function() {
    return this.getToken(VenbraceParser.MAGENTA, 0);
};

ColorContext.prototype.RED = function() {
    return this.getToken(VenbraceParser.RED, 0);
};

ColorContext.prototype.LIGHT_GRAY = function() {
    return this.getToken(VenbraceParser.LIGHT_GRAY, 0);
};

ColorContext.prototype.PINK = function() {
    return this.getToken(VenbraceParser.PINK, 0);
};

ColorContext.prototype.GRAY = function() {
    return this.getToken(VenbraceParser.GRAY, 0);
};

ColorContext.prototype.ORANGE = function() {
    return this.getToken(VenbraceParser.ORANGE, 0);
};

ColorContext.prototype.DARK_GRAY = function() {
    return this.getToken(VenbraceParser.DARK_GRAY, 0);
};

ColorContext.prototype.YELLOW = function() {
    return this.getToken(VenbraceParser.YELLOW, 0);
};

ColorContext.prototype.GREEN = function() {
    return this.getToken(VenbraceParser.GREEN, 0);
};

ColorContext.prototype.CYAN = function() {
    return this.getToken(VenbraceParser.CYAN, 0);
};




VenbraceParser.ColorContext = ColorContext;

VenbraceParser.prototype.color = function() {

    var localctx = new ColorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, VenbraceParser.RULE_color);

    	localctx.elt =  document.createVenbraceElement("block")
    	var field = document.createVenbraceElement("field");
    	field.setAttribute("name","COLOR");

    	var type = "color_";

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.BLACK:
            this.state = 651;
            localctx._BLACK = this.match(VenbraceParser.BLACK);
            field.innerHTML="#000000"; type += (localctx._BLACK===null ? null : localctx._BLACK.text);
            break;
        case VenbraceParser.BLUE:
            this.state = 653;
            localctx._BLUE = this.match(VenbraceParser.BLUE);
            field.innerHTML="#0000ff"; type += (localctx._BLUE===null ? null : localctx._BLUE.text);
            break;
        case VenbraceParser.WHITE:
            this.state = 655;
            localctx._WHITE = this.match(VenbraceParser.WHITE);
            field.innerHTML="#ffffff"; type += (localctx._WHITE===null ? null : localctx._WHITE.text);
            break;
        case VenbraceParser.MAGENTA:
            this.state = 657;
            localctx._MAGENTA = this.match(VenbraceParser.MAGENTA);
            field.innerHTML="#ff00ff"; type += (localctx._MAGENTA===null ? null : localctx._MAGENTA.text);
            break;
        case VenbraceParser.RED:
            this.state = 659;
            localctx._RED = this.match(VenbraceParser.RED);
            field.innerHTML="#ff0000"; type += (localctx._RED===null ? null : localctx._RED.text);
            break;
        case VenbraceParser.LIGHT_GRAY:
            this.state = 661;
            localctx._LIGHT_GRAY = this.match(VenbraceParser.LIGHT_GRAY);
            field.innerHTML="#cccccc"; type += (localctx._LIGHT_GRAY===null ? null : localctx._LIGHT_GRAY.text);
            break;
        case VenbraceParser.PINK:
            this.state = 663;
            localctx._PINK = this.match(VenbraceParser.PINK);
            field.innerHTML="#ffafaf"; type += (localctx._PINK===null ? null : localctx._PINK.text);
            break;
        case VenbraceParser.GRAY:
            this.state = 665;
            localctx._GRAY = this.match(VenbraceParser.GRAY);
            field.innerHTML="#888888"; type += (localctx._GRAY===null ? null : localctx._GRAY.text);
            break;
        case VenbraceParser.ORANGE:
            this.state = 667;
            localctx._ORANGE = this.match(VenbraceParser.ORANGE);
            field.innerHTML="#ffc800"; type += (localctx._ORANGE===null ? null : localctx._ORANGE.text);
            break;
        case VenbraceParser.DARK_GRAY:
            this.state = 669;
            localctx._DARK_GRAY = this.match(VenbraceParser.DARK_GRAY);
            field.innerHTML="#444444"; type += (localctx._DARK_GRAY===null ? null : localctx._DARK_GRAY.text);
            break;
        case VenbraceParser.YELLOW:
            this.state = 671;
            localctx._YELLOW = this.match(VenbraceParser.YELLOW);
            field.innerHTML="#ffff00"; type += (localctx._YELLOW===null ? null : localctx._YELLOW.text);
            break;
        case VenbraceParser.GREEN:
            this.state = 673;
            localctx._GREEN = this.match(VenbraceParser.GREEN);
            field.innerHTML="#00ff00"; type += (localctx._GREEN===null ? null : localctx._GREEN.text);
            break;
        case VenbraceParser.CYAN:
            this.state = 675;
            localctx._CYAN = this.match(VenbraceParser.CYAN);
            field.innerHTML="#00ffff"; type += (localctx._CYAN===null ? null : localctx._CYAN.text);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }

            localctx.elt.setAttribute("type",type);
            localctx.elt.appendChild(field);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Make_colorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_make_color;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

Make_colorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Make_colorContext.prototype.constructor = Make_colorContext;

Make_colorContext.prototype.MAKE_COLOR = function() {
    return this.getToken(VenbraceParser.MAKE_COLOR, 0);
};

Make_colorContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};




VenbraceParser.Make_colorContext = Make_colorContext;

VenbraceParser.prototype.make_color = function() {

    var localctx = new Make_colorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, VenbraceParser.RULE_make_color);

    	localctx.elt =  document.createVenbraceElement("block")

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(VenbraceParser.MAKE_COLOR);
        this.state = 682;
        localctx._expr_block = this.expr_block();

            localctx.elt.setAttribute("type","color_make_color");
            localctx.elt.setAttribute("inline","false");
            var value = document.createVenbraceElement("value");
            value.setAttribute("name","COLORLIST");
            value.appendChild(localctx._expr_block.elt);
            localctx.elt.appendChild(value);
          
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function List_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_list_expr;
    this.elt = null
    this._expr_block = null; // Expr_blockContext
    return this;
}

List_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_exprContext.prototype.constructor = List_exprContext;

List_exprContext.prototype.LIST = function() {
    return this.getToken(VenbraceParser.LIST, 0);
};

List_exprContext.prototype.MAKE_LIST = function() {
    return this.getToken(VenbraceParser.MAKE_LIST, 0);
};

List_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};




VenbraceParser.List_exprContext = List_exprContext;

VenbraceParser.prototype.list_expr = function() {

    var localctx = new List_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, VenbraceParser.RULE_list_expr);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","lists_create_with");

    	var mutation = document.createVenbraceElement("mutation");
    	var item_count = 0;

    	var val_block_arr = [];
    	var val_block;

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        _la = this._input.LA(1);
        if(!(_la===VenbraceParser.MAKE_LIST || _la===VenbraceParser.LIST)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (VenbraceParser.NUMBER - 101)) | (1 << (VenbraceParser.NEG_NUM - 101)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 101)) | (1 << (VenbraceParser.ID - 101)) | (1 << (VenbraceParser.STRING - 101)))) !== 0)) {
            this.state = 686;
            localctx._expr_block = this.expr_block();

            	      	item_count++; 
            	      	val_block = document.createVenbraceElement("value");
            	      	val_block.setAttribute("name", ("ADD" + (item_count-1)));
            	      	val_block.appendChild(localctx._expr_block.elt);
            	      	val_block_arr.push(val_block);
            	      
            this.state = 693;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

        		mutation.setAttribute("items",item_count);
        		localctx.elt.appendChild(mutation);
        		val_block_arr.forEach(function (block) {
        			localctx.elt.appendChild(block);
        		});
        	
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function Call_procedure_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_call_procedure_expr;
    this.elt = null
    this._ID = null; // Token
    this.component = null; // Token
    this.event = null; // Token
    return this;
}

Call_procedure_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_procedure_exprContext.prototype.constructor = Call_procedure_exprContext;

Call_procedure_exprContext.prototype.CALL = function() {
    return this.getToken(VenbraceParser.CALL, 0);
};

Call_procedure_exprContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Call_procedure_exprContext.prototype.DOT = function() {
    return this.getToken(VenbraceParser.DOT, 0);
};




VenbraceParser.Call_procedure_exprContext = Call_procedure_exprContext;

VenbraceParser.prototype.call_procedure_expr = function() {

    var localctx = new Call_procedure_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, VenbraceParser.RULE_call_procedure_expr);

    	localctx.elt =  document.createVenbraceElement("block")
    	localctx.elt.setAttribute("type","procedures_callreturn");
      var procname = "";
      // var argLabels = [];
      // var argExps = [];
      // var pushArgLabel = function (ID) {
      //   var labelWithoutTrailingColon = ID.substring(0,ID.length - 1);
      //   argLabels.push(labelWithoutTrailingColon);
      // };
      // var pushArgExp = function (elt) {
      //   argExps.push(elt);
      // };

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.CALL) {
            this.state = 696;
            this.match(VenbraceParser.CALL);
        }

        this.state = 707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.state = 699;
            localctx._ID = this.match(VenbraceParser.ID);
            procname = (localctx._ID===null ? null : localctx._ID.text);
            break;

        case 2:
            this.state = 701;
            localctx.component = this.match(VenbraceParser.ID);
            this.state = 702;
            this.match(VenbraceParser.DOT);
            this.state = 703;
            localctx.event = this.match(VenbraceParser.ID);
            procname = (localctx.component===null ? null : localctx.component.text) + "." + (localctx.event===null ? null : localctx.event.text);

                // TODO: add more line according to
                var mutation = document.createVenbraceElement("mutation");
                mutation.setAttribute("name", procname);
                localctx.elt.appendChild(mutation);

                var procnameField = document.createVenbraceElement("field");
                procnameField.setAttribute("name", "PROCNAME");
                procnameField.innerHTML = procname;
                localctx.elt.appendChild(procnameField);

                /*for (var i = 0; i < argExps.length; i++) {
                    // var mutationArg = document.createVenbraceElement("arg");
                    // mutationArg.setAttribute("name", argLabels[i]); 
                    // mutation.appendChild(mutationArg);
                    var valueArg = document.createVenbraceElement("value");
                    valueArg.setAttribute("name", "ARG" + i); 
                    valueArg.appendChild(argExps[i]);
                    localctx.elt.appendChild(valueArg);
                }*/
              
            break;

        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_variable;
    this.elt = null
    this.id_var = null; // Token
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};




VenbraceParser.VariableContext = VariableContext;

VenbraceParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, VenbraceParser.RULE_variable);

    	localctx.elt =  document.createVenbraceElement("block")
    	var field = document.createVenbraceElement("field");

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        localctx.id_var = this.match(VenbraceParser.ID);

            //(localctx.id_var === null ? 0 : localctx.id_var.type) = VAR;
            var variable = (localctx._ID===null ? null : localctx._ID.text);
        		localctx.elt.setAttribute("type","lexical_variable_get");
            var field = document.createVenbraceElement("field");
            field.setAttribute("name","VAR");
            field.innerHTML = variable;
            localctx.elt.appendChild(field);
        	  
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_atom;
    this.elt = null
    this._NUMBER = null; // Token
    this._NEG_NUM = null; // Token
    this._STRING = null; // Token
    this._COMPONENT_PROPERTY = null; // Token
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.NUMBER = function() {
    return this.getToken(VenbraceParser.NUMBER, 0);
};

AtomContext.prototype.NEG_NUM = function() {
    return this.getToken(VenbraceParser.NEG_NUM, 0);
};

AtomContext.prototype.STRING = function() {
    return this.getToken(VenbraceParser.STRING, 0);
};

AtomContext.prototype.TRUE = function() {
    return this.getToken(VenbraceParser.TRUE, 0);
};

AtomContext.prototype.FALSE = function() {
    return this.getToken(VenbraceParser.FALSE, 0);
};

AtomContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};




VenbraceParser.AtomContext = AtomContext;

VenbraceParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, VenbraceParser.RULE_atom);

    	localctx.elt =  document.createVenbraceElement("block")
    	var field = document.createVenbraceElement("field");

    try {
        this.state = 724;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 712;
            localctx._NUMBER = this.match(VenbraceParser.NUMBER);

                localctx.elt.setAttribute("type","math_number");
                field.setAttribute("name","NUM");
                field.innerHTML = (localctx._NUMBER===null ? null : localctx._NUMBER.text);
                localctx.elt.appendChild(field);
            	
            break;
        case VenbraceParser.NEG_NUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 714;
            localctx._NEG_NUM = this.match(VenbraceParser.NEG_NUM);

                localctx.elt.setAttribute("type","math_number");
                field.setAttribute("name","NUM");
                field.innerHTML = (localctx._NEG_NUM===null ? null : localctx._NEG_NUM.text);
                localctx.elt.appendChild(field);
              
            break;
        case VenbraceParser.STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 716;
            localctx._STRING = this.match(VenbraceParser.STRING);

            		localctx.elt.setAttribute("type","text");

            		field.setAttribute("name","TEXT");
            		var text = (localctx._STRING===null ? null : localctx._STRING.text);
            		field.innerHTML = text.substring(1,text.length-1);
            		localctx.elt.appendChild(field);
            	
            break;
        case VenbraceParser.TRUE:
            this.enterOuterAlt(localctx, 4);
            this.state = 718;
            this.match(VenbraceParser.TRUE);

            		localctx.elt.setAttribute("type","logic_boolean");

            		field.setAttribute("name","BOOL");
            		field.innerHTML = "TRUE";
            		localctx.elt.appendChild(field);
            	
            break;
        case VenbraceParser.FALSE:
            this.enterOuterAlt(localctx, 5);
            this.state = 720;
            this.match(VenbraceParser.FALSE);

            		localctx.elt.setAttribute("type","logic_boolean");

            		field.setAttribute("name","BOOL");
            		field.innerHTML = "FALSE";
            		localctx.elt.appendChild(field);
            	
            break;
        case VenbraceParser.COMPONENT_PROPERTY:
            this.enterOuterAlt(localctx, 6);
            this.state = 722;
            localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);

                var variable = (localctx._COMPONENT_PROPERTY===null ? null : localctx._COMPONENT_PROPERTY.text);
            		localctx.elt.setAttribute("type","component_property");
                var field = document.createVenbraceElement("field");
                field.setAttribute("name","VAR");
                field.innerHTML = variable;
                localctx.elt.appendChild(field);
              
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    catch (e) {
    	throw e;
    }
 finally {
        this.exitRule();
    }
    return localctx;
};


exports.VenbraceParser = VenbraceParser;
