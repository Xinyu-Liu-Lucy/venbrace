[to inc a1 result a1]

to inc a2 result a2 // Forgiving parser adds squares

{to inc a3 result a3} // Forgiving parser changes curlies to squares

(to inc a4 result a4) // Forgiving parser changes parens to squares

{to inc a5 result a5) // ANTLR parser correction: mismatched input ')' expecting '}'

(to inc a6 result a6} // ANTLR parser correction: mismatched input '}' expecting ')'

[to inc a7 result a7) // ANTLR parser correction: mismatched input ')' expecting ']'

[to inc a8 result a8} // ANTLR parser correction: mismatched input '}' expecting ']'

(to inc a9 result a9] // ANTLR parser correction: mismatched input ']' expecting ')'

{to inc a10 result a10] // ANTLR parser correction: mismatched input ']' expecting '}'

// *******************************************************
// Output stops here in ForgivingTokens.js. Why?
// *******************************************************

[(to inc a11 result a11)] // ANTLR parser punts parens:
// extraneous input '(' expecting {'when', 'to', 'initialize', 'init'}
// extraneous input ')' expecting ']'

([to inc a12 result a12]) // ANTLR parser punts squares:
line 1:1 extraneous input '[' expecting {'when', 'to', 'initialize', 'init'}
line 1:23 extraneous input ']' expecting ')'

[to inc a13 result a13 // ANTLR parser adds missing ']'

(to inc a14 result a14 // ANTLR parser adds missing ')'

{to inc a15 result a15 // ANTLR parser adds missing '}'

to inc a16 result a16] // ANTLR parser ignores extra ']' (and forgiving parser adds squares)

to inc a17 result a17) // ANTLR parser ignores extra ')' (and forgiving parser adds squares)

to inc a18 result a18} // ANTLR parser ignores extra '}' (and forgiving parser adds squares)


