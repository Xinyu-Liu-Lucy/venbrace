// Generated from Venbrace.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('./antlr4/index');
var VenbraceListener = require('./VenbraceListener').VenbraceListener;
var grammarFileName = "Venbrace.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u007f\u030a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002d\n\u0002\f\u0002\u000e\u0002g\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "t\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0087\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u0097",
    "\n\u0007\f\u0007\u000e\u0007\u009a\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u009e\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00a9\n\b\f\b\u000e",
    "\b\u00ac\u000b\b\u0003\b\u0003\b\u0005\b\u00b0\n\b\u0003\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00ba\n\t\f\t\u000e",
    "\t\u00bd\u000b\t\u0003\t\u0003\t\u0005\t\u00c1\n\t\u0003\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0007\n\u00c9\n\n\f\n\u000e\n\u00cc\u000b",
    "\n\u0003\n\u0003\n\u0003\n\u0005\n\u00d1\n\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00e1\n\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00ec",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u00f9\n\u000e\f\u000e\u000e\u000e\u00fc\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0102\n\u000e\u0005",
    "\u000e\u0104\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u010b\n\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0111\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u0117\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u011d\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0126\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u012c\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0133\n\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u013b",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0140\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0145\n\u0011\f\u0011",
    "\u000e\u0011\u0148\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0151\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0157\n",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u015b\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0169\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u0189\n\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0191\n",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0005\u0019\u01ac\n\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01bf\n\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u01d4\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01f5\n",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0006\u001e\u01fe\n\u001e\r\u001e\u000e\u001e\u01ff",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0006\u001e\u0206\n",
    "\u001e\r\u001e\u000e\u001e\u0207\u0005\u001e\u020a\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0005\u001f\u0219\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0222\n\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u022d\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0006 \u0234",
    "\n \r \u000e \u0235\u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0005!\u024d\n!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0005%\u027d\n%\u0003%\u0003%\u0003%\u0003%\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u0288\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0005&\u028e\n&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u02a0\n\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0006)\u02af\n)\r)\u000e",
    ")\u02b0\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u02c9\n,\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u02cf\n,\u0003-\u0003-\u0003-\u0003-\u0005-\u02d5\n-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u02dd\n-\u0003-\u0003-\u0003-\u0005",
    "-\u02e2\n-\u0003-\u0003-\u0003-\u0007-\u02e7\n-\f-\u000e-\u02ea\u000b",
    "-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u02f7\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0305\n/\u00030\u00030\u0003",
    "0\u00030\u0002\u00021\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^\u0002",
    "\u0002\u0002\u033d\u0002e\u0003\u0002\u0002\u0002\u0004s\u0003\u0002",
    "\u0002\u0002\u0006u\u0003\u0002\u0002\u0002\b\u0086\u0003\u0002\u0002",
    "\u0002\n\u0088\u0003\u0002\u0002\u0002\f\u0090\u0003\u0002\u0002\u0002",
    "\u000e\u00a2\u0003\u0002\u0002\u0002\u0010\u00b4\u0003\u0002\u0002\u0002",
    "\u0012\u00d0\u0003\u0002\u0002\u0002\u0014\u00d2\u0003\u0002\u0002\u0002",
    "\u0016\u00e0\u0003\u0002\u0002\u0002\u0018\u00eb\u0003\u0002\u0002\u0002",
    "\u001a\u00ed\u0003\u0002\u0002\u0002\u001c\u0105\u0003\u0002\u0002\u0002",
    "\u001e\u0121\u0003\u0002\u0002\u0002 \u0132\u0003\u0002\u0002\u0002",
    "\"\u0149\u0003\u0002\u0002\u0002$\u014c\u0003\u0002\u0002\u0002&\u0168",
    "\u0003\u0002\u0002\u0002(\u0188\u0003\u0002\u0002\u0002*\u0190\u0003",
    "\u0002\u0002\u0002,\u0192\u0003\u0002\u0002\u0002.\u019c\u0003\u0002",
    "\u0002\u00020\u01a4\u0003\u0002\u0002\u00022\u01b1\u0003\u0002\u0002",
    "\u00024\u01b7\u0003\u0002\u0002\u00026\u01c4\u0003\u0002\u0002\u0002",
    "8\u01f4\u0003\u0002\u0002\u0002:\u01f6\u0003\u0002\u0002\u0002<\u020e",
    "\u0003\u0002\u0002\u0002>\u0226\u0003\u0002\u0002\u0002@\u023a\u0003",
    "\u0002\u0002\u0002B\u0253\u0003\u0002\u0002\u0002D\u025c\u0003\u0002",
    "\u0002\u0002F\u0265\u0003\u0002\u0002\u0002H\u026e\u0003\u0002\u0002",
    "\u0002J\u0282\u0003\u0002\u0002\u0002L\u029f\u0003\u0002\u0002\u0002",
    "N\u02a1\u0003\u0002\u0002\u0002P\u02a7\u0003\u0002\u0002\u0002R\u02b5",
    "\u0003\u0002\u0002\u0002T\u02bb\u0003\u0002\u0002\u0002V\u02ce\u0003",
    "\u0002\u0002\u0002X\u02d0\u0003\u0002\u0002\u0002Z\u02f6\u0003\u0002",
    "\u0002\u0002\\\u0304\u0003\u0002\u0002\u0002^\u0306\u0003\u0002\u0002",
    "\u0002`a\u0005\u0006\u0004\u0002ab\b\u0002\u0001\u0002bd\u0003\u0002",
    "\u0002\u0002c`\u0003\u0002\u0002\u0002dg\u0003\u0002\u0002\u0002ec\u0003",
    "\u0002\u0002\u0002ef\u0003\u0002\u0002\u0002fh\u0003\u0002\u0002\u0002",
    "ge\u0003\u0002\u0002\u0002hi\u0007\u0002\u0002\u0003i\u0003\u0003\u0002",
    "\u0002\u0002jk\u0005\u0006\u0004\u0002kl\b\u0003\u0001\u0002lt\u0003",
    "\u0002\u0002\u0002mn\u0005\u0014\u000b\u0002no\b\u0003\u0001\u0002o",
    "t\u0003\u0002\u0002\u0002pq\u0005&\u0014\u0002qr\b\u0003\u0001\u0002",
    "rt\u0003\u0002\u0002\u0002sj\u0003\u0002\u0002\u0002sm\u0003\u0002\u0002",
    "\u0002sp\u0003\u0002\u0002\u0002t\u0005\u0003\u0002\u0002\u0002uv\u0007",
    "\n\u0002\u0002vw\u0005\b\u0005\u0002wx\u0007\u000b\u0002\u0002xy\b\u0004",
    "\u0001\u0002y\u0007\u0003\u0002\u0002\u0002z{\u0005\n\u0006\u0002{|",
    "\b\u0005\u0001\u0002|\u0087\u0003\u0002\u0002\u0002}~\u0005\f\u0007",
    "\u0002~\u007f\b\u0005\u0001\u0002\u007f\u0087\u0003\u0002\u0002\u0002",
    "\u0080\u0081\u0005\u000e\b\u0002\u0081\u0082\b\u0005\u0001\u0002\u0082",
    "\u0087\u0003\u0002\u0002\u0002\u0083\u0084\u0005\u0010\t\u0002\u0084",
    "\u0085\b\u0005\u0001\u0002\u0085\u0087\u0003\u0002\u0002\u0002\u0086",
    "z\u0003\u0002\u0002\u0002\u0086}\u0003\u0002\u0002\u0002\u0086\u0080",
    "\u0003\u0002\u0002\u0002\u0086\u0083\u0003\u0002\u0002\u0002\u0087\t",
    "\u0003\u0002\u0002\u0002\u0088\u0089\u0007 \u0002\u0002\u0089\u008a",
    "\u0007\u001f\u0002\u0002\u008a\u008b\u0007~\u0002\u0002\u008b\u008c",
    "\u0007\u001b\u0002\u0002\u008c\u008d\b\u0006\u0001\u0002\u008d\u008e",
    "\u0005&\u0014\u0002\u008e\u008f\b\u0006\u0001\u0002\u008f\u000b\u0003",
    "\u0002\u0002\u0002\u0090\u0091\u0007\u001b\u0002\u0002\u0091\u0092\b",
    "\u0007\u0001\u0002\u0092\u0093\u0007~\u0002\u0002\u0093\u0098\b\u0007",
    "\u0001\u0002\u0094\u0095\u0007~\u0002\u0002\u0095\u0097\b\u0007\u0001",
    "\u0002\u0096\u0094\u0003\u0002\u0002\u0002\u0097\u009a\u0003\u0002\u0002",
    "\u0002\u0098\u0096\u0003\u0002\u0002\u0002\u0098\u0099\u0003\u0002\u0002",
    "\u0002\u0099\u009d\u0003\u0002\u0002\u0002\u009a\u0098\u0003\u0002\u0002",
    "\u0002\u009b\u009c\u0007\u0019\u0002\u0002\u009c\u009e\b\u0007\u0001",
    "\u0002\u009d\u009b\u0003\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002",
    "\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a0\u0005\u0012\n",
    "\u0002\u00a0\u00a1\b\u0007\u0001\u0002\u00a1\r\u0003\u0002\u0002\u0002",
    "\u00a2\u00a3\u0007\u001b\u0002\u0002\u00a3\u00a4\b\b\u0001\u0002\u00a4",
    "\u00a5\u0007~\u0002\u0002\u00a5\u00aa\b\b\u0001\u0002\u00a6\u00a7\u0007",
    "~\u0002\u0002\u00a7\u00a9\b\b\u0001\u0002\u00a8\u00a6\u0003\u0002\u0002",
    "\u0002\u00a9\u00ac\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002",
    "\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u00af\u0003\u0002\u0002",
    "\u0002\u00ac\u00aa\u0003\u0002\u0002\u0002\u00ad\u00ae\u0007\u001a\u0002",
    "\u0002\u00ae\u00b0\b\b\u0001\u0002\u00af\u00ad\u0003\u0002\u0002\u0002",
    "\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002",
    "\u00b1\u00b2\u0005&\u0014\u0002\u00b2\u00b3\b\b\u0001\u0002\u00b3\u000f",
    "\u0003\u0002\u0002\u0002\u00b4\u00b5\u0007\u0013\u0002\u0002\u00b5\u00b6",
    "\u0007}\u0002\u0002\u00b6\u00bb\b\t\u0001\u0002\u00b7\u00b8\u0007~\u0002",
    "\u0002\u00b8\u00ba\b\t\u0001\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002",
    "\u00ba\u00bd\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002",
    "\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00c0\u0003\u0002\u0002\u0002",
    "\u00bd\u00bb\u0003\u0002\u0002\u0002\u00be\u00bf\u0007\u0019\u0002\u0002",
    "\u00bf\u00c1\b\t\u0001\u0002\u00c0\u00be\u0003\u0002\u0002\u0002\u00c0",
    "\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2",
    "\u00c3\u0005\u0012\n\u0002\u00c3\u00c4\b\t\u0001\u0002\u00c4\u0011\u0003",
    "\u0002\u0002\u0002\u00c5\u00c6\u0005\u0014\u000b\u0002\u00c6\u00c7\b",
    "\n\u0001\u0002\u00c7\u00c9\u0003\u0002\u0002\u0002\u00c8\u00c5\u0003",
    "\u0002\u0002\u0002\u00c9\u00cc\u0003\u0002\u0002\u0002\u00ca\u00c8\u0003",
    "\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00d1\u0003",
    "\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cd\u00ce\u0007",
    "\u0006\u0002\u0002\u00ce\u00cf\u0007\u0007\u0002\u0002\u00cf\u00d1\b",
    "\n\u0001\u0002\u00d0\u00ca\u0003\u0002\u0002\u0002\u00d0\u00cd\u0003",
    "\u0002\u0002\u0002\u00d1\u0013\u0003\u0002\u0002\u0002\u00d2\u00d3\u0007",
    "\u0006\u0002\u0002\u00d3\u00d4\u0005\u0016\f\u0002\u00d4\u00d5\u0007",
    "\u0007\u0002\u0002\u00d5\u00d6\b\u000b\u0001\u0002\u00d6\u0015\u0003",
    "\u0002\u0002\u0002\u00d7\u00d8\u0005\u0018\r\u0002\u00d8\u00d9\b\f\u0001",
    "\u0002\u00d9\u00e1\u0003\u0002\u0002\u0002\u00da\u00db\u0005 \u0011",
    "\u0002\u00db\u00dc\b\f\u0001\u0002\u00dc\u00e1\u0003\u0002\u0002\u0002",
    "\u00dd\u00de\u0005\"\u0012\u0002\u00de\u00df\b\f\u0001\u0002\u00df\u00e1",
    "\u0003\u0002\u0002\u0002\u00e0\u00d7\u0003\u0002\u0002\u0002\u00e0\u00da",
    "\u0003\u0002\u0002\u0002\u00e0\u00dd\u0003\u0002\u0002\u0002\u00e1\u0017",
    "\u0003\u0002\u0002\u0002\u00e2\u00e3\u0005\u001a\u000e\u0002\u00e3\u00e4",
    "\b\r\u0001\u0002\u00e4\u00ec\u0003\u0002\u0002\u0002\u00e5\u00e6\u0005",
    "\u001c\u000f\u0002\u00e6\u00e7\b\r\u0001\u0002\u00e7\u00ec\u0003\u0002",
    "\u0002\u0002\u00e8\u00e9\u0005\u001e\u0010\u0002\u00e9\u00ea\b\r\u0001",
    "\u0002\u00ea\u00ec\u0003\u0002\u0002\u0002\u00eb\u00e2\u0003\u0002\u0002",
    "\u0002\u00eb\u00e5\u0003\u0002\u0002\u0002\u00eb\u00e8\u0003\u0002\u0002",
    "\u0002\u00ec\u0019\u0003\u0002\u0002\u0002\u00ed\u00ee\u0007\u0014\u0002",
    "\u0002\u00ee\u00ef\u0005&\u0014\u0002\u00ef\u00f0\u0007\u0015\u0002",
    "\u0002\u00f0\u00f1\u0005\u0012\n\u0002\u00f1\u0103\b\u000e\u0001\u0002",
    "\u00f2\u00f3\u0007\u0017\u0002\u0002\u00f3\u00f4\u0005&\u0014\u0002",
    "\u00f4\u00f5\u0007\u0015\u0002\u0002\u00f5\u00f6\u0005\u0012\n\u0002",
    "\u00f6\u00f7\b\u000e\u0001\u0002\u00f7\u00f9\u0003\u0002\u0002\u0002",
    "\u00f8\u00f2\u0003\u0002\u0002\u0002\u00f9\u00fc\u0003\u0002\u0002\u0002",
    "\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002",
    "\u00fb\u0101\u0003\u0002\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002",
    "\u00fd\u00fe\u0007\u0016\u0002\u0002\u00fe\u00ff\u0005\u0012\n\u0002",
    "\u00ff\u0100\b\u000e\u0001\u0002\u0100\u0102\u0003\u0002\u0002\u0002",
    "\u0101\u00fd\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002\u0002",
    "\u0102\u0104\u0003\u0002\u0002\u0002\u0103\u00fa\u0003\u0002\u0002\u0002",
    "\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u001b\u0003\u0002\u0002\u0002",
    "\u0105\u0106\u0007\u0018\u0002\u0002\u0106\u0107\u0007~\u0002\u0002",
    "\u0107\u010a\b\u000f\u0001\u0002\u0108\u0109\u0007$\u0002\u0002\u0109",
    "\u010b\b\u000f\u0001\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c",
    "\u010d\u0005&\u0014\u0002\u010d\u0110\b\u000f\u0001\u0002\u010e\u010f",
    "\u0007\u001b\u0002\u0002\u010f\u0111\b\u000f\u0001\u0002\u0110\u010e",
    "\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u0112",
    "\u0003\u0002\u0002\u0002\u0112\u0113\u0005&\u0014\u0002\u0113\u0116",
    "\b\u000f\u0001\u0002\u0114\u0115\u0007#\u0002\u0002\u0115\u0117\b\u000f",
    "\u0001\u0002\u0116\u0114\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002",
    "\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0119\u0005&",
    "\u0014\u0002\u0119\u011c\b\u000f\u0001\u0002\u011a\u011b\u0007\u0019",
    "\u0002\u0002\u011b\u011d\b\u000f\u0001\u0002\u011c\u011a\u0003\u0002",
    "\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002",
    "\u0002\u0002\u011e\u011f\u0005\u0012\n\u0002\u011f\u0120\b\u000f\u0001",
    "\u0002\u0120\u001d\u0003\u0002\u0002\u0002\u0121\u0122\u0007%\u0002",
    "\u0002\u0122\u0125\b\u0010\u0001\u0002\u0123\u0124\u0007&\u0002\u0002",
    "\u0124\u0126\b\u0010\u0001\u0002\u0125\u0123\u0003\u0002\u0002\u0002",
    "\u0125\u0126\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002",
    "\u0127\u0128\u0005&\u0014\u0002\u0128\u012b\b\u0010\u0001\u0002\u0129",
    "\u012a\u0007\u0019\u0002\u0002\u012a\u012c\b\u0010\u0001\u0002\u012b",
    "\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c",
    "\u012d\u0003\u0002\u0002\u0002\u012d\u012e\u0005\u0012\n\u0002\u012e",
    "\u012f\b\u0010\u0001\u0002\u012f\u001f\u0003\u0002\u0002\u0002\u0130",
    "\u0131\u0007\u001c\u0002\u0002\u0131\u0133\b\u0011\u0001\u0002\u0132",
    "\u0130\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133",
    "\u013a\u0003\u0002\u0002\u0002\u0134\u0135\u0007~\u0002\u0002\u0135",
    "\u013b\b\u0011\u0001\u0002\u0136\u0137\u0007~\u0002\u0002\u0137\u0138",
    "\u0007\u000e\u0002\u0002\u0138\u0139\u0007~\u0002\u0002\u0139\u013b",
    "\b\u0011\u0001\u0002\u013a\u0134\u0003\u0002\u0002\u0002\u013a\u0136",
    "\u0003\u0002\u0002\u0002\u013b\u0146\u0003\u0002\u0002\u0002\u013c\u013d",
    "\u0005^0\u0002\u013d\u013e\b\u0011\u0001\u0002\u013e\u0140\u0003\u0002",
    "\u0002\u0002\u013f\u013c\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0005&",
    "\u0014\u0002\u0142\u0143\b\u0011\u0001\u0002\u0143\u0145\u0003\u0002",
    "\u0002\u0002\u0144\u013f\u0003\u0002\u0002\u0002\u0145\u0148\u0003\u0002",
    "\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002",
    "\u0002\u0002\u0147!\u0003\u0002\u0002\u0002\u0148\u0146\u0003\u0002",
    "\u0002\u0002\u0149\u014a\u0005$\u0013\u0002\u014a\u014b\b\u0012\u0001",
    "\u0002\u014b#\u0003\u0002\u0002\u0002\u014c\u014d\u0007\u001e\u0002",
    "\u0002\u014d\u0156\b\u0013\u0001\u0002\u014e\u014f\u0007\u001f\u0002",
    "\u0002\u014f\u0151\b\u0013\u0001\u0002\u0150\u014e\u0003\u0002\u0002",
    "\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002",
    "\u0002\u0152\u0153\u0007~\u0002\u0002\u0153\u0157\b\u0013\u0001\u0002",
    "\u0154\u0155\u0007}\u0002\u0002\u0155\u0157\b\u0013\u0001\u0002\u0156",
    "\u0150\u0003\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002\u0002\u0157",
    "\u015a\u0003\u0002\u0002\u0002\u0158\u0159\u0007\u001b\u0002\u0002\u0159",
    "\u015b\b\u0013\u0001\u0002\u015a\u0158\u0003\u0002\u0002\u0002\u015a",
    "\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c",
    "\u015d\u0005&\u0014\u0002\u015d\u015e\b\u0013\u0001\u0002\u015e%\u0003",
    "\u0002\u0002\u0002\u015f\u0160\u0007\b\u0002\u0002\u0160\u0161\u0007",
    "\t\u0002\u0002\u0161\u0169\b\u0014\u0001\u0002\u0162\u0163\u0005Z.\u0002",
    "\u0163\u0164\b\u0014\u0001\u0002\u0164\u0169\u0003\u0002\u0002\u0002",
    "\u0165\u0166\u0005(\u0015\u0002\u0166\u0167\b\u0014\u0001\u0002\u0167",
    "\u0169\u0003\u0002\u0002\u0002\u0168\u015f\u0003\u0002\u0002\u0002\u0168",
    "\u0162\u0003\u0002\u0002\u0002\u0168\u0165\u0003\u0002\u0002\u0002\u0169",
    "\'\u0003\u0002\u0002\u0002\u016a\u016b\u0005V,\u0002\u016b\u016c\b\u0015",
    "\u0001\u0002\u016c\u0189\u0003\u0002\u0002\u0002\u016d\u016e\u0005*",
    "\u0016\u0002\u016e\u016f\b\u0015\u0001\u0002\u016f\u0189\u0003\u0002",
    "\u0002\u0002\u0170\u0171\u00050\u0019\u0002\u0171\u0172\b\u0015\u0001",
    "\u0002\u0172\u0189\u0003\u0002\u0002\u0002\u0173\u0174\u00052\u001a",
    "\u0002\u0174\u0175\b\u0015\u0001\u0002\u0175\u0189\u0003\u0002\u0002",
    "\u0002\u0176\u0177\u00054\u001b\u0002\u0177\u0178\b\u0015\u0001\u0002",
    "\u0178\u0189\u0003\u0002\u0002\u0002\u0179\u017a\u00056\u001c\u0002",
    "\u017a\u017b\b\u0015\u0001\u0002\u017b\u0189\u0003\u0002\u0002\u0002",
    "\u017c\u017d\u00058\u001d\u0002\u017d\u017e\b\u0015\u0001\u0002\u017e",
    "\u0189\u0003\u0002\u0002\u0002\u017f\u0180\u0005L\'\u0002\u0180\u0181",
    "\b\u0015\u0001\u0002\u0181\u0189\u0003\u0002\u0002\u0002\u0182\u0183",
    "\u0005X-\u0002\u0183\u0184\b\u0015\u0001\u0002\u0184\u0189\u0003\u0002",
    "\u0002\u0002\u0185\u0186\u0005Z.\u0002\u0186\u0187\b\u0015\u0001\u0002",
    "\u0187\u0189\u0003\u0002\u0002\u0002\u0188\u016a\u0003\u0002\u0002\u0002",
    "\u0188\u016d\u0003\u0002\u0002\u0002\u0188\u0170\u0003\u0002\u0002\u0002",
    "\u0188\u0173\u0003\u0002\u0002\u0002\u0188\u0176\u0003\u0002\u0002\u0002",
    "\u0188\u0179\u0003\u0002\u0002\u0002\u0188\u017c\u0003\u0002\u0002\u0002",
    "\u0188\u017f\u0003\u0002\u0002\u0002\u0188\u0182\u0003\u0002\u0002\u0002",
    "\u0188\u0185\u0003\u0002\u0002\u0002\u0189)\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0005,\u0017\u0002\u018b\u018c\b\u0016\u0001\u0002\u018c",
    "\u0191\u0003\u0002\u0002\u0002\u018d\u018e\u0005.\u0018\u0002\u018e",
    "\u018f\b\u0016\u0001\u0002\u018f\u0191\u0003\u0002\u0002\u0002\u0190",
    "\u018a\u0003\u0002\u0002\u0002\u0190\u018d\u0003\u0002\u0002\u0002\u0191",
    "+\u0003\u0002\u0002\u0002\u0192\u0193\u0007\b\u0002\u0002\u0193\u0194",
    "\u0007\u0014\u0002\u0002\u0194\u0195\u0005&\u0014\u0002\u0195\u0196",
    "\u0007\u0015\u0002\u0002\u0196\u0197\u0005&\u0014\u0002\u0197\u0198",
    "\u0007\u0016\u0002\u0002\u0198\u0199\u0005&\u0014\u0002\u0199\u019a",
    "\u0007\t\u0002\u0002\u019a\u019b\b\u0017\u0001\u0002\u019b-\u0003\u0002",
    "\u0002\u0002\u019c\u019d\u0007\b\u0002\u0002\u019d\u019e\u0007\u0019",
    "\u0002\u0002\u019e\u019f\u0005\u0012\n\u0002\u019f\u01a0\u0007\u001a",
    "\u0002\u0002\u01a0\u01a1\u0005&\u0014\u0002\u01a1\u01a2\u0007\t\u0002",
    "\u0002\u01a2\u01a3\b\u0018\u0001\u0002\u01a3/\u0003\u0002\u0002\u0002",
    "\u01a4\u01a5\u0007\b\u0002\u0002\u01a5\u01a6\u0005&\u0014\u0002\u01a6",
    "\u01ab\b\u0019\u0001\u0002\u01a7\u01a8\u00075\u0002\u0002\u01a8\u01ac",
    "\b\u0019\u0001\u0002\u01a9\u01aa\u00076\u0002\u0002\u01aa\u01ac\b\u0019",
    "\u0001\u0002\u01ab\u01a7\u0003\u0002\u0002\u0002\u01ab\u01a9\u0003\u0002",
    "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ae\u0005&",
    "\u0014\u0002\u01ae\u01af\u0007\t\u0002\u0002\u01af\u01b0\b\u0019\u0001",
    "\u0002\u01b01\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007\b\u0002\u0002",
    "\u01b2\u01b3\u00074\u0002\u0002\u01b3\u01b4\u0005&\u0014\u0002\u01b4",
    "\u01b5\u0007\t\u0002\u0002\u01b5\u01b6\b\u001a\u0001\u0002\u01b63\u0003",
    "\u0002\u0002\u0002\u01b7\u01b8\u0007\b\u0002\u0002\u01b8\u01b9\u0005",
    "&\u0014\u0002\u01b9\u01be\b\u001b\u0001\u0002\u01ba\u01bb\u0007>\u0002",
    "\u0002\u01bb\u01bf\b\u001b\u0001\u0002\u01bc\u01bd\u0007?\u0002\u0002",
    "\u01bd\u01bf\b\u001b\u0001\u0002\u01be\u01ba\u0003\u0002\u0002\u0002",
    "\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002",
    "\u01c0\u01c1\u0005&\u0014\u0002\u01c1\u01c2\u0007\t\u0002\u0002\u01c2",
    "\u01c3\b\u001b\u0001\u0002\u01c35\u0003\u0002\u0002\u0002\u01c4\u01c5",
    "\u0007\b\u0002\u0002\u01c5\u01c6\u0005&\u0014\u0002\u01c6\u01d3\b\u001c",
    "\u0001\u0002\u01c7\u01c8\u0007<\u0002\u0002\u01c8\u01d4\b\u001c\u0001",
    "\u0002\u01c9\u01ca\u0007=\u0002\u0002\u01ca\u01d4\b\u001c\u0001\u0002",
    "\u01cb\u01cc\u00079\u0002\u0002\u01cc\u01d4\b\u001c\u0001\u0002\u01cd",
    "\u01ce\u0007;\u0002\u0002\u01ce\u01d4\b\u001c\u0001\u0002\u01cf\u01d0",
    "\u00078\u0002\u0002\u01d0\u01d4\b\u001c\u0001\u0002\u01d1\u01d2\u0007",
    ":\u0002\u0002\u01d2\u01d4\b\u001c\u0001\u0002\u01d3\u01c7\u0003\u0002",
    "\u0002\u0002\u01d3\u01c9\u0003\u0002\u0002\u0002\u01d3\u01cb\u0003\u0002",
    "\u0002\u0002\u01d3\u01cd\u0003\u0002\u0002\u0002\u01d3\u01cf\u0003\u0002",
    "\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002",
    "\u0002\u0002\u01d5\u01d6\u0005&\u0014\u0002\u01d6\u01d7\u0007\t\u0002",
    "\u0002\u01d7\u01d8\b\u001c\u0001\u0002\u01d87\u0003\u0002\u0002\u0002",
    "\u01d9\u01da\u0005:\u001e\u0002\u01da\u01db\b\u001d\u0001\u0002\u01db",
    "\u01f5\u0003\u0002\u0002\u0002\u01dc\u01dd\u0005<\u001f\u0002\u01dd",
    "\u01de\b\u001d\u0001\u0002\u01de\u01f5\u0003\u0002\u0002\u0002\u01df",
    "\u01e0\u0005> \u0002\u01e0\u01e1\b\u001d\u0001\u0002\u01e1\u01f5\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0005@!\u0002\u01e3\u01e4\b\u001d\u0001",
    "\u0002\u01e4\u01f5\u0003\u0002\u0002\u0002\u01e5\u01e6\u0005B\"\u0002",
    "\u01e6\u01e7\b\u001d\u0001\u0002\u01e7\u01f5\u0003\u0002\u0002\u0002",
    "\u01e8\u01e9\u0005D#\u0002\u01e9\u01ea\b\u001d\u0001\u0002\u01ea\u01f5",
    "\u0003\u0002\u0002\u0002\u01eb\u01ec\u0005F$\u0002\u01ec\u01ed\b\u001d",
    "\u0001\u0002\u01ed\u01f5\u0003\u0002\u0002\u0002\u01ee\u01ef\u0005H",
    "%\u0002\u01ef\u01f0\b\u001d\u0001\u0002\u01f0\u01f5\u0003\u0002\u0002",
    "\u0002\u01f1\u01f2\u0005J&\u0002\u01f2\u01f3\b\u001d\u0001\u0002\u01f3",
    "\u01f5\u0003\u0002\u0002\u0002\u01f4\u01d9\u0003\u0002\u0002\u0002\u01f4",
    "\u01dc\u0003\u0002\u0002\u0002\u01f4\u01df\u0003\u0002\u0002\u0002\u01f4",
    "\u01e2\u0003\u0002\u0002\u0002\u01f4\u01e5\u0003\u0002\u0002\u0002\u01f4",
    "\u01e8\u0003\u0002\u0002\u0002\u01f4\u01eb\u0003\u0002\u0002\u0002\u01f4",
    "\u01ee\u0003\u0002\u0002\u0002\u01f4\u01f1\u0003\u0002\u0002\u0002\u01f5",
    "9\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007\b\u0002\u0002\u01f7\u01f8",
    "\u0005&\u0014\u0002\u01f8\u0209\b\u001e\u0001\u0002\u01f9\u01fa\u0007",
    "@\u0002\u0002\u01fa\u01fb\u0005&\u0014\u0002\u01fb\u01fc\b\u001e\u0001",
    "\u0002\u01fc\u01fe\u0003\u0002\u0002\u0002\u01fd\u01f9\u0003\u0002\u0002",
    "\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002",
    "\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u020a\u0003\u0002\u0002",
    "\u0002\u0201\u0202\u0007B\u0002\u0002\u0202\u0203\u0005&\u0014\u0002",
    "\u0203\u0204\b\u001e\u0001\u0002\u0204\u0206\u0003\u0002\u0002\u0002",
    "\u0205\u0201\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002",
    "\u0207\u0205\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002",
    "\u0208\u020a\u0003\u0002\u0002\u0002\u0209\u01fd\u0003\u0002\u0002\u0002",
    "\u0209\u0205\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002",
    "\u020b\u020c\u0007\t\u0002\u0002\u020c\u020d\b\u001e\u0001\u0002\u020d",
    ";\u0003\u0002\u0002\u0002\u020e\u020f\u0007\b\u0002\u0002\u020f\u0221",
    "\b\u001f\u0001\u0002\u0210\u0211\u0005&\u0014\u0002\u0211\u0218\b\u001f",
    "\u0001\u0002\u0212\u0213\u0007A\u0002\u0002\u0213\u0219\b\u001f\u0001",
    "\u0002\u0214\u0215\u0007C\u0002\u0002\u0215\u0219\b\u001f\u0001\u0002",
    "\u0216\u0217\u0007D\u0002\u0002\u0217\u0219\b\u001f\u0001\u0002\u0218",
    "\u0212\u0003\u0002\u0002\u0002\u0218\u0214\u0003\u0002\u0002\u0002\u0218",
    "\u0216\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a",
    "\u021b\u0005&\u0014\u0002\u021b\u021c\b\u001f\u0001\u0002\u021c\u0222",
    "\u0003\u0002\u0002\u0002\u021d\u021e\u0005&\u0014\u0002\u021e\u021f",
    "\u0007|\u0002\u0002\u021f\u0220\b\u001f\u0001\u0002\u0220\u0222\u0003",
    "\u0002\u0002\u0002\u0221\u0210\u0003\u0002\u0002\u0002\u0221\u021d\u0003",
    "\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u0224\u0007",
    "\t\u0002\u0002\u0224\u0225\b\u001f\u0001\u0002\u0225=\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0007\b\u0002\u0002\u0227\u022c\b \u0001\u0002\u0228",
    "\u0229\u0007T\u0002\u0002\u0229\u022d\b \u0001\u0002\u022a\u022b\u0007",
    "U\u0002\u0002\u022b\u022d\b \u0001\u0002\u022c\u0228\u0003\u0002\u0002",
    "\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002",
    "\u0002\u022e\u022f\u0005&\u0014\u0002\u022f\u0233\b \u0001\u0002\u0230",
    "\u0231\u0005&\u0014\u0002\u0231\u0232\b \u0001\u0002\u0232\u0234\u0003",
    "\u0002\u0002\u0002\u0233\u0230\u0003\u0002\u0002\u0002\u0234\u0235\u0003",
    "\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003",
    "\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0238\u0007",
    "\t\u0002\u0002\u0238\u0239\b \u0001\u0002\u0239?\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0007\b\u0002\u0002\u023b\u024c\b!\u0001\u0002\u023c\u023d",
    "\u0007J\u0002\u0002\u023d\u024d\b!\u0001\u0002\u023e\u023f\u0007K\u0002",
    "\u0002\u023f\u024d\b!\u0001\u0002\u0240\u0241\u0007L\u0002\u0002\u0241",
    "\u024d\b!\u0001\u0002\u0242\u0243\u0007M\u0002\u0002\u0243\u024d\b!",
    "\u0001\u0002\u0244\u0245\u0007N\u0002\u0002\u0245\u024d\b!\u0001\u0002",
    "\u0246\u0247\u0007O\u0002\u0002\u0247\u024d\b!\u0001\u0002\u0248\u0249",
    "\u0007P\u0002\u0002\u0249\u024d\b!\u0001\u0002\u024a\u024b\u0007Q\u0002",
    "\u0002\u024b\u024d\b!\u0001\u0002\u024c\u023c\u0003\u0002\u0002\u0002",
    "\u024c\u023e\u0003\u0002\u0002\u0002\u024c\u0240\u0003\u0002\u0002\u0002",
    "\u024c\u0242\u0003\u0002\u0002\u0002\u024c\u0244\u0003\u0002\u0002\u0002",
    "\u024c\u0246\u0003\u0002\u0002\u0002\u024c\u0248\u0003\u0002\u0002\u0002",
    "\u024c\u024a\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002",
    "\u024e\u024f\u0005&\u0014\u0002\u024f\u0250\b!\u0001\u0002\u0250\u0251",
    "\u0007\t\u0002\u0002\u0251\u0252\b!\u0001\u0002\u0252A\u0003\u0002\u0002",
    "\u0002\u0253\u0254\u0007\b\u0002\u0002\u0254\u0255\u0007V\u0002\u0002",
    "\u0255\u0256\u0007Y\u0002\u0002\u0256\u0257\u0005&\u0014\u0002\u0257",
    "\u0258\u0007C\u0002\u0002\u0258\u0259\u0005&\u0014\u0002\u0259\u025a",
    "\u0007\t\u0002\u0002\u025a\u025b\b\"\u0001\u0002\u025bC\u0003\u0002",
    "\u0002\u0002\u025c\u025d\u0007\b\u0002\u0002\u025d\u025e\u0007W\u0002",
    "\u0002\u025e\u025f\u0007Y\u0002\u0002\u025f\u0260\u0005&\u0014\u0002",
    "\u0260\u0261\u0007C\u0002\u0002\u0261\u0262\u0005&\u0014\u0002\u0262",
    "\u0263\u0007\t\u0002\u0002\u0263\u0264\b#\u0001\u0002\u0264E\u0003\u0002",
    "\u0002\u0002\u0265\u0266\u0007\b\u0002\u0002\u0266\u0267\u0007X\u0002",
    "\u0002\u0267\u0268\u0007Y\u0002\u0002\u0268\u0269\u0005&\u0014\u0002",
    "\u0269\u026a\u0007C\u0002\u0002\u026a\u026b\u0005&\u0014\u0002\u026b",
    "\u026c\u0007\t\u0002\u0002\u026c\u026d\b$\u0001\u0002\u026dG\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0007\b\u0002\u0002\u026f\u027c\b%\u0001\u0002",
    "\u0270\u0271\u0007[\u0002\u0002\u0271\u027d\b%\u0001\u0002\u0272\u0273",
    "\u0007\\\u0002\u0002\u0273\u027d\b%\u0001\u0002\u0274\u0275\u0007]\u0002",
    "\u0002\u0275\u027d\b%\u0001\u0002\u0276\u0277\u0007^\u0002\u0002\u0277",
    "\u027d\b%\u0001\u0002\u0278\u0279\u0007_\u0002\u0002\u0279\u027d\b%",
    "\u0001\u0002\u027a\u027b\u0007`\u0002\u0002\u027b\u027d\b%\u0001\u0002",
    "\u027c\u0270\u0003\u0002\u0002\u0002\u027c\u0272\u0003\u0002\u0002\u0002",
    "\u027c\u0274\u0003\u0002\u0002\u0002\u027c\u0276\u0003\u0002\u0002\u0002",
    "\u027c\u0278\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002",
    "\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u027f\u0005&\u0014\u0002",
    "\u027f\u0280\u0007\t\u0002\u0002\u0280\u0281\b%\u0001\u0002\u0281I\u0003",
    "\u0002\u0002\u0002\u0282\u0283\u0007\b\u0002\u0002\u0283\u0284\u0007",
    "a\u0002\u0002\u0284\u0287\b&\u0001\u0002\u0285\u0286\u0007\u0003\u0002",
    "\u0002\u0286\u0288\b&\u0001\u0002\u0287\u0285\u0003\u0002\u0002\u0002",
    "\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002",
    "\u0289\u028a\u0005&\u0014\u0002\u028a\u028d\b&\u0001\u0002\u028b\u028c",
    "\u0007\u0004\u0002\u0002\u028c\u028e\b&\u0001\u0002\u028d\u028b\u0003",
    "\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u028f\u0003",
    "\u0002\u0002\u0002\u028f\u0290\u0005&\u0014\u0002\u0290\u0291\u0007",
    "\t\u0002\u0002\u0291\u0292\b&\u0001\u0002\u0292K\u0003\u0002\u0002\u0002",
    "\u0293\u0294\u0005P)\u0002\u0294\u0295\b\'\u0001\u0002\u0295\u02a0\u0003",
    "\u0002\u0002\u0002\u0296\u0297\u0005N(\u0002\u0297\u0298\b\'\u0001\u0002",
    "\u0298\u02a0\u0003\u0002\u0002\u0002\u0299\u029a\u0005R*\u0002\u029a",
    "\u029b\b\'\u0001\u0002\u029b\u02a0\u0003\u0002\u0002\u0002\u029c\u029d",
    "\u0005T+\u0002\u029d\u029e\b\'\u0001\u0002\u029e\u02a0\u0003\u0002\u0002",
    "\u0002\u029f\u0293\u0003\u0002\u0002\u0002\u029f\u0296\u0003\u0002\u0002",
    "\u0002\u029f\u0299\u0003\u0002\u0002\u0002\u029f\u029c\u0003\u0002\u0002",
    "\u0002\u02a0M\u0003\u0002\u0002\u0002\u02a1\u02a2\u0007\b\u0002\u0002",
    "\u02a2\u02a3\u0007c\u0002\u0002\u02a3\u02a4\u0005&\u0014\u0002\u02a4",
    "\u02a5\u0007\t\u0002\u0002\u02a5\u02a6\b(\u0001\u0002\u02a6O\u0003\u0002",
    "\u0002\u0002\u02a7\u02a8\u0007\b\u0002\u0002\u02a8\u02a9\u0007b\u0002",
    "\u0002\u02a9\u02aa\u0005&\u0014\u0002\u02aa\u02ae\b)\u0001\u0002\u02ab",
    "\u02ac\u0005&\u0014\u0002\u02ac\u02ad\b)\u0001\u0002\u02ad\u02af\u0003",
    "\u0002\u0002\u0002\u02ae\u02ab\u0003\u0002\u0002\u0002\u02af\u02b0\u0003",
    "\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003",
    "\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b3\u0007",
    "\t\u0002\u0002\u02b3\u02b4\b)\u0001\u0002\u02b4Q\u0003\u0002\u0002\u0002",
    "\u02b5\u02b6\u0007\b\u0002\u0002\u02b6\u02b7\u0007u\u0002\u0002\u02b7",
    "\u02b8\u0005&\u0014\u0002\u02b8\u02b9\u0007\t\u0002\u0002\u02b9\u02ba",
    "\b*\u0001\u0002\u02baS\u0003\u0002\u0002\u0002\u02bb\u02bc\u0007\b\u0002",
    "\u0002\u02bc\u02bd\u0007o\u0002\u0002\u02bd\u02be\u0005&\u0014\u0002",
    "\u02be\u02bf\u0007\t\u0002\u0002\u02bf\u02c0\b+\u0001\u0002\u02c0U\u0003",
    "\u0002\u0002\u0002\u02c1\u02c2\u0007~\u0002\u0002\u02c2\u02cf\b,\u0001",
    "\u0002\u02c3\u02c4\u0007\b\u0002\u0002\u02c4\u02c5\u0007\u001d\u0002",
    "\u0002\u02c5\u02c8\b,\u0001\u0002\u02c6\u02c7\u0007\u001f\u0002\u0002",
    "\u02c7\u02c9\b,\u0001\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0007~\u0002\u0002\u02cb\u02cc\b,\u0001\u0002\u02cc\u02cd\u0007",
    "\t\u0002\u0002\u02cd\u02cf\b,\u0001\u0002\u02ce\u02c1\u0003\u0002\u0002",
    "\u0002\u02ce\u02c3\u0003\u0002\u0002\u0002\u02cfW\u0003\u0002\u0002",
    "\u0002\u02d0\u02d1\u0007\b\u0002\u0002\u02d1\u02d4\b-\u0001\u0002\u02d2",
    "\u02d3\u0007\u001c\u0002\u0002\u02d3\u02d5\b-\u0001\u0002\u02d4\u02d2",
    "\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5\u02dc",
    "\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007~\u0002\u0002\u02d7\u02dd",
    "\b-\u0001\u0002\u02d8\u02d9\u0007~\u0002\u0002\u02d9\u02da\u0007\u000e",
    "\u0002\u0002\u02da\u02db\u0007~\u0002\u0002\u02db\u02dd\b-\u0001\u0002",
    "\u02dc\u02d6\u0003\u0002\u0002\u0002\u02dc\u02d8\u0003\u0002\u0002\u0002",
    "\u02dd\u02e8\u0003\u0002\u0002\u0002\u02de\u02df\u0005^0\u0002\u02df",
    "\u02e0\b-\u0001\u0002\u02e0\u02e2\u0003\u0002\u0002\u0002\u02e1\u02de",
    "\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\u0003\u0002\u0002\u0002\u02e3\u02e4\u0005&\u0014\u0002\u02e4\u02e5",
    "\b-\u0001\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6\u02e1\u0003",
    "\u0002\u0002\u0002\u02e7\u02ea\u0003\u0002\u0002\u0002\u02e8\u02e6\u0003",
    "\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9\u02eb\u0003",
    "\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb\u02ec\u0007",
    "\t\u0002\u0002\u02ec\u02ed\b-\u0001\u0002\u02edY\u0003\u0002\u0002\u0002",
    "\u02ee\u02ef\u0005\\/\u0002\u02ef\u02f0\b.\u0001\u0002\u02f0\u02f7\u0003",
    "\u0002\u0002\u0002\u02f1\u02f2\u0007\b\u0002\u0002\u02f2\u02f3\u0005",
    "\\/\u0002\u02f3\u02f4\u0007\t\u0002\u0002\u02f4\u02f5\b.\u0001\u0002",
    "\u02f5\u02f7\u0003\u0002\u0002\u0002\u02f6\u02ee\u0003\u0002\u0002\u0002",
    "\u02f6\u02f1\u0003\u0002\u0002\u0002\u02f7[\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0007{\u0002\u0002\u02f9\u0305\b/\u0001\u0002\u02fa\u02fb",
    "\u0007|\u0002\u0002\u02fb\u0305\b/\u0001\u0002\u02fc\u02fd\u0007\u007f",
    "\u0002\u0002\u02fd\u0305\b/\u0001\u0002\u02fe\u02ff\u0007\u0011\u0002",
    "\u0002\u02ff\u0305\b/\u0001\u0002\u0300\u0301\u0007\u0012\u0002\u0002",
    "\u0301\u0305\b/\u0001\u0002\u0302\u0303\u0007}\u0002\u0002\u0303\u0305",
    "\b/\u0001\u0002\u0304\u02f8\u0003\u0002\u0002\u0002\u0304\u02fa\u0003",
    "\u0002\u0002\u0002\u0304\u02fc\u0003\u0002\u0002\u0002\u0304\u02fe\u0003",
    "\u0002\u0002\u0002\u0304\u0300\u0003\u0002\u0002\u0002\u0304\u0302\u0003",
    "\u0002\u0002\u0002\u0305]\u0003\u0002\u0002\u0002\u0306\u0307\u0007",
    "~\u0002\u0002\u0307\u0308\b0\u0001\u0002\u0308_\u0003\u0002\u0002\u0002",
    ";es\u0086\u0098\u009d\u00aa\u00af\u00bb\u00c0\u00ca\u00d0\u00e0\u00eb",
    "\u00fa\u0101\u0103\u010a\u0110\u0116\u011c\u0125\u012b\u0132\u013a\u013f",
    "\u0146\u0150\u0156\u015a\u0168\u0188\u0190\u01ab\u01be\u01d3\u01f4\u01ff",
    "\u0207\u0209\u0218\u0221\u022c\u0235\u024c\u027c\u0287\u028d\u029f\u02b0",
    "\u02c8\u02ce\u02d4\u02dc\u02e1\u02e8\u02f6\u0304"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'y'", "'x'", null, "'{'", "'}'", "'('", "')'", 
                     "'['", "']'", "','", "'==='", "'.'", "'<-'", "':'", 
                     "'true'", "'false'", "'when'", "'if'", "'then'", "'else'", 
                     "'else if'", "'for each'", "'do'", "'result'", "'to'", 
                     "'call'", "'get'", "'set'", "'global'", "'initialize'", 
                     "'local'", "'in'", "'by'", "'from'", "'while'", "'test'", 
                     "'evaluate but ignore'", "'open another screen'", "'open another screen with start value'", 
                     "'close screen'", "'close screen with value'", "'close screen with plain text'", 
                     "'close application'", "'screenName'", "'startValue'", 
                     "'text'", "'break'", "'get start value'", "'get plain start text'", 
                     "'not'", "'and'", "'or'", "'xor'", "'<'", "'>'", "'<='", 
                     "'>='", "'='", "'!='", null, null, "'+'", "'-'", "'*'", 
                     "'/'", "'^'", "'decimal'", "'binary'", "'octal'", "'hexadecimal'", 
                     "'bitwise'", "'square root'", "'absolute'", "'neg'", 
                     "'log'", "'e^'", "'round'", "'ceiling'", "'floor'", 
                     "'random integer'", "'random fraction'", "'min'", "'max'", 
                     "'modulo'", "'remainder'", "'quotient'", "'of'", "'convert'", 
                     "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", "'atan'", 
                     "'atan2'", "'join'", "'length'", "'is empty'", "'compare texts'", 
                     "'trim'", "'upcase'", "'downcase'", "'starts at'", 
                     "'contains'", "'split'", "'split at first'", "'split at any'", 
                     "'split at first of any'", "'split at spaces'", "'segment'", 
                     "'replace all'", "'replacement'", "'Obfuscated Text'", 
                     "'is a string?'", "'reverse'", "'mappings'", "'in text'", 
                     "'preferring'", "'longest string first'", "'dictionary'" ];

var symbolicNames = [ null, null, null, "WS", "LCURLY", "RCURLY", "LPAREN", 
                      "RPAREN", "LSQR", "RSQR", "COMMA", "DIVIDER", "DOT", 
                      "ASSIGN", "COLON", "TRUE", "FALSE", "WHEN", "IF", 
                      "THEN", "ELSE", "ELSE_IF", "FOREACH", "DO", "RESULT", 
                      "TO", "CALL", "GET", "SET", "GLOBAL", "INITIALIZE", 
                      "LOCAL", "IN", "BY", "FROM", "WHILE", "TEST", "EVAL_BUT_IGNORE_RESULT", 
                      "OPEN_ANOTHER_SCREEN", "OPEN_ANOTHER_SCREEN_WITH_START_VALUE", 
                      "CLOSE_SCREEN", "CLOSE_SCREEN_WITH_VALUE", "CLOSE_SCREEN_WITH_PLAIN_TEXT", 
                      "CLOSE_APPLICATION", "SCREEN_NAME", "START_VALUE", 
                      "TEXT", "BREAK", "GET_START_VALUE", "GET_PLAIN_START_TEXT", 
                      "NOT", "AND", "OR", "XOR", "LT", "GT", "LE", "GE", 
                      "EQ", "NEQ", "LOGIC_EQ", "LOGIC_NOT_EQ", "PLUS", "MINUS", 
                      "MUL", "DIV", "POW", "DECIMAL", "BINARY", "OCTAL", 
                      "HEXADECIMAL", "BITWISE", "SQRT", "ABS", "NEG", "LOG", 
                      "EULER", "ROUND", "CEILING", "FLOOR", "RANDOM_INTEGER", 
                      "RANDOM_FRACTION", "MIN", "MAX", "MODULO", "REMAINDER", 
                      "QUOTIENT", "OF", "CONVERT", "SIN", "COS", "TAN", 
                      "ASIN", "ACOS", "ATAN", "ATAN2", "JOIN", "LENGTH", 
                      "IS_EMPTY", "COMPARE_TEXTS", "TRIM", "UPCASE", "DOWNCASE", 
                      "STARTS_AT", "CONTAINS", "SPLIT", "SPLIT_AT_FIRST", 
                      "SPLIT_AT_ANY", "SPLIT_AT_FIRST_OF_ANY", "SPLIT_AT_SPACES", 
                      "SEGMENT", "REPLACE_ALL", "REPLACEMENT", "OBFUSCATED_TEXT", 
                      "IS_A_STR", "REVERSE", "MAPPINGS", "IN_TEXT", "PREFERRING", 
                      "LONGEST_STRING_FIRST", "DICTIONARY", "NUMBER", "NEG_NUM", 
                      "COMPONENT_PROPERTY", "ID", "STRING" ];

var ruleNames =  [ "program", "test_program", "decl_block", "decl", "global_decl", 
                   "procedure_do", "procedure_result", "event_handler", 
                   "suite", "stat_block", "stat", "control_stat", "if_stat", 
                   "for_each_from_to", "while_stat", "call_procedure_stat", 
                   "var_stat", "setter", "expr_block", "expr", "control_expr", 
                   "if_expr", "do_expr", "logic_expr", "not_expr", "compare_eq_expr", 
                   "compare_math_expr", "math_expr", "mutable_op", "immutable_op", 
                   "min_max", "unary_op", "mod", "remainder", "quotient", 
                   "trig", "atan2", "str_expr", "str_length", "str_join", 
                   "str_reverse", "str_split_at_spaces", "getter", "call_procedure_expr", 
                   "atom", "atom_elements", "label" ];

function VenbraceParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


		var errors = [];

	  VenbraceParser.prototype.emitErrorMessage = function(error) {
	        //var hdr = getErrorHeader(e);
	        //var msg = getErrorMessage(e, tokenNames);
	        errors.push(error);
	    };

	  VenbraceParser.prototype.getErrors = function() {
	        return errors;
	    };

	  VenbraceParser.prototype.recoverFromMismatchedToken = function(input, ttype, follow){
	  	throw new antlr4.runtime.MismatchedTokenException(ttype, input);
	  }

	  document.createVenbraceElement = function (tagName) {
	        var element = document.createElement(tagName);
	        element.appendChildReal = element.appendChild; // save original appendChild method
	        element.appendChild = function (child) { 
	          if (child) {
	            element.appendChildReal(child); // Only append child if not null
	          } 
	        };
	        return element;
	    }

    return this;
}

VenbraceParser.prototype = Object.create(antlr4.Parser.prototype);
VenbraceParser.prototype.constructor = VenbraceParser;

Object.defineProperty(VenbraceParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

VenbraceParser.EOF = antlr4.Token.EOF;
VenbraceParser.T__0 = 1;
VenbraceParser.T__1 = 2;
VenbraceParser.WS = 3;
VenbraceParser.LCURLY = 4;
VenbraceParser.RCURLY = 5;
VenbraceParser.LPAREN = 6;
VenbraceParser.RPAREN = 7;
VenbraceParser.LSQR = 8;
VenbraceParser.RSQR = 9;
VenbraceParser.COMMA = 10;
VenbraceParser.DIVIDER = 11;
VenbraceParser.DOT = 12;
VenbraceParser.ASSIGN = 13;
VenbraceParser.COLON = 14;
VenbraceParser.TRUE = 15;
VenbraceParser.FALSE = 16;
VenbraceParser.WHEN = 17;
VenbraceParser.IF = 18;
VenbraceParser.THEN = 19;
VenbraceParser.ELSE = 20;
VenbraceParser.ELSE_IF = 21;
VenbraceParser.FOREACH = 22;
VenbraceParser.DO = 23;
VenbraceParser.RESULT = 24;
VenbraceParser.TO = 25;
VenbraceParser.CALL = 26;
VenbraceParser.GET = 27;
VenbraceParser.SET = 28;
VenbraceParser.GLOBAL = 29;
VenbraceParser.INITIALIZE = 30;
VenbraceParser.LOCAL = 31;
VenbraceParser.IN = 32;
VenbraceParser.BY = 33;
VenbraceParser.FROM = 34;
VenbraceParser.WHILE = 35;
VenbraceParser.TEST = 36;
VenbraceParser.EVAL_BUT_IGNORE_RESULT = 37;
VenbraceParser.OPEN_ANOTHER_SCREEN = 38;
VenbraceParser.OPEN_ANOTHER_SCREEN_WITH_START_VALUE = 39;
VenbraceParser.CLOSE_SCREEN = 40;
VenbraceParser.CLOSE_SCREEN_WITH_VALUE = 41;
VenbraceParser.CLOSE_SCREEN_WITH_PLAIN_TEXT = 42;
VenbraceParser.CLOSE_APPLICATION = 43;
VenbraceParser.SCREEN_NAME = 44;
VenbraceParser.START_VALUE = 45;
VenbraceParser.TEXT = 46;
VenbraceParser.BREAK = 47;
VenbraceParser.GET_START_VALUE = 48;
VenbraceParser.GET_PLAIN_START_TEXT = 49;
VenbraceParser.NOT = 50;
VenbraceParser.AND = 51;
VenbraceParser.OR = 52;
VenbraceParser.XOR = 53;
VenbraceParser.LT = 54;
VenbraceParser.GT = 55;
VenbraceParser.LE = 56;
VenbraceParser.GE = 57;
VenbraceParser.EQ = 58;
VenbraceParser.NEQ = 59;
VenbraceParser.LOGIC_EQ = 60;
VenbraceParser.LOGIC_NOT_EQ = 61;
VenbraceParser.PLUS = 62;
VenbraceParser.MINUS = 63;
VenbraceParser.MUL = 64;
VenbraceParser.DIV = 65;
VenbraceParser.POW = 66;
VenbraceParser.DECIMAL = 67;
VenbraceParser.BINARY = 68;
VenbraceParser.OCTAL = 69;
VenbraceParser.HEXADECIMAL = 70;
VenbraceParser.BITWISE = 71;
VenbraceParser.SQRT = 72;
VenbraceParser.ABS = 73;
VenbraceParser.NEG = 74;
VenbraceParser.LOG = 75;
VenbraceParser.EULER = 76;
VenbraceParser.ROUND = 77;
VenbraceParser.CEILING = 78;
VenbraceParser.FLOOR = 79;
VenbraceParser.RANDOM_INTEGER = 80;
VenbraceParser.RANDOM_FRACTION = 81;
VenbraceParser.MIN = 82;
VenbraceParser.MAX = 83;
VenbraceParser.MODULO = 84;
VenbraceParser.REMAINDER = 85;
VenbraceParser.QUOTIENT = 86;
VenbraceParser.OF = 87;
VenbraceParser.CONVERT = 88;
VenbraceParser.SIN = 89;
VenbraceParser.COS = 90;
VenbraceParser.TAN = 91;
VenbraceParser.ASIN = 92;
VenbraceParser.ACOS = 93;
VenbraceParser.ATAN = 94;
VenbraceParser.ATAN2 = 95;
VenbraceParser.JOIN = 96;
VenbraceParser.LENGTH = 97;
VenbraceParser.IS_EMPTY = 98;
VenbraceParser.COMPARE_TEXTS = 99;
VenbraceParser.TRIM = 100;
VenbraceParser.UPCASE = 101;
VenbraceParser.DOWNCASE = 102;
VenbraceParser.STARTS_AT = 103;
VenbraceParser.CONTAINS = 104;
VenbraceParser.SPLIT = 105;
VenbraceParser.SPLIT_AT_FIRST = 106;
VenbraceParser.SPLIT_AT_ANY = 107;
VenbraceParser.SPLIT_AT_FIRST_OF_ANY = 108;
VenbraceParser.SPLIT_AT_SPACES = 109;
VenbraceParser.SEGMENT = 110;
VenbraceParser.REPLACE_ALL = 111;
VenbraceParser.REPLACEMENT = 112;
VenbraceParser.OBFUSCATED_TEXT = 113;
VenbraceParser.IS_A_STR = 114;
VenbraceParser.REVERSE = 115;
VenbraceParser.MAPPINGS = 116;
VenbraceParser.IN_TEXT = 117;
VenbraceParser.PREFERRING = 118;
VenbraceParser.LONGEST_STRING_FIRST = 119;
VenbraceParser.DICTIONARY = 120;
VenbraceParser.NUMBER = 121;
VenbraceParser.NEG_NUM = 122;
VenbraceParser.COMPONENT_PROPERTY = 123;
VenbraceParser.ID = 124;
VenbraceParser.STRING = 125;

VenbraceParser.RULE_program = 0;
VenbraceParser.RULE_test_program = 1;
VenbraceParser.RULE_decl_block = 2;
VenbraceParser.RULE_decl = 3;
VenbraceParser.RULE_global_decl = 4;
VenbraceParser.RULE_procedure_do = 5;
VenbraceParser.RULE_procedure_result = 6;
VenbraceParser.RULE_event_handler = 7;
VenbraceParser.RULE_suite = 8;
VenbraceParser.RULE_stat_block = 9;
VenbraceParser.RULE_stat = 10;
VenbraceParser.RULE_control_stat = 11;
VenbraceParser.RULE_if_stat = 12;
VenbraceParser.RULE_for_each_from_to = 13;
VenbraceParser.RULE_while_stat = 14;
VenbraceParser.RULE_call_procedure_stat = 15;
VenbraceParser.RULE_var_stat = 16;
VenbraceParser.RULE_setter = 17;
VenbraceParser.RULE_expr_block = 18;
VenbraceParser.RULE_expr = 19;
VenbraceParser.RULE_control_expr = 20;
VenbraceParser.RULE_if_expr = 21;
VenbraceParser.RULE_do_expr = 22;
VenbraceParser.RULE_logic_expr = 23;
VenbraceParser.RULE_not_expr = 24;
VenbraceParser.RULE_compare_eq_expr = 25;
VenbraceParser.RULE_compare_math_expr = 26;
VenbraceParser.RULE_math_expr = 27;
VenbraceParser.RULE_mutable_op = 28;
VenbraceParser.RULE_immutable_op = 29;
VenbraceParser.RULE_min_max = 30;
VenbraceParser.RULE_unary_op = 31;
VenbraceParser.RULE_mod = 32;
VenbraceParser.RULE_remainder = 33;
VenbraceParser.RULE_quotient = 34;
VenbraceParser.RULE_trig = 35;
VenbraceParser.RULE_atan2 = 36;
VenbraceParser.RULE_str_expr = 37;
VenbraceParser.RULE_str_length = 38;
VenbraceParser.RULE_str_join = 39;
VenbraceParser.RULE_str_reverse = 40;
VenbraceParser.RULE_str_split_at_spaces = 41;
VenbraceParser.RULE_getter = 42;
VenbraceParser.RULE_call_procedure_expr = 43;
VenbraceParser.RULE_atom = 44;
VenbraceParser.RULE_atom_elements = 45;
VenbraceParser.RULE_label = 46;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_program;
    this.tokens = null
    this._decl_block = null; // Decl_blockContext
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(VenbraceParser.EOF, 0);
};

ProgramContext.prototype.decl_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Decl_blockContext);
    } else {
        return this.getTypedRuleContext(Decl_blockContext,i);
    }
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitProgram(this);
	}
};




VenbraceParser.ProgramContext = ProgramContext;

VenbraceParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, VenbraceParser.RULE_program);
    localctx.tokens =  []
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 99;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.LSQR) {
            this.state = 94;
            localctx._decl_block = this.decl_block();
            localctx.tokens.push(...(localctx._decl_block.tokens))
            this.state = 101;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 102;
        this.match(VenbraceParser.EOF);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Test_programContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_test_program;
    this.tokens = null
    this._decl_block = null; // Decl_blockContext
    this._stat_block = null; // Stat_blockContext
    this._expr_block = null; // Expr_blockContext
    return this;
}

Test_programContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_programContext.prototype.constructor = Test_programContext;

Test_programContext.prototype.decl_block = function() {
    return this.getTypedRuleContext(Decl_blockContext,0);
};

Test_programContext.prototype.stat_block = function() {
    return this.getTypedRuleContext(Stat_blockContext,0);
};

Test_programContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Test_programContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterTest_program(this);
	}
};

Test_programContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitTest_program(this);
	}
};




VenbraceParser.Test_programContext = Test_programContext;

VenbraceParser.prototype.test_program = function() {

    var localctx = new Test_programContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, VenbraceParser.RULE_test_program);
    localctx.tokens =  []
    try {
        this.state = 113;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.LSQR:
            this.enterOuterAlt(localctx, 1);
            this.state = 104;
            localctx._decl_block = this.decl_block();
            localctx.tokens.push(...(localctx._decl_block.tokens));
            break;
        case VenbraceParser.LCURLY:
            this.enterOuterAlt(localctx, 2);
            this.state = 107;
            localctx._stat_block = this.stat_block();
            localctx.tokens.push(...(localctx._stat_block.tokens));
            break;
        case VenbraceParser.LPAREN:
        case VenbraceParser.TRUE:
        case VenbraceParser.FALSE:
        case VenbraceParser.NUMBER:
        case VenbraceParser.NEG_NUM:
        case VenbraceParser.COMPONENT_PROPERTY:
        case VenbraceParser.ID:
        case VenbraceParser.STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 110;
            localctx._expr_block = this.expr_block();
            localctx.tokens.push(...(localctx._expr_block.tokens));
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Decl_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_decl_block;
    this.tokens = null
    this._LSQR = null; // Token
    this._decl = null; // DeclContext
    this._RSQR = null; // Token
    return this;
}

Decl_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Decl_blockContext.prototype.constructor = Decl_blockContext;

Decl_blockContext.prototype.LSQR = function() {
    return this.getToken(VenbraceParser.LSQR, 0);
};

Decl_blockContext.prototype.decl = function() {
    return this.getTypedRuleContext(DeclContext,0);
};

Decl_blockContext.prototype.RSQR = function() {
    return this.getToken(VenbraceParser.RSQR, 0);
};

Decl_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterDecl_block(this);
	}
};

Decl_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitDecl_block(this);
	}
};




VenbraceParser.Decl_blockContext = Decl_blockContext;

VenbraceParser.prototype.decl_block = function() {

    var localctx = new Decl_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, VenbraceParser.RULE_decl_block);
    localctx.tokens =  []
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 115;
        localctx._LSQR = this.match(VenbraceParser.LSQR);
        this.state = 116;
        localctx._decl = this.decl();
        this.state = 117;
        localctx._RSQR = this.match(VenbraceParser.RSQR);

            localctx.tokens.push(localctx._LSQR);
            localctx.tokens.push(...(localctx._decl.tokens));
            localctx.tokens.push(localctx._RSQR);
          
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_decl;
    this.tokens = null
    this._global_decl = null; // Global_declContext
    this._procedure_do = null; // Procedure_doContext
    this._procedure_result = null; // Procedure_resultContext
    this._event_handler = null; // Event_handlerContext
    return this;
}

DeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclContext.prototype.constructor = DeclContext;

DeclContext.prototype.global_decl = function() {
    return this.getTypedRuleContext(Global_declContext,0);
};

DeclContext.prototype.procedure_do = function() {
    return this.getTypedRuleContext(Procedure_doContext,0);
};

DeclContext.prototype.procedure_result = function() {
    return this.getTypedRuleContext(Procedure_resultContext,0);
};

DeclContext.prototype.event_handler = function() {
    return this.getTypedRuleContext(Event_handlerContext,0);
};

DeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterDecl(this);
	}
};

DeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitDecl(this);
	}
};




VenbraceParser.DeclContext = DeclContext;

VenbraceParser.prototype.decl = function() {

    var localctx = new DeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, VenbraceParser.RULE_decl);
    try {
        this.state = 132;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 120;
            localctx._global_decl = this.global_decl();
            localctx.tokens =  localctx._global_decl.tokens
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 123;
            localctx._procedure_do = this.procedure_do();
            localctx.tokens =  localctx._procedure_do.tokens
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 126;
            localctx._procedure_result = this.procedure_result();
            localctx.tokens =  localctx._procedure_result.tokens
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 129;
            localctx._event_handler = this.event_handler();
            localctx.tokens =  localctx._event_handler.tokens
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_global_decl;
    this.tokens = null
    this._INITIALIZE = null; // Token
    this._GLOBAL = null; // Token
    this._ID = null; // Token
    this._TO = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

Global_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_declContext.prototype.constructor = Global_declContext;

Global_declContext.prototype.INITIALIZE = function() {
    return this.getToken(VenbraceParser.INITIALIZE, 0);
};

Global_declContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};

Global_declContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

Global_declContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Global_declContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Global_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterGlobal_decl(this);
	}
};

Global_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitGlobal_decl(this);
	}
};




VenbraceParser.Global_declContext = Global_declContext;

VenbraceParser.prototype.global_decl = function() {

    var localctx = new Global_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, VenbraceParser.RULE_global_decl);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 134;
        localctx._INITIALIZE = this.match(VenbraceParser.INITIALIZE);
        this.state = 135;
        localctx._GLOBAL = this.match(VenbraceParser.GLOBAL);
        this.state = 136;
        localctx._ID = this.match(VenbraceParser.ID);
        this.state = 137;
        localctx._TO = this.match(VenbraceParser.TO);

            localctx.tokens.push(localctx._INITIALIZE);
            localctx.tokens.push(localctx._GLOBAL);
            localctx.tokens.push(localctx._ID);
            localctx.tokens.push(localctx._TO);
          
        this.state = 139;
        localctx._expr_block = this.expr_block();
        localctx.tokens.push(...localctx._expr_block.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_doContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_procedure_do;
    this.tokens = null
    this._TO = null; // Token
    this.proc_name = null; // Token
    this.arg_name = null; // Token
    this._DO = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

Procedure_doContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_doContext.prototype.constructor = Procedure_doContext;

Procedure_doContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Procedure_doContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Procedure_doContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Procedure_doContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Procedure_doContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterProcedure_do(this);
	}
};

Procedure_doContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitProcedure_do(this);
	}
};




VenbraceParser.Procedure_doContext = Procedure_doContext;

VenbraceParser.prototype.procedure_do = function() {

    var localctx = new Procedure_doContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, VenbraceParser.RULE_procedure_do);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 142;
        localctx._TO = this.match(VenbraceParser.TO);
        localctx.tokens.push(localctx._TO);
        this.state = 144;
        localctx.proc_name = this.match(VenbraceParser.ID);
        localctx.tokens.push(localctx.proc_name);
        this.state = 150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.ID) {
            this.state = 146;
            localctx.arg_name = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx.arg_name);
            this.state = 152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.DO) {
            this.state = 153;
            localctx._DO = this.match(VenbraceParser.DO);

                localctx._DO['optional'] = true;
                localctx.tokens.push(localctx._DO);
                
        }

        this.state = 157;
        localctx._suite = this.suite();
        localctx.tokens.push(...localctx._suite.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_procedure_result;
    this.tokens = null
    this._TO = null; // Token
    this.proc_name = null; // Token
    this.arg_name = null; // Token
    this._RESULT = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

Procedure_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_resultContext.prototype.constructor = Procedure_resultContext;

Procedure_resultContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

Procedure_resultContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Procedure_resultContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Procedure_resultContext.prototype.RESULT = function() {
    return this.getToken(VenbraceParser.RESULT, 0);
};

Procedure_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterProcedure_result(this);
	}
};

Procedure_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitProcedure_result(this);
	}
};




VenbraceParser.Procedure_resultContext = Procedure_resultContext;

VenbraceParser.prototype.procedure_result = function() {

    var localctx = new Procedure_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, VenbraceParser.RULE_procedure_result);

     localctx.tokens =  [] 

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 160;
        localctx._TO = this.match(VenbraceParser.TO);
        localctx.tokens.push(localctx._TO);
        this.state = 162;
        localctx.proc_name = this.match(VenbraceParser.ID);
        localctx.tokens.push(localctx.proc_name);
        this.state = 168;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 164;
                localctx.arg_name = this.match(VenbraceParser.ID);
                localctx.tokens.push(localctx.arg_name); 
            }
            this.state = 170;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

        this.state = 173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.RESULT) {
            this.state = 171;
            localctx._RESULT = this.match(VenbraceParser.RESULT);

                localctx._RESULT['optional'] = true;
                localctx.tokens.push(localctx._RESULT);
              
        }

        this.state = 175;
        localctx._expr_block = this.expr_block();
        localctx.tokens.push(...localctx._expr_block.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_handlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_event_handler;
    this.tokens = null
    this._WHEN = null; // Token
    this._COMPONENT_PROPERTY = null; // Token
    this.param_name = null; // Token
    this._DO = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

Event_handlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_handlerContext.prototype.constructor = Event_handlerContext;

Event_handlerContext.prototype.WHEN = function() {
    return this.getToken(VenbraceParser.WHEN, 0);
};

Event_handlerContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};

Event_handlerContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Event_handlerContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Event_handlerContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Event_handlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterEvent_handler(this);
	}
};

Event_handlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitEvent_handler(this);
	}
};




VenbraceParser.Event_handlerContext = Event_handlerContext;

VenbraceParser.prototype.event_handler = function() {

    var localctx = new Event_handlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, VenbraceParser.RULE_event_handler);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        localctx._WHEN = this.match(VenbraceParser.WHEN);
        this.state = 179;
        localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);

            localctx.tokens.push(localctx._WHEN);
            localctx.tokens.push(localctx._COMPONENT_PROPERTY);
          
        this.state = 185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VenbraceParser.ID) {
            this.state = 181;
            localctx.param_name = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx.param_name);
            this.state = 187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.DO) {
            this.state = 188;
            localctx._DO = this.match(VenbraceParser.DO);

                localctx._DO['optional'] = true;
                localctx.tokens.push(localctx._DO);
              
        }

        this.state = 192;
        localctx._suite = this.suite();
        localctx.tokens.push(...localctx._suite.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_suite;
    this.tokens = null
    this._stat_block = null; // Stat_blockContext
    this._LCURLY = null; // Token
    this._RCURLY = null; // Token
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.stat_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Stat_blockContext);
    } else {
        return this.getTypedRuleContext(Stat_blockContext,i);
    }
};

SuiteContext.prototype.LCURLY = function() {
    return this.getToken(VenbraceParser.LCURLY, 0);
};

SuiteContext.prototype.RCURLY = function() {
    return this.getToken(VenbraceParser.RCURLY, 0);
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitSuite(this);
	}
};




VenbraceParser.SuiteContext = SuiteContext;

VenbraceParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, VenbraceParser.RULE_suite);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.state = 206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VenbraceParser.LCURLY) {
                this.state = 195;
                localctx._stat_block = this.stat_block();
                localctx.tokens.push(...localctx._stat_block.tokens);
                this.state = 202;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 203;
            localctx._LCURLY = this.match(VenbraceParser.LCURLY);
            this.state = 204;
            localctx._RCURLY = this.match(VenbraceParser.RCURLY);

               localctx.tokens.push(localctx._LCURLY);
              localctx.tokens.push(localctx._RCURLY);
              
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Stat_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_stat_block;
    this.tokens = null
    this._LCURLY = null; // Token
    this._stat = null; // StatContext
    this._RCURLY = null; // Token
    return this;
}

Stat_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stat_blockContext.prototype.constructor = Stat_blockContext;

Stat_blockContext.prototype.LCURLY = function() {
    return this.getToken(VenbraceParser.LCURLY, 0);
};

Stat_blockContext.prototype.stat = function() {
    return this.getTypedRuleContext(StatContext,0);
};

Stat_blockContext.prototype.RCURLY = function() {
    return this.getToken(VenbraceParser.RCURLY, 0);
};

Stat_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStat_block(this);
	}
};

Stat_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStat_block(this);
	}
};




VenbraceParser.Stat_blockContext = Stat_blockContext;

VenbraceParser.prototype.stat_block = function() {

    var localctx = new Stat_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, VenbraceParser.RULE_stat_block);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        localctx._LCURLY = this.match(VenbraceParser.LCURLY);
        this.state = 209;
        localctx._stat = this.stat();
        this.state = 210;
        localctx._RCURLY = this.match(VenbraceParser.RCURLY);

            localctx.tokens.push(localctx._LCURLY);
            localctx.tokens.push(...localctx._stat.tokens);
            localctx.tokens.push(localctx._RCURLY);
          
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_stat;
    this.tokens = null
    this._control_stat = null; // Control_statContext
    this._call_procedure_stat = null; // Call_procedure_statContext
    this._var_stat = null; // Var_statContext
    return this;
}

StatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatContext.prototype.constructor = StatContext;

StatContext.prototype.control_stat = function() {
    return this.getTypedRuleContext(Control_statContext,0);
};

StatContext.prototype.call_procedure_stat = function() {
    return this.getTypedRuleContext(Call_procedure_statContext,0);
};

StatContext.prototype.var_stat = function() {
    return this.getTypedRuleContext(Var_statContext,0);
};

StatContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStat(this);
	}
};

StatContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStat(this);
	}
};




VenbraceParser.StatContext = StatContext;

VenbraceParser.prototype.stat = function() {

    var localctx = new StatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, VenbraceParser.RULE_stat);
    try {
        this.state = 222;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.IF:
        case VenbraceParser.FOREACH:
        case VenbraceParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 213;
            localctx._control_stat = this.control_stat();
            localctx.tokens =  localctx._control_stat.tokens
            break;
        case VenbraceParser.CALL:
        case VenbraceParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 216;
            localctx._call_procedure_stat = this.call_procedure_stat();
            localctx.tokens =  localctx._call_procedure_stat.tokens
            break;
        case VenbraceParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 219;
            localctx._var_stat = this.var_stat();
            localctx.tokens =  localctx._var_stat.tokens
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Control_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_control_stat;
    this.tokens = null
    this._if_stat = null; // If_statContext
    this._for_each_from_to = null; // For_each_from_toContext
    this._while_stat = null; // While_statContext
    return this;
}

Control_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_statContext.prototype.constructor = Control_statContext;

Control_statContext.prototype.if_stat = function() {
    return this.getTypedRuleContext(If_statContext,0);
};

Control_statContext.prototype.for_each_from_to = function() {
    return this.getTypedRuleContext(For_each_from_toContext,0);
};

Control_statContext.prototype.while_stat = function() {
    return this.getTypedRuleContext(While_statContext,0);
};

Control_statContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterControl_stat(this);
	}
};

Control_statContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitControl_stat(this);
	}
};




VenbraceParser.Control_statContext = Control_statContext;

VenbraceParser.prototype.control_stat = function() {

    var localctx = new Control_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, VenbraceParser.RULE_control_stat);
    try {
        this.state = 233;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 224;
            localctx._if_stat = this.if_stat();
            localctx.tokens =  localctx._if_stat.tokens
            break;
        case VenbraceParser.FOREACH:
            this.enterOuterAlt(localctx, 2);
            this.state = 227;
            localctx._for_each_from_to = this.for_each_from_to();
            localctx.tokens =  localctx._for_each_from_to.tokens
            break;
        case VenbraceParser.WHILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 230;
            localctx._while_stat = this.while_stat();
            localctx.tokens =  localctx._while_stat.tokens
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_if_stat;
    this.tokens = null
    this._IF = null; // Token
    this.e1 = null; // Expr_blockContext
    this._THEN = null; // Token
    this.s1 = null; // SuiteContext
    this._ELSE_IF = null; // Token
    this.e2 = null; // Expr_blockContext
    this.s2 = null; // SuiteContext
    this._ELSE = null; // Token
    this.s3 = null; // SuiteContext
    return this;
}

If_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statContext.prototype.constructor = If_statContext;

If_statContext.prototype.IF = function() {
    return this.getToken(VenbraceParser.IF, 0);
};

If_statContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.THEN);
    } else {
        return this.getToken(VenbraceParser.THEN, i);
    }
};


If_statContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

If_statContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

If_statContext.prototype.ELSE_IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ELSE_IF);
    } else {
        return this.getToken(VenbraceParser.ELSE_IF, i);
    }
};


If_statContext.prototype.ELSE = function() {
    return this.getToken(VenbraceParser.ELSE, 0);
};

If_statContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterIf_stat(this);
	}
};

If_statContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitIf_stat(this);
	}
};




VenbraceParser.If_statContext = If_statContext;

VenbraceParser.prototype.if_stat = function() {

    var localctx = new If_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, VenbraceParser.RULE_if_stat);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 235;
        localctx._IF = this.match(VenbraceParser.IF);
        this.state = 236;
        localctx.e1 = this.expr_block();
        this.state = 237;
        localctx._THEN = this.match(VenbraceParser.THEN);
        this.state = 238;
        localctx.s1 = this.suite();

              localctx.tokens.push(localctx._IF);
              localctx.tokens.push(...localctx.e1.tokens);
              localctx.tokens.push(localctx._THEN);
              localctx.tokens.push(...localctx.s1.tokens);
            
        this.state = 257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        if(la_===1) {
            this.state = 248;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VenbraceParser.ELSE_IF) {
                this.state = 240;
                localctx._ELSE_IF = this.match(VenbraceParser.ELSE_IF);
                this.state = 241;
                localctx.e2 = this.expr_block();
                this.state = 242;
                localctx._THEN = this.match(VenbraceParser.THEN);
                this.state = 243;
                localctx.s2 = this.suite();

                      localctx.tokens.push(localctx._ELSE_IF);
                      localctx.tokens.push(...localctx.e2.tokens);
                      localctx.tokens.push(localctx._THEN);
                      localctx.tokens.push(...localctx.s2.tokens);
                    
                this.state = 250;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.ELSE) {
                this.state = 251;
                localctx._ELSE = this.match(VenbraceParser.ELSE);
                this.state = 252;
                localctx.s3 = this.suite();

                        localctx.tokens.push(localctx._ELSE);
                        localctx.tokens.push(...localctx.s3.tokens);
                      
            }


        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_each_from_toContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_for_each_from_to;
    this.tokens = null
    this._FOREACH = null; // Token
    this._ID = null; // Token
    this._FROM = null; // Token
    this.from = null; // Expr_blockContext
    this._TO = null; // Token
    this.to = null; // Expr_blockContext
    this._BY = null; // Token
    this.by = null; // Expr_blockContext
    this._DO = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

For_each_from_toContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_from_toContext.prototype.constructor = For_each_from_toContext;

For_each_from_toContext.prototype.FOREACH = function() {
    return this.getToken(VenbraceParser.FOREACH, 0);
};

For_each_from_toContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

For_each_from_toContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

For_each_from_toContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

For_each_from_toContext.prototype.FROM = function() {
    return this.getToken(VenbraceParser.FROM, 0);
};

For_each_from_toContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

For_each_from_toContext.prototype.BY = function() {
    return this.getToken(VenbraceParser.BY, 0);
};

For_each_from_toContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

For_each_from_toContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterFor_each_from_to(this);
	}
};

For_each_from_toContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitFor_each_from_to(this);
	}
};




VenbraceParser.For_each_from_toContext = For_each_from_toContext;

VenbraceParser.prototype.for_each_from_to = function() {

    var localctx = new For_each_from_toContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, VenbraceParser.RULE_for_each_from_to);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        localctx._FOREACH = this.match(VenbraceParser.FOREACH);
        this.state = 260;
        localctx._ID = this.match(VenbraceParser.ID);

            localctx.tokens.push(localctx._FOREACH);
            localctx.tokens.push(localctx._ID);
          
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.FROM) {
            this.state = 262;
            localctx._FROM = this.match(VenbraceParser.FROM);

                localctx._FROM['optional'] = true;
                localctx.tokens.push(localctx._FROM);
              
        }

        this.state = 266;
        localctx.from = this.expr_block();
        localctx.tokens.push(...localctx.from.tokens);
        this.state = 270;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.TO) {
            this.state = 268;
            localctx._TO = this.match(VenbraceParser.TO);

                localctx._TO['optional'] = true;
                localctx.tokens.push(localctx._TO);
              
        }

        this.state = 272;
        localctx.to = this.expr_block();
        localctx.tokens.push(...localctx.to.tokens);
        this.state = 276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.BY) {
            this.state = 274;
            localctx._BY = this.match(VenbraceParser.BY);

                localctx._BY['optional'] = true;
                localctx.tokens.push(localctx._BY);
              
        }

        this.state = 278;
        localctx.by = this.expr_block();
        localctx.tokens.push(...localctx.by.tokens);
        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.DO) {
            this.state = 280;
            localctx._DO = this.match(VenbraceParser.DO);

                localctx._DO['optional'] = true;
                localctx.tokens.push(localctx._DO); 
              
        }

        this.state = 284;
        localctx._suite = this.suite();
        localctx.tokens.push(...localctx._suite.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function While_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_while_stat;
    this.tokens = null
    this._WHILE = null; // Token
    this._TEST = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._DO = null; // Token
    this._suite = null; // SuiteContext
    return this;
}

While_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statContext.prototype.constructor = While_statContext;

While_statContext.prototype.WHILE = function() {
    return this.getToken(VenbraceParser.WHILE, 0);
};

While_statContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

While_statContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

While_statContext.prototype.TEST = function() {
    return this.getToken(VenbraceParser.TEST, 0);
};

While_statContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

While_statContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterWhile_stat(this);
	}
};

While_statContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitWhile_stat(this);
	}
};




VenbraceParser.While_statContext = While_statContext;

VenbraceParser.prototype.while_stat = function() {

    var localctx = new While_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, VenbraceParser.RULE_while_stat);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        localctx._WHILE = this.match(VenbraceParser.WHILE);
        localctx.tokens.push(localctx._WHILE);
        this.state = 291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.TEST) {
            this.state = 289;
            localctx._TEST = this.match(VenbraceParser.TEST);

              localctx._TEST['optional'] = true;
              localctx.tokens.push(localctx._TEST);

        }

        this.state = 293;
        localctx._expr_block = this.expr_block();
        localctx.tokens.push(...localctx._expr_block.tokens);
        this.state = 297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.DO) {
            this.state = 295;
            localctx._DO = this.match(VenbraceParser.DO);

              localctx._DO['optional'] = true;
              localctx.tokens.push(localctx._DO);

        }

        this.state = 299;
        localctx._suite = this.suite();
        localctx.tokens.push(...localctx._suite.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_procedure_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_call_procedure_stat;
    this.tokens = null
    this._CALL = null; // Token
    this._ID = null; // Token
    this.component = null; // Token
    this._DOT = null; // Token
    this.event = null; // Token
    this._label = null; // LabelContext
    this.arg = null; // Expr_blockContext
    return this;
}

Call_procedure_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_procedure_statContext.prototype.constructor = Call_procedure_statContext;

Call_procedure_statContext.prototype.CALL = function() {
    return this.getToken(VenbraceParser.CALL, 0);
};

Call_procedure_statContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Call_procedure_statContext.prototype.DOT = function() {
    return this.getToken(VenbraceParser.DOT, 0);
};

Call_procedure_statContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Call_procedure_statContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

Call_procedure_statContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterCall_procedure_stat(this);
	}
};

Call_procedure_statContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitCall_procedure_stat(this);
	}
};




VenbraceParser.Call_procedure_statContext = Call_procedure_statContext;

VenbraceParser.prototype.call_procedure_stat = function() {

    var localctx = new Call_procedure_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, VenbraceParser.RULE_call_procedure_stat);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.CALL) {
            this.state = 302;
            localctx._CALL = this.match(VenbraceParser.CALL);

              localctx._CALL['optional'] = true;
              localctx.tokens.push(localctx._CALL);

        }

        this.state = 312;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.state = 306;
            localctx._ID = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx._ID);
            break;

        case 2:
            this.state = 308;
            localctx.component = this.match(VenbraceParser.ID);
            this.state = 309;
            localctx._DOT = this.match(VenbraceParser.DOT);
            this.state = 310;
            localctx.event = this.match(VenbraceParser.ID);

              localctx.tokens.push(localctx._ID);
              localctx.tokens.push(localctx._DOT);
              localctx.tokens.push(localctx.event);

            break;

        }
        this.state = 324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (VenbraceParser.NUMBER - 121)) | (1 << (VenbraceParser.NEG_NUM - 121)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 121)) | (1 << (VenbraceParser.ID - 121)) | (1 << (VenbraceParser.STRING - 121)))) !== 0)) {
            this.state = 317;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 314;
                localctx._label = this.label();

                  // label only has one token
                  var label_token = localctx._label.tokens[0];
                  label_token['optional'] = true;
                  localctx.tokens.push(label_token);


            }
            this.state = 319;
            localctx.arg = this.expr_block();
            localctx.tokens.push(...localctx.arg.tokens);
            this.state = 326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Var_statContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_var_stat;
    this.tokens = null
    this._setter = null; // SetterContext
    return this;
}

Var_statContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_statContext.prototype.constructor = Var_statContext;

Var_statContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

Var_statContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterVar_stat(this);
	}
};

Var_statContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitVar_stat(this);
	}
};




VenbraceParser.Var_statContext = Var_statContext;

VenbraceParser.prototype.var_stat = function() {

    var localctx = new Var_statContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, VenbraceParser.RULE_var_stat);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        localctx._setter = this.setter();
        localctx.tokens =  localctx._setter.tokens
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_setter;
    this.tokens = null
    this._SET = null; // Token
    this._GLOBAL = null; // Token
    this._ID = null; // Token
    this._COMPONENT_PROPERTY = null; // Token
    this._TO = null; // Token
    this._expr_block = null; // Expr_blockContext
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(VenbraceParser.SET, 0);
};

SetterContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

SetterContext.prototype.TO = function() {
    return this.getToken(VenbraceParser.TO, 0);
};

SetterContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

SetterContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};

SetterContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitSetter(this);
	}
};




VenbraceParser.SetterContext = SetterContext;

VenbraceParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, VenbraceParser.RULE_setter);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        localctx._SET = this.match(VenbraceParser.SET);
        localctx.tokens.push(localctx._SET);
        this.state = 340;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.GLOBAL:
        case VenbraceParser.ID:
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.GLOBAL) {
                this.state = 332;
                localctx._GLOBAL = this.match(VenbraceParser.GLOBAL);
                localctx.tokens.push(localctx._GLOBAL);
            }

            this.state = 336;
            localctx._ID = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx._ID);
            break;
        case VenbraceParser.COMPONENT_PROPERTY:
            this.state = 338;
            localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);
            localctx.tokens.push(localctx._COMPONENT_PROPERTY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.TO) {
            this.state = 342;
            localctx._TO = this.match(VenbraceParser.TO);

                localctx._TO['optional'] = true;
                localctx.tokens.push(localctx._TO);
              
        }

        this.state = 346;
        localctx._expr_block = this.expr_block();
        localctx.tokens.push(...localctx._expr_block.tokens);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_expr_block;
    this.tokens = null
    this._LPAREN = null; // Token
    this._RPAREN = null; // Token
    this._atom = null; // AtomContext
    this._expr = null; // ExprContext
    return this;
}

Expr_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_blockContext.prototype.constructor = Expr_blockContext;

Expr_blockContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Expr_blockContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Expr_blockContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Expr_blockContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Expr_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterExpr_block(this);
	}
};

Expr_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitExpr_block(this);
	}
};




VenbraceParser.Expr_blockContext = Expr_blockContext;

VenbraceParser.prototype.expr_block = function() {

    var localctx = new Expr_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, VenbraceParser.RULE_expr_block);

      localctx.tokens =  []

    try {
        this.state = 358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 349;
            localctx._LPAREN = this.match(VenbraceParser.LPAREN);
            this.state = 350;
            localctx._RPAREN = this.match(VenbraceParser.RPAREN);

               localctx.tokens.push(localctx._LPAREN);
               localctx.tokens.push(localctx._RPAREN); 
              
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 352;
            localctx._atom = this.atom();
            localctx.tokens.push(...localctx._atom.tokens);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 355;
            localctx._expr = this.expr();
            localctx.tokens.push(...localctx._expr.tokens);
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_expr;
    this.tokens = null
    this._getter = null; // GetterContext
    this._control_expr = null; // Control_exprContext
    this._logic_expr = null; // Logic_exprContext
    this._not_expr = null; // Not_exprContext
    this._compare_eq_expr = null; // Compare_eq_exprContext
    this._compare_math_expr = null; // Compare_math_exprContext
    this._math_expr = null; // Math_exprContext
    this._str_expr = null; // Str_exprContext
    this._call_procedure_expr = null; // Call_procedure_exprContext
    this._atom = null; // AtomContext
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

ExprContext.prototype.control_expr = function() {
    return this.getTypedRuleContext(Control_exprContext,0);
};

ExprContext.prototype.logic_expr = function() {
    return this.getTypedRuleContext(Logic_exprContext,0);
};

ExprContext.prototype.not_expr = function() {
    return this.getTypedRuleContext(Not_exprContext,0);
};

ExprContext.prototype.compare_eq_expr = function() {
    return this.getTypedRuleContext(Compare_eq_exprContext,0);
};

ExprContext.prototype.compare_math_expr = function() {
    return this.getTypedRuleContext(Compare_math_exprContext,0);
};

ExprContext.prototype.math_expr = function() {
    return this.getTypedRuleContext(Math_exprContext,0);
};

ExprContext.prototype.str_expr = function() {
    return this.getTypedRuleContext(Str_exprContext,0);
};

ExprContext.prototype.call_procedure_expr = function() {
    return this.getTypedRuleContext(Call_procedure_exprContext,0);
};

ExprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitExpr(this);
	}
};




VenbraceParser.ExprContext = ExprContext;

VenbraceParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, VenbraceParser.RULE_expr);
    try {
        this.state = 390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 360;
            localctx._getter = this.getter();
            localctx.tokens =  localctx._getter.tokens
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 363;
            localctx._control_expr = this.control_expr();
            localctx.tokens =  localctx._control_expr.tokens
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 366;
            localctx._logic_expr = this.logic_expr();
            localctx.tokens =  localctx._logic_expr.tokens
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 369;
            localctx._not_expr = this.not_expr();
            localctx.tokens =  localctx._not_expr.tokens
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 372;
            localctx._compare_eq_expr = this.compare_eq_expr();
            localctx.tokens =  localctx._compare_eq_expr.tokens
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 375;
            localctx._compare_math_expr = this.compare_math_expr();
            localctx.tokens =  localctx._compare_math_expr.tokens
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 378;
            localctx._math_expr = this.math_expr();
            localctx.tokens =  localctx._math_expr.tokens
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 381;
            localctx._str_expr = this.str_expr();
            localctx.tokens =  localctx._str_expr.tokens
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 384;
            localctx._call_procedure_expr = this.call_procedure_expr();
            localctx.tokens =  localctx._call_procedure_expr.tokens
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 387;
            localctx._atom = this.atom();
            localctx.tokens =  localctx._atom.tokens
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Control_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_control_expr;
    this.tokens = null
    this._if_expr = null; // If_exprContext
    this._do_expr = null; // Do_exprContext
    return this;
}

Control_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_exprContext.prototype.constructor = Control_exprContext;

Control_exprContext.prototype.if_expr = function() {
    return this.getTypedRuleContext(If_exprContext,0);
};

Control_exprContext.prototype.do_expr = function() {
    return this.getTypedRuleContext(Do_exprContext,0);
};

Control_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterControl_expr(this);
	}
};

Control_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitControl_expr(this);
	}
};




VenbraceParser.Control_exprContext = Control_exprContext;

VenbraceParser.prototype.control_expr = function() {

    var localctx = new Control_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, VenbraceParser.RULE_control_expr);
    try {
        this.state = 398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 392;
            localctx._if_expr = this.if_expr();
            localctx.tokens =  localctx._if_expr.tokens
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 395;
            localctx._do_expr = this.do_expr();
            localctx.tokens =  localctx._do_expr.tokens
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_if_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this._IF = null; // Token
    this.c = null; // Expr_blockContext
    this._THEN = null; // Token
    this.e1 = null; // Expr_blockContext
    this._ELSE = null; // Token
    this.e2 = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

If_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_exprContext.prototype.constructor = If_exprContext;

If_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

If_exprContext.prototype.IF = function() {
    return this.getToken(VenbraceParser.IF, 0);
};

If_exprContext.prototype.THEN = function() {
    return this.getToken(VenbraceParser.THEN, 0);
};

If_exprContext.prototype.ELSE = function() {
    return this.getToken(VenbraceParser.ELSE, 0);
};

If_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

If_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

If_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterIf_expr(this);
	}
};

If_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitIf_expr(this);
	}
};




VenbraceParser.If_exprContext = If_exprContext;

VenbraceParser.prototype.if_expr = function() {

    var localctx = new If_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, VenbraceParser.RULE_if_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 401;
        localctx._IF = this.match(VenbraceParser.IF);
        this.state = 402;
        localctx.c = this.expr_block();
        this.state = 403;
        localctx._THEN = this.match(VenbraceParser.THEN);
        this.state = 404;
        localctx.e1 = this.expr_block();
        this.state = 405;
        localctx._ELSE = this.match(VenbraceParser.ELSE);
        this.state = 406;
        localctx.e2 = this.expr_block();
        this.state = 407;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

            localctx.tokens.push(localctx._LPAREN);
            localctx.tokens.push(localctx._IF);
            localctx.tokens.push(...localctx.c.tokens);
            localctx.tokens.push(localctx._THEN);
            localctx.tokens.push(...localctx.e1.tokens);
            localctx.tokens.push(localctx._ELSE);
            localctx.tokens.push(...localctx.e2.tokens);
            localctx.tokens.push(localctx._RPAREN);
          
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Do_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_do_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this._DO = null; // Token
    this._suite = null; // SuiteContext
    this._RESULT = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Do_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_exprContext.prototype.constructor = Do_exprContext;

Do_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Do_exprContext.prototype.DO = function() {
    return this.getToken(VenbraceParser.DO, 0);
};

Do_exprContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Do_exprContext.prototype.RESULT = function() {
    return this.getToken(VenbraceParser.RESULT, 0);
};

Do_exprContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Do_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Do_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterDo_expr(this);
	}
};

Do_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitDo_expr(this);
	}
};




VenbraceParser.Do_exprContext = Do_exprContext;

VenbraceParser.prototype.do_expr = function() {

    var localctx = new Do_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, VenbraceParser.RULE_do_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 411;
        localctx._DO = this.match(VenbraceParser.DO);
        this.state = 412;
        localctx._suite = this.suite();
        this.state = 413;
        localctx._RESULT = this.match(VenbraceParser.RESULT);
        this.state = 414;
        localctx._expr_block = this.expr_block();
        this.state = 415;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

            localctx.tokens.push(localctx._LPAREN);
            localctx.tokens.push(localctx._DO);
            localctx.tokens.push(...localctx._suite.tokens);
            localctx.tokens.push(localctx._RESULT);
            localctx.tokens.push(...localctx._expr_block.tokens);
            localctx.tokens.push(localctx._RPAREN);
          
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Logic_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_logic_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this.a = null; // Expr_blockContext
    this._AND = null; // Token
    this._OR = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Logic_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logic_exprContext.prototype.constructor = Logic_exprContext;

Logic_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Logic_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Logic_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Logic_exprContext.prototype.AND = function() {
    return this.getToken(VenbraceParser.AND, 0);
};

Logic_exprContext.prototype.OR = function() {
    return this.getToken(VenbraceParser.OR, 0);
};

Logic_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterLogic_expr(this);
	}
};

Logic_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitLogic_expr(this);
	}
};




VenbraceParser.Logic_exprContext = Logic_exprContext;

VenbraceParser.prototype.logic_expr = function() {

    var localctx = new Logic_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, VenbraceParser.RULE_logic_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 419;
        localctx.a = this.expr_block();

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(...localctx.a.tokens);

        this.state = 425;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.AND:
            this.state = 421;
            localctx._AND = this.match(VenbraceParser.AND);
            localctx.tokens.push(localctx._AND);
            break;
        case VenbraceParser.OR:
            this.state = 423;
            localctx._OR = this.match(VenbraceParser.OR);
            localctx.tokens.push(localctx._OR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 427;
        localctx.b = this.expr_block();
        this.state = 428;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Not_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_not_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this._NOT = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Not_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_exprContext.prototype.constructor = Not_exprContext;

Not_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Not_exprContext.prototype.NOT = function() {
    return this.getToken(VenbraceParser.NOT, 0);
};

Not_exprContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Not_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Not_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterNot_expr(this);
	}
};

Not_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitNot_expr(this);
	}
};




VenbraceParser.Not_exprContext = Not_exprContext;

VenbraceParser.prototype.not_expr = function() {

    var localctx = new Not_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, VenbraceParser.RULE_not_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 432;
        localctx._NOT = this.match(VenbraceParser.NOT);
        this.state = 433;
        localctx._expr_block = this.expr_block();
        this.state = 434;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._NOT);
          localctx.tokens.push(...localctx._expr_block.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compare_eq_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_compare_eq_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this.a = null; // Expr_blockContext
    this._LOGIC_EQ = null; // Token
    this._LOGIC_NOT_EQ = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Compare_eq_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compare_eq_exprContext.prototype.constructor = Compare_eq_exprContext;

Compare_eq_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Compare_eq_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Compare_eq_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Compare_eq_exprContext.prototype.LOGIC_EQ = function() {
    return this.getToken(VenbraceParser.LOGIC_EQ, 0);
};

Compare_eq_exprContext.prototype.LOGIC_NOT_EQ = function() {
    return this.getToken(VenbraceParser.LOGIC_NOT_EQ, 0);
};

Compare_eq_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterCompare_eq_expr(this);
	}
};

Compare_eq_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitCompare_eq_expr(this);
	}
};




VenbraceParser.Compare_eq_exprContext = Compare_eq_exprContext;

VenbraceParser.prototype.compare_eq_expr = function() {

    var localctx = new Compare_eq_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, VenbraceParser.RULE_compare_eq_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 438;
        localctx.a = this.expr_block();

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(...localctx.a.tokens);

        this.state = 444;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.LOGIC_EQ:
            this.state = 440;
            localctx._LOGIC_EQ = this.match(VenbraceParser.LOGIC_EQ);
            localctx.tokens.push(localctx._LOGIC_EQ);
            break;
        case VenbraceParser.LOGIC_NOT_EQ:
            this.state = 442;
            localctx._LOGIC_NOT_EQ = this.match(VenbraceParser.LOGIC_NOT_EQ);
            localctx.tokens.push(localctx._LOGIC_NOT_EQ);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 446;
        localctx.b = this.expr_block();
        this.state = 447;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compare_math_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_compare_math_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this.a = null; // Expr_blockContext
    this._EQ = null; // Token
    this._NEQ = null; // Token
    this._GT = null; // Token
    this._GE = null; // Token
    this._LT = null; // Token
    this._LE = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Compare_math_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compare_math_exprContext.prototype.constructor = Compare_math_exprContext;

Compare_math_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Compare_math_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Compare_math_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Compare_math_exprContext.prototype.EQ = function() {
    return this.getToken(VenbraceParser.EQ, 0);
};

Compare_math_exprContext.prototype.NEQ = function() {
    return this.getToken(VenbraceParser.NEQ, 0);
};

Compare_math_exprContext.prototype.GT = function() {
    return this.getToken(VenbraceParser.GT, 0);
};

Compare_math_exprContext.prototype.GE = function() {
    return this.getToken(VenbraceParser.GE, 0);
};

Compare_math_exprContext.prototype.LT = function() {
    return this.getToken(VenbraceParser.LT, 0);
};

Compare_math_exprContext.prototype.LE = function() {
    return this.getToken(VenbraceParser.LE, 0);
};

Compare_math_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterCompare_math_expr(this);
	}
};

Compare_math_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitCompare_math_expr(this);
	}
};




VenbraceParser.Compare_math_exprContext = Compare_math_exprContext;

VenbraceParser.prototype.compare_math_expr = function() {

    var localctx = new Compare_math_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, VenbraceParser.RULE_compare_math_expr);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 451;
        localctx.a = this.expr_block();

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(...localctx.a.tokens);

        this.state = 465;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.EQ:
            this.state = 453;
            localctx._EQ = this.match(VenbraceParser.EQ);
            localctx.tokens.push(localctx._EQ);
            break;
        case VenbraceParser.NEQ:
            this.state = 455;
            localctx._NEQ = this.match(VenbraceParser.NEQ);
            localctx.tokens.push(localctx._NEQ);
            break;
        case VenbraceParser.GT:
            this.state = 457;
            localctx._GT = this.match(VenbraceParser.GT);
            localctx.tokens.push(localctx._GT);
            break;
        case VenbraceParser.GE:
            this.state = 459;
            localctx._GE = this.match(VenbraceParser.GE);
            localctx.tokens.push(localctx._GE);
            break;
        case VenbraceParser.LT:
            this.state = 461;
            localctx._LT = this.match(VenbraceParser.LT);
            localctx.tokens.push(localctx._LT);
            break;
        case VenbraceParser.LE:
            this.state = 463;
            localctx._LE = this.match(VenbraceParser.LE);
            localctx.tokens.push(localctx._LE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 467;
        localctx.b = this.expr_block();
        this.state = 468;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Math_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_math_expr;
    this.tokens = null
    this._mutable_op = null; // Mutable_opContext
    this._immutable_op = null; // Immutable_opContext
    this._min_max = null; // Min_maxContext
    this._unary_op = null; // Unary_opContext
    this._mod = null; // ModContext
    this._remainder = null; // RemainderContext
    this._quotient = null; // QuotientContext
    this._trig = null; // TrigContext
    this._atan2 = null; // Atan2Context
    return this;
}

Math_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Math_exprContext.prototype.constructor = Math_exprContext;

Math_exprContext.prototype.mutable_op = function() {
    return this.getTypedRuleContext(Mutable_opContext,0);
};

Math_exprContext.prototype.immutable_op = function() {
    return this.getTypedRuleContext(Immutable_opContext,0);
};

Math_exprContext.prototype.min_max = function() {
    return this.getTypedRuleContext(Min_maxContext,0);
};

Math_exprContext.prototype.unary_op = function() {
    return this.getTypedRuleContext(Unary_opContext,0);
};

Math_exprContext.prototype.mod = function() {
    return this.getTypedRuleContext(ModContext,0);
};

Math_exprContext.prototype.remainder = function() {
    return this.getTypedRuleContext(RemainderContext,0);
};

Math_exprContext.prototype.quotient = function() {
    return this.getTypedRuleContext(QuotientContext,0);
};

Math_exprContext.prototype.trig = function() {
    return this.getTypedRuleContext(TrigContext,0);
};

Math_exprContext.prototype.atan2 = function() {
    return this.getTypedRuleContext(Atan2Context,0);
};

Math_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterMath_expr(this);
	}
};

Math_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitMath_expr(this);
	}
};




VenbraceParser.Math_exprContext = Math_exprContext;

VenbraceParser.prototype.math_expr = function() {

    var localctx = new Math_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, VenbraceParser.RULE_math_expr);
    try {
        this.state = 498;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 471;
            localctx._mutable_op = this.mutable_op();
            localctx.tokens =  localctx._mutable_op.tokens
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            localctx._immutable_op = this.immutable_op();
            localctx.tokens =  localctx._immutable_op.tokens
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 477;
            localctx._min_max = this.min_max();
            localctx.tokens =  localctx._min_max.tokens
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 480;
            localctx._unary_op = this.unary_op();
            localctx.tokens =  localctx._unary_op.tokens
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 483;
            localctx._mod = this.mod();
            localctx.tokens =  localctx._mod.tokens
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 486;
            localctx._remainder = this.remainder();
            localctx.tokens =  localctx._remainder.tokens
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 489;
            localctx._quotient = this.quotient();
            localctx.tokens =  localctx._quotient.tokens
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 492;
            localctx._trig = this.trig();
            localctx.tokens =  localctx._trig.tokens
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 495;
            localctx._atan2 = this.atan2();
            localctx.tokens =  localctx._atan2.tokens
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mutable_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_mutable_op;
    this.tokens = null
    this._LPAREN = null; // Token
    this.a = null; // Expr_blockContext
    this._PLUS = null; // Token
    this.b = null; // Expr_blockContext
    this._MUL = null; // Token
    this.c = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Mutable_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_opContext.prototype.constructor = Mutable_opContext;

Mutable_opContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Mutable_opContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Mutable_opContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Mutable_opContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.PLUS);
    } else {
        return this.getToken(VenbraceParser.PLUS, i);
    }
};


Mutable_opContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.MUL);
    } else {
        return this.getToken(VenbraceParser.MUL, i);
    }
};


Mutable_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterMutable_op(this);
	}
};

Mutable_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitMutable_op(this);
	}
};




VenbraceParser.Mutable_opContext = Mutable_opContext;

VenbraceParser.prototype.mutable_op = function() {

    var localctx = new Mutable_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, VenbraceParser.RULE_mutable_op);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 501;
        localctx.a = this.expr_block();

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(...localctx.a.tokens);

        this.state = 519;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.PLUS:
            this.state = 507; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 503;
                localctx._PLUS = this.match(VenbraceParser.PLUS);
                this.state = 504;
                localctx.b = this.expr_block();

                  localctx.tokens.push(localctx._PLUS);
                  localctx.tokens.push(...localctx.b.tokens);

                this.state = 509; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VenbraceParser.PLUS);
            break;
        case VenbraceParser.MUL:
            this.state = 515; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 511;
                localctx._MUL = this.match(VenbraceParser.MUL);
                this.state = 512;
                localctx.c = this.expr_block();

                  localctx.tokens.push(localctx._MUL);
                  localctx.tokens.push(...localctx.c.tokens);

                this.state = 517; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===VenbraceParser.MUL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 521;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Immutable_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_immutable_op;
    this.tokens = null
    this._LPAREN = null; // Token
    this.a = null; // Expr_blockContext
    this._MINUS = null; // Token
    this._DIV = null; // Token
    this._POW = null; // Token
    this.b = null; // Expr_blockContext
    this._NEG_NUM = null; // Token
    this._RPAREN = null; // Token
    return this;
}

Immutable_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Immutable_opContext.prototype.constructor = Immutable_opContext;

Immutable_opContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Immutable_opContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Immutable_opContext.prototype.NEG_NUM = function() {
    return this.getToken(VenbraceParser.NEG_NUM, 0);
};

Immutable_opContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Immutable_opContext.prototype.MINUS = function() {
    return this.getToken(VenbraceParser.MINUS, 0);
};

Immutable_opContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

Immutable_opContext.prototype.POW = function() {
    return this.getToken(VenbraceParser.POW, 0);
};

Immutable_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterImmutable_op(this);
	}
};

Immutable_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitImmutable_op(this);
	}
};




VenbraceParser.Immutable_opContext = Immutable_opContext;

VenbraceParser.prototype.immutable_op = function() {

    var localctx = new Immutable_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, VenbraceParser.RULE_immutable_op);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        localctx.tokens.push(localctx._LPAREN);
        this.state = 543;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.state = 526;
            localctx.a = this.expr_block();
            localctx.tokens.push(...localctx.a.tokens);
            this.state = 534;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VenbraceParser.MINUS:
                this.state = 528;
                localctx._MINUS = this.match(VenbraceParser.MINUS);
                localctx.tokens.push(localctx._MINUS);
                break;
            case VenbraceParser.DIV:
                this.state = 530;
                localctx._DIV = this.match(VenbraceParser.DIV);
                localctx.tokens.push(localctx._DIV);
                break;
            case VenbraceParser.POW:
                this.state = 532;
                localctx._POW = this.match(VenbraceParser.POW);
                localctx.tokens.push(localctx._POW);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 536;
            localctx.b = this.expr_block();
            localctx.tokens.push(...localctx.b.tokens);
            break;

        case 2:
            this.state = 539;
            localctx.a = this.expr_block();
            this.state = 540;
            localctx._NEG_NUM = this.match(VenbraceParser.NEG_NUM);

              var num = localctx._NEG_NUM;

              var neg = localctx._NEG_NUM.clone();
              neg.type = 63; // hard-coded
              neg.stop = neg.start;
              neg.text = (localctx._MINUS===null ? null : localctx._MINUS.text);

              num.text = num.text.substring(1);
              num.type = num.type - 1; // NUMBER = 121, NEG_NUM = 122
              num.start = num.start + 1;
              num.column = num.column + 1;


              localctx.tokens.push(...localctx.a.tokens);
              //localctx.tokens.push(localctx._NEG_NUM);
              localctx.tokens.push(neg);
              localctx.tokens.push(num);

            break;

        }
        this.state = 545;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Min_maxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_min_max;
    this.tokens = null
    this._LPAREN = null; // Token
    this._MIN = null; // Token
    this._MAX = null; // Token
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Min_maxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Min_maxContext.prototype.constructor = Min_maxContext;

Min_maxContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Min_maxContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Min_maxContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Min_maxContext.prototype.MIN = function() {
    return this.getToken(VenbraceParser.MIN, 0);
};

Min_maxContext.prototype.MAX = function() {
    return this.getToken(VenbraceParser.MAX, 0);
};

Min_maxContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterMin_max(this);
	}
};

Min_maxContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitMin_max(this);
	}
};




VenbraceParser.Min_maxContext = Min_maxContext;

VenbraceParser.prototype.min_max = function() {

    var localctx = new Min_maxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, VenbraceParser.RULE_min_max);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        localctx.tokens.push(localctx._LPAREN);
        this.state = 554;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.MIN:
            this.state = 550;
            localctx._MIN = this.match(VenbraceParser.MIN);
            localctx.tokens.push(localctx._MIN);
            break;
        case VenbraceParser.MAX:
            this.state = 552;
            localctx._MAX = this.match(VenbraceParser.MAX);
            localctx.tokens.push(localctx._MAX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 556;
        localctx.a = this.expr_block();
        localctx.tokens.push(...localctx.a.tokens);
        this.state = 561; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 558;
            localctx.b = this.expr_block();
            localctx.tokens.push(...localctx.b.tokens);
            this.state = 563; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (VenbraceParser.NUMBER - 121)) | (1 << (VenbraceParser.NEG_NUM - 121)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 121)) | (1 << (VenbraceParser.ID - 121)) | (1 << (VenbraceParser.STRING - 121)))) !== 0));
        this.state = 565;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unary_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_unary_op;
    this.tokens = null
    this._LPAREN = null; // Token
    this._SQRT = null; // Token
    this._ABS = null; // Token
    this._NEG = null; // Token
    this._LOG = null; // Token
    this._EULER = null; // Token
    this._ROUND = null; // Token
    this._CEILING = null; // Token
    this._FLOOR = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Unary_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_opContext.prototype.constructor = Unary_opContext;

Unary_opContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Unary_opContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Unary_opContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Unary_opContext.prototype.SQRT = function() {
    return this.getToken(VenbraceParser.SQRT, 0);
};

Unary_opContext.prototype.ABS = function() {
    return this.getToken(VenbraceParser.ABS, 0);
};

Unary_opContext.prototype.NEG = function() {
    return this.getToken(VenbraceParser.NEG, 0);
};

Unary_opContext.prototype.LOG = function() {
    return this.getToken(VenbraceParser.LOG, 0);
};

Unary_opContext.prototype.EULER = function() {
    return this.getToken(VenbraceParser.EULER, 0);
};

Unary_opContext.prototype.ROUND = function() {
    return this.getToken(VenbraceParser.ROUND, 0);
};

Unary_opContext.prototype.CEILING = function() {
    return this.getToken(VenbraceParser.CEILING, 0);
};

Unary_opContext.prototype.FLOOR = function() {
    return this.getToken(VenbraceParser.FLOOR, 0);
};

Unary_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterUnary_op(this);
	}
};

Unary_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitUnary_op(this);
	}
};




VenbraceParser.Unary_opContext = Unary_opContext;

VenbraceParser.prototype.unary_op = function() {

    var localctx = new Unary_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, VenbraceParser.RULE_unary_op);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        localctx.tokens.push(localctx._LPAREN);
        this.state = 586;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.SQRT:
            this.state = 570;
            localctx._SQRT = this.match(VenbraceParser.SQRT);
            localctx.tokens.push(localctx._SQRT);
            break;
        case VenbraceParser.ABS:
            this.state = 572;
            localctx._ABS = this.match(VenbraceParser.ABS);
            localctx.tokens.push(localctx._ABS);
            break;
        case VenbraceParser.NEG:
            this.state = 574;
            localctx._NEG = this.match(VenbraceParser.NEG);
            localctx.tokens.push(localctx._NEG);
            break;
        case VenbraceParser.LOG:
            this.state = 576;
            localctx._LOG = this.match(VenbraceParser.LOG);
            localctx.tokens.push(localctx._LOG);
            break;
        case VenbraceParser.EULER:
            this.state = 578;
            localctx._EULER = this.match(VenbraceParser.EULER);
            localctx.tokens.push(localctx._EULER);
            break;
        case VenbraceParser.ROUND:
            this.state = 580;
            localctx._ROUND = this.match(VenbraceParser.ROUND);
            localctx.tokens.push(localctx._ROUND);
            break;
        case VenbraceParser.CEILING:
            this.state = 582;
            localctx._CEILING = this.match(VenbraceParser.CEILING);
            localctx.tokens.push(localctx._CEILING);
            break;
        case VenbraceParser.FLOOR:
            this.state = 584;
            localctx._FLOOR = this.match(VenbraceParser.FLOOR);
            localctx.tokens.push(localctx._FLOOR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 588;
        localctx._expr_block = this.expr_block();
        localctx.tokens.push(...localctx._expr_block.tokens);
        this.state = 590;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_mod;
    this.tokens = null
    this._LPAREN = null; // Token
    this._MODULO = null; // Token
    this._OF = null; // Token
    this.a = null; // Expr_blockContext
    this._DIV = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

ModContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModContext.prototype.constructor = ModContext;

ModContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

ModContext.prototype.MODULO = function() {
    return this.getToken(VenbraceParser.MODULO, 0);
};

ModContext.prototype.OF = function() {
    return this.getToken(VenbraceParser.OF, 0);
};

ModContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

ModContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

ModContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

ModContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterMod(this);
	}
};

ModContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitMod(this);
	}
};




VenbraceParser.ModContext = ModContext;

VenbraceParser.prototype.mod = function() {

    var localctx = new ModContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, VenbraceParser.RULE_mod);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 594;
        localctx._MODULO = this.match(VenbraceParser.MODULO);
        this.state = 595;
        localctx._OF = this.match(VenbraceParser.OF);
        this.state = 596;
        localctx.a = this.expr_block();
        this.state = 597;
        localctx._DIV = this.match(VenbraceParser.DIV);
        this.state = 598;
        localctx.b = this.expr_block();
        this.state = 599;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._MODULO);
          localctx.tokens.push(localctx._OF);
          localctx.tokens.push(...localctx.a.tokens);
          localctx.tokens.push(localctx._DIV);
          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RemainderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_remainder;
    this.tokens = null
    this._LPAREN = null; // Token
    this._REMAINDER = null; // Token
    this._OF = null; // Token
    this.a = null; // Expr_blockContext
    this._DIV = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

RemainderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemainderContext.prototype.constructor = RemainderContext;

RemainderContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

RemainderContext.prototype.REMAINDER = function() {
    return this.getToken(VenbraceParser.REMAINDER, 0);
};

RemainderContext.prototype.OF = function() {
    return this.getToken(VenbraceParser.OF, 0);
};

RemainderContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

RemainderContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

RemainderContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

RemainderContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterRemainder(this);
	}
};

RemainderContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitRemainder(this);
	}
};




VenbraceParser.RemainderContext = RemainderContext;

VenbraceParser.prototype.remainder = function() {

    var localctx = new RemainderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, VenbraceParser.RULE_remainder);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 603;
        localctx._REMAINDER = this.match(VenbraceParser.REMAINDER);
        this.state = 604;
        localctx._OF = this.match(VenbraceParser.OF);
        this.state = 605;
        localctx.a = this.expr_block();
        this.state = 606;
        localctx._DIV = this.match(VenbraceParser.DIV);
        this.state = 607;
        localctx.b = this.expr_block();
        this.state = 608;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._REMAINDER);
          localctx.tokens.push(localctx._OF);
          localctx.tokens.push(...localctx.a.tokens);
          localctx.tokens.push(localctx._DIV);
          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuotientContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_quotient;
    this.tokens = null
    this._LPAREN = null; // Token
    this._QUOTIENT = null; // Token
    this._OF = null; // Token
    this.a = null; // Expr_blockContext
    this._DIV = null; // Token
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

QuotientContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotientContext.prototype.constructor = QuotientContext;

QuotientContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

QuotientContext.prototype.QUOTIENT = function() {
    return this.getToken(VenbraceParser.QUOTIENT, 0);
};

QuotientContext.prototype.OF = function() {
    return this.getToken(VenbraceParser.OF, 0);
};

QuotientContext.prototype.DIV = function() {
    return this.getToken(VenbraceParser.DIV, 0);
};

QuotientContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

QuotientContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

QuotientContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterQuotient(this);
	}
};

QuotientContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitQuotient(this);
	}
};




VenbraceParser.QuotientContext = QuotientContext;

VenbraceParser.prototype.quotient = function() {

    var localctx = new QuotientContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, VenbraceParser.RULE_quotient);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 612;
        localctx._QUOTIENT = this.match(VenbraceParser.QUOTIENT);
        this.state = 613;
        localctx._OF = this.match(VenbraceParser.OF);
        this.state = 614;
        localctx.a = this.expr_block();
        this.state = 615;
        localctx._DIV = this.match(VenbraceParser.DIV);
        this.state = 616;
        localctx.b = this.expr_block();
        this.state = 617;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._QUOTIENT);
          localctx.tokens.push(localctx._OF);
          localctx.tokens.push(...localctx.a.tokens);
          localctx.tokens.push(localctx._DIV);
          localctx.tokens.push(...localctx.b.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_trig;
    this.tokens = null
    this._LPAREN = null; // Token
    this._SIN = null; // Token
    this._COS = null; // Token
    this._TAN = null; // Token
    this._ASIN = null; // Token
    this._ACOS = null; // Token
    this._ATAN = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

TrigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrigContext.prototype.constructor = TrigContext;

TrigContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

TrigContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

TrigContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

TrigContext.prototype.SIN = function() {
    return this.getToken(VenbraceParser.SIN, 0);
};

TrigContext.prototype.COS = function() {
    return this.getToken(VenbraceParser.COS, 0);
};

TrigContext.prototype.TAN = function() {
    return this.getToken(VenbraceParser.TAN, 0);
};

TrigContext.prototype.ASIN = function() {
    return this.getToken(VenbraceParser.ASIN, 0);
};

TrigContext.prototype.ACOS = function() {
    return this.getToken(VenbraceParser.ACOS, 0);
};

TrigContext.prototype.ATAN = function() {
    return this.getToken(VenbraceParser.ATAN, 0);
};

TrigContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterTrig(this);
	}
};

TrigContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitTrig(this);
	}
};




VenbraceParser.TrigContext = TrigContext;

VenbraceParser.prototype.trig = function() {

    var localctx = new TrigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, VenbraceParser.RULE_trig);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        localctx.tokens.push(localctx._LPAREN);
        this.state = 634;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.SIN:
            this.state = 622;
            localctx._SIN = this.match(VenbraceParser.SIN);
            localctx.tokens.push(localctx._SIN);
            break;
        case VenbraceParser.COS:
            this.state = 624;
            localctx._COS = this.match(VenbraceParser.COS);
            localctx.tokens.push(localctx._COS);
            break;
        case VenbraceParser.TAN:
            this.state = 626;
            localctx._TAN = this.match(VenbraceParser.TAN);
            localctx.tokens.push(localctx._TAN);
            break;
        case VenbraceParser.ASIN:
            this.state = 628;
            localctx._ASIN = this.match(VenbraceParser.ASIN);
            localctx.tokens.push(localctx._ASIN);
            break;
        case VenbraceParser.ACOS:
            this.state = 630;
            localctx._ACOS = this.match(VenbraceParser.ACOS);
            localctx.tokens.push(localctx._ACOS);
            break;
        case VenbraceParser.ATAN:
            this.state = 632;
            localctx._ATAN = this.match(VenbraceParser.ATAN);
            localctx.tokens.push(localctx._ATAN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 636;
        localctx._expr_block = this.expr_block();
        this.state = 637;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(...localctx._expr_block.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Atan2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_atan2;
    this.tokens = null
    this._LPAREN = null; // Token
    this._ATAN2 = null; // Token
    this.y = null; // Token
    this.y_expr = null; // Expr_blockContext
    this.x = null; // Token
    this.x_expr = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Atan2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atan2Context.prototype.constructor = Atan2Context;

Atan2Context.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Atan2Context.prototype.ATAN2 = function() {
    return this.getToken(VenbraceParser.ATAN2, 0);
};

Atan2Context.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Atan2Context.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Atan2Context.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterAtan2(this);
	}
};

Atan2Context.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitAtan2(this);
	}
};




VenbraceParser.Atan2Context = Atan2Context;

VenbraceParser.prototype.atan2 = function() {

    var localctx = new Atan2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 72, VenbraceParser.RULE_atan2);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 641;
        localctx._ATAN2 = this.match(VenbraceParser.ATAN2);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._ATAN2);

        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.T__0) {
            this.state = 643;
            localctx.y = this.match(VenbraceParser.T__0);

              localctx.y['optiona'] = true;
              localctx.tokens.push(localctx.y);  

        }

        this.state = 647;
        localctx.y_expr = this.expr_block();
        localctx.tokens.push(...localctx.y_expr.tokens);
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.T__1) {
            this.state = 649;
            localctx.x = this.match(VenbraceParser.T__1);

              localctx.x['optiona'] = true;
              localctx.tokens.push(localctx.x);  

        }

        this.state = 653;
        localctx.x_expr = this.expr_block();
        this.state = 654;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(...localctx.x_expr.tokens);
          localctx.tokens.push(localctx._RPAREN);  

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Str_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_expr;
    this.tokens = null
    this._str_join = null; // Str_joinContext
    this._str_length = null; // Str_lengthContext
    this._str_reverse = null; // Str_reverseContext
    this._str_split_at_spaces = null; // Str_split_at_spacesContext
    return this;
}

Str_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_exprContext.prototype.constructor = Str_exprContext;

Str_exprContext.prototype.str_join = function() {
    return this.getTypedRuleContext(Str_joinContext,0);
};

Str_exprContext.prototype.str_length = function() {
    return this.getTypedRuleContext(Str_lengthContext,0);
};

Str_exprContext.prototype.str_reverse = function() {
    return this.getTypedRuleContext(Str_reverseContext,0);
};

Str_exprContext.prototype.str_split_at_spaces = function() {
    return this.getTypedRuleContext(Str_split_at_spacesContext,0);
};

Str_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStr_expr(this);
	}
};

Str_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStr_expr(this);
	}
};




VenbraceParser.Str_exprContext = Str_exprContext;

VenbraceParser.prototype.str_expr = function() {

    var localctx = new Str_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, VenbraceParser.RULE_str_expr);
    try {
        this.state = 669;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            localctx._str_join = this.str_join();
            localctx.tokens =  localctx._str_join.tokens
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 660;
            localctx._str_length = this.str_length();
            localctx.tokens =  localctx._str_length.tokens
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 663;
            localctx._str_reverse = this.str_reverse();
            localctx.tokens =  localctx._str_reverse.tokens
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 666;
            localctx._str_split_at_spaces = this.str_split_at_spaces();
            localctx.tokens =  localctx._str_split_at_spaces.tokens
            break;

        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Str_lengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_length;
    this.tokens = null
    this._LPAREN = null; // Token
    this._LENGTH = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Str_lengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_lengthContext.prototype.constructor = Str_lengthContext;

Str_lengthContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Str_lengthContext.prototype.LENGTH = function() {
    return this.getToken(VenbraceParser.LENGTH, 0);
};

Str_lengthContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Str_lengthContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Str_lengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStr_length(this);
	}
};

Str_lengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStr_length(this);
	}
};




VenbraceParser.Str_lengthContext = Str_lengthContext;

VenbraceParser.prototype.str_length = function() {

    var localctx = new Str_lengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, VenbraceParser.RULE_str_length);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 672;
        localctx._LENGTH = this.match(VenbraceParser.LENGTH);
        this.state = 673;
        localctx._expr_block = this.expr_block();
        this.state = 674;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._LENGTH);
          localctx.tokens.push(...localctx._expr_block.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Str_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_join;
    this.tokens = null
    this._LPAREN = null; // Token
    this._JOIN = null; // Token
    this.a = null; // Expr_blockContext
    this.b = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Str_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_joinContext.prototype.constructor = Str_joinContext;

Str_joinContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Str_joinContext.prototype.JOIN = function() {
    return this.getToken(VenbraceParser.JOIN, 0);
};

Str_joinContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Str_joinContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Str_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStr_join(this);
	}
};

Str_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStr_join(this);
	}
};




VenbraceParser.Str_joinContext = Str_joinContext;

VenbraceParser.prototype.str_join = function() {

    var localctx = new Str_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, VenbraceParser.RULE_str_join);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 678;
        localctx._JOIN = this.match(VenbraceParser.JOIN);
        this.state = 679;
        localctx.a = this.expr_block();

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._JOIN);
          localctx.tokens.push(...localctx.a.tokens);

        this.state = 684; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 681;
            localctx.b = this.expr_block();
            localctx.tokens.push(...localctx.b.tokens);
            this.state = 686; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (VenbraceParser.NUMBER - 121)) | (1 << (VenbraceParser.NEG_NUM - 121)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 121)) | (1 << (VenbraceParser.ID - 121)) | (1 << (VenbraceParser.STRING - 121)))) !== 0));
        this.state = 688;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Str_reverseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_reverse;
    this.tokens = null
    this._LPAREN = null; // Token
    this._REVERSE = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Str_reverseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_reverseContext.prototype.constructor = Str_reverseContext;

Str_reverseContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Str_reverseContext.prototype.REVERSE = function() {
    return this.getToken(VenbraceParser.REVERSE, 0);
};

Str_reverseContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Str_reverseContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Str_reverseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStr_reverse(this);
	}
};

Str_reverseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStr_reverse(this);
	}
};




VenbraceParser.Str_reverseContext = Str_reverseContext;

VenbraceParser.prototype.str_reverse = function() {

    var localctx = new Str_reverseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, VenbraceParser.RULE_str_reverse);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 692;
        localctx._REVERSE = this.match(VenbraceParser.REVERSE);
        this.state = 693;
        localctx._expr_block = this.expr_block();
        this.state = 694;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._REVERSE);
          localctx.tokens.push(...localctx._expr_block.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Str_split_at_spacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_str_split_at_spaces;
    this.tokens = null
    this._LPAREN = null; // Token
    this._SPLIT_AT_SPACES = null; // Token
    this._expr_block = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Str_split_at_spacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Str_split_at_spacesContext.prototype.constructor = Str_split_at_spacesContext;

Str_split_at_spacesContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Str_split_at_spacesContext.prototype.SPLIT_AT_SPACES = function() {
    return this.getToken(VenbraceParser.SPLIT_AT_SPACES, 0);
};

Str_split_at_spacesContext.prototype.expr_block = function() {
    return this.getTypedRuleContext(Expr_blockContext,0);
};

Str_split_at_spacesContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Str_split_at_spacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterStr_split_at_spaces(this);
	}
};

Str_split_at_spacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitStr_split_at_spaces(this);
	}
};




VenbraceParser.Str_split_at_spacesContext = Str_split_at_spacesContext;

VenbraceParser.prototype.str_split_at_spaces = function() {

    var localctx = new Str_split_at_spacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, VenbraceParser.RULE_str_split_at_spaces);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        this.state = 698;
        localctx._SPLIT_AT_SPACES = this.match(VenbraceParser.SPLIT_AT_SPACES);
        this.state = 699;
        localctx._expr_block = this.expr_block();
        this.state = 700;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);

          localctx.tokens.push(localctx._LPAREN);
          localctx.tokens.push(localctx._SPLIT_AT_SPACES);
          localctx.tokens.push(...localctx._expr_block.tokens);
          localctx.tokens.push(localctx._RPAREN);

        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_getter;
    this.tokens = null
    this._ID = null; // Token
    this._LPAREN = null; // Token
    this._GET = null; // Token
    this._GLOBAL = null; // Token
    this._RPAREN = null; // Token
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

GetterContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

GetterContext.prototype.GET = function() {
    return this.getToken(VenbraceParser.GET, 0);
};

GetterContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

GetterContext.prototype.GLOBAL = function() {
    return this.getToken(VenbraceParser.GLOBAL, 0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitGetter(this);
	}
};




VenbraceParser.GetterContext = GetterContext;

VenbraceParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, VenbraceParser.RULE_getter);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.state = 716;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 703;
            localctx._ID = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx._ID);
            break;
        case VenbraceParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 705;
            localctx._LPAREN = this.match(VenbraceParser.LPAREN);
            this.state = 706;
            localctx._GET = this.match(VenbraceParser.GET);

                localctx._LPAREN['optional'] = true;
                localctx._GET['optional'] = true;
                localctx.tokens.push(localctx._LPAREN);
                localctx.tokens.push(localctx._GET);
              
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VenbraceParser.GLOBAL) {
                this.state = 708;
                localctx._GLOBAL = this.match(VenbraceParser.GLOBAL);
                localctx.tokens.push(localctx._GLOBAL);
            }

            this.state = 712;
            localctx._ID = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx._ID);
            this.state = 714;
            localctx._RPAREN = this.match(VenbraceParser.RPAREN);

                localctx._RPAREN['optional'] = true;
                localctx.tokens.push(localctx._RPAREN);
              
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_procedure_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_call_procedure_expr;
    this.tokens = null
    this._LPAREN = null; // Token
    this._CALL = null; // Token
    this._ID = null; // Token
    this.component = null; // Token
    this._DOT = null; // Token
    this.event = null; // Token
    this._label = null; // LabelContext
    this.arg = null; // Expr_blockContext
    this._RPAREN = null; // Token
    return this;
}

Call_procedure_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_procedure_exprContext.prototype.constructor = Call_procedure_exprContext;

Call_procedure_exprContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

Call_procedure_exprContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

Call_procedure_exprContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VenbraceParser.ID);
    } else {
        return this.getToken(VenbraceParser.ID, i);
    }
};


Call_procedure_exprContext.prototype.CALL = function() {
    return this.getToken(VenbraceParser.CALL, 0);
};

Call_procedure_exprContext.prototype.DOT = function() {
    return this.getToken(VenbraceParser.DOT, 0);
};

Call_procedure_exprContext.prototype.expr_block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr_blockContext);
    } else {
        return this.getTypedRuleContext(Expr_blockContext,i);
    }
};

Call_procedure_exprContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

Call_procedure_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterCall_procedure_expr(this);
	}
};

Call_procedure_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitCall_procedure_expr(this);
	}
};




VenbraceParser.Call_procedure_exprContext = Call_procedure_exprContext;

VenbraceParser.prototype.call_procedure_expr = function() {

    var localctx = new Call_procedure_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, VenbraceParser.RULE_call_procedure_expr);

      localctx.tokens =  []

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        localctx._LPAREN = this.match(VenbraceParser.LPAREN);
        localctx.tokens.push(localctx._LPAREN);
        this.state = 722;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VenbraceParser.CALL) {
            this.state = 720;
            localctx._CALL = this.match(VenbraceParser.CALL);

             localctx._CALL['optional'] = true;
             localctx.tokens.push(localctx._CALL); 

        }

        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.state = 724;
            localctx._ID = this.match(VenbraceParser.ID);
            localctx.tokens.push(localctx._ID);
            break;

        case 2:
            this.state = 726;
            localctx.component = this.match(VenbraceParser.ID);
            this.state = 727;
            localctx._DOT = this.match(VenbraceParser.DOT);
            this.state = 728;
            localctx.event = this.match(VenbraceParser.ID);

             localctx.tokens.push(localctx.component);
             localctx.tokens.push(localctx._DOT);
             localctx.tokens.push(localctx.event); 

            break;

        }
        this.state = 742;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VenbraceParser.LPAREN) | (1 << VenbraceParser.TRUE) | (1 << VenbraceParser.FALSE))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (VenbraceParser.NUMBER - 121)) | (1 << (VenbraceParser.NEG_NUM - 121)) | (1 << (VenbraceParser.COMPONENT_PROPERTY - 121)) | (1 << (VenbraceParser.ID - 121)) | (1 << (VenbraceParser.STRING - 121)))) !== 0)) {
            this.state = 735;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
            if(la_===1) {
                this.state = 732;
                localctx._label = this.label();

                 var label_token = localctx._label.tokens[0];
                 label_token['optional'] = true;
                 localctx.tokens.push(label_token); 


            }
            this.state = 737;
            localctx.arg = this.expr_block();
            localctx.tokens.push(...localctx.arg.tokens);
            this.state = 744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 745;
        localctx._RPAREN = this.match(VenbraceParser.RPAREN);
        localctx.tokens.push(localctx._RPAREN);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_atom;
    this.tokens = null
    this._atom_elements = null; // Atom_elementsContext
    this._LPAREN = null; // Token
    this._RPAREN = null; // Token
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.atom_elements = function() {
    return this.getTypedRuleContext(Atom_elementsContext,0);
};

AtomContext.prototype.LPAREN = function() {
    return this.getToken(VenbraceParser.LPAREN, 0);
};

AtomContext.prototype.RPAREN = function() {
    return this.getToken(VenbraceParser.RPAREN, 0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitAtom(this);
	}
};




VenbraceParser.AtomContext = AtomContext;

VenbraceParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, VenbraceParser.RULE_atom);

      localctx.tokens =  []

    try {
        this.state = 756;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.TRUE:
        case VenbraceParser.FALSE:
        case VenbraceParser.NUMBER:
        case VenbraceParser.NEG_NUM:
        case VenbraceParser.COMPONENT_PROPERTY:
        case VenbraceParser.STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 748;
            localctx._atom_elements = this.atom_elements();
            localctx.tokens.push(...localctx._atom_elements.tokens);
            break;
        case VenbraceParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 751;
            localctx._LPAREN = this.match(VenbraceParser.LPAREN);
            this.state = 752;
            localctx._atom_elements = this.atom_elements();
            this.state = 753;
            localctx._RPAREN = this.match(VenbraceParser.RPAREN);

              localctx._LPAREN['optional'] = true;
              localctx.tokens.push(localctx._LPAREN);
              localctx.tokens.push(...localctx._atom_elements.tokens);
              localctx._RPAREN['optional'] = true;
              localctx.tokens.push(localctx._RPAREN);
              
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Atom_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_atom_elements;
    this.tokens = null
    this._NUMBER = null; // Token
    this._NEG_NUM = null; // Token
    this._STRING = null; // Token
    this._TRUE = null; // Token
    this._FALSE = null; // Token
    this._COMPONENT_PROPERTY = null; // Token
    return this;
}

Atom_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atom_elementsContext.prototype.constructor = Atom_elementsContext;

Atom_elementsContext.prototype.NUMBER = function() {
    return this.getToken(VenbraceParser.NUMBER, 0);
};

Atom_elementsContext.prototype.NEG_NUM = function() {
    return this.getToken(VenbraceParser.NEG_NUM, 0);
};

Atom_elementsContext.prototype.STRING = function() {
    return this.getToken(VenbraceParser.STRING, 0);
};

Atom_elementsContext.prototype.TRUE = function() {
    return this.getToken(VenbraceParser.TRUE, 0);
};

Atom_elementsContext.prototype.FALSE = function() {
    return this.getToken(VenbraceParser.FALSE, 0);
};

Atom_elementsContext.prototype.COMPONENT_PROPERTY = function() {
    return this.getToken(VenbraceParser.COMPONENT_PROPERTY, 0);
};

Atom_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterAtom_elements(this);
	}
};

Atom_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitAtom_elements(this);
	}
};




VenbraceParser.Atom_elementsContext = Atom_elementsContext;

VenbraceParser.prototype.atom_elements = function() {

    var localctx = new Atom_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, VenbraceParser.RULE_atom_elements);

      localctx.tokens =  []

    try {
        this.state = 770;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VenbraceParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 758;
            localctx._NUMBER = this.match(VenbraceParser.NUMBER);
            localctx.tokens.push(localctx._NUMBER);
            break;
        case VenbraceParser.NEG_NUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 760;
            localctx._NEG_NUM = this.match(VenbraceParser.NEG_NUM);
            localctx.tokens.push(localctx._NEG_NUM);
            break;
        case VenbraceParser.STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 762;
            localctx._STRING = this.match(VenbraceParser.STRING);
            localctx.tokens.push(localctx._STRING);
            break;
        case VenbraceParser.TRUE:
            this.enterOuterAlt(localctx, 4);
            this.state = 764;
            localctx._TRUE = this.match(VenbraceParser.TRUE);
            localctx.tokens.push(localctx._TRUE);
            break;
        case VenbraceParser.FALSE:
            this.enterOuterAlt(localctx, 5);
            this.state = 766;
            localctx._FALSE = this.match(VenbraceParser.FALSE);
            localctx.tokens.push(localctx._FALSE);
            break;
        case VenbraceParser.COMPONENT_PROPERTY:
            this.enterOuterAlt(localctx, 6);
            this.state = 768;
            localctx._COMPONENT_PROPERTY = this.match(VenbraceParser.COMPONENT_PROPERTY);
            localctx.tokens.push(localctx._COMPONENT_PROPERTY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VenbraceParser.RULE_label;
    this.tokens = null
    this._ID = null; // Token
    return this;
}

LabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelContext.prototype.constructor = LabelContext;

LabelContext.prototype.ID = function() {
    return this.getToken(VenbraceParser.ID, 0);
};

LabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.enterLabel(this);
	}
};

LabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof VenbraceListener ) {
        listener.exitLabel(this);
	}
};




VenbraceParser.LabelContext = LabelContext;

VenbraceParser.prototype.label = function() {

    var localctx = new LabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, VenbraceParser.RULE_label);

      localctx.tokens =  []

    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        localctx._ID = this.match(VenbraceParser.ID);
        localctx.tokens.push(localctx._ID);
        }
    catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.VenbraceParser = VenbraceParser;
